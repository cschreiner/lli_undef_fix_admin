From llvmdev-bounces@cs.uiuc.edu Wed Jan 28 21:55:55 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.6 required=5.0 tests=AWL,HK_RANDOM_ENVFROM,
	HTML_MESSAGE autolearn=no version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id 34C9C6501B2;
	Wed, 28 Jan 2015 21:55:55 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Wed, 28 Jan 2015 21:55:54 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0T4rXNI013774;
	Wed, 28 Jan 2015 22:53:34 -0600
Received: from engr-mail-prod.engr.illinois.edu
	(engr-mail-prod.engr.illinois.edu [192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0T4rWFc013771
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Wed, 28 Jan 2015 22:53:32 -0600
Received: from pps03.cites.illinois.edu ([192.17.82.70])
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <listmail@philipreames.com>)
	id 1YGh6i-0001am-8A
	for llvmdev@cs.uiuc.edu; Wed, 28 Jan 2015 22:53:32 -0600
Received: from mout.perfora.net (mout.perfora.net [74.208.4.196])
	by pps03.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0T4rQPV018899
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Wed, 28 Jan 2015 22:53:26 -0600
Received: from [192.168.200.212] (c-50-184-78-248.hsd1.ca.comcast.net
	[50.184.78.248])
	by mrelay.perfora.net (node=mreueus002) with ESMTP (Nemesis)
	id 0M7rLq-1XUD972VI8-00vL6L; Thu, 29 Jan 2015 05:53:19 +0100
Message-ID: <54C9BCB8.8040904@philipreames.com>
Date: Wed, 28 Jan 2015 20:53:12 -0800
From: Philip Reames <listmail@philipreames.com>
User-Agent: Mozilla/5.0 (X11; Linux x86_64;
	rv:31.0) Gecko/20100101 Thunderbird/31.4.0
MIME-Version: 1.0
To: Sean Silva <chisophugis@gmail.com>,
        David Majnemer <david.majnemer@gmail.com>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>
	<CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmail.com>
In-Reply-To: <CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmail.com>
X-Provags-ID: V02:K0:FR56l4cRyEEQ1dXuiI9dbmNo/cAwjxDKREaV8XztKI4
	wOXeE/Te5+mGF/3xpwNzaoNaR4GGBKrsh47pz+MziSxvTNqmZ/
	8DDcKPvjByzmfO1MGCyaD3H5PUJUBsloHeB3hu75HE+nuvasvz
	howKaq16MQhN0XVOruvjiRrZwqImpmeTO5QUYdEmscJxRw6neO
	ezRa1bDL/6B1c8EBI0Ar7FTpdKvt/1PfwI/uU7RhauCrx6zMe9
	QDoWr3+81oP1KC77Jo67IhS/CJczp9+Qz2IptWu82k8JNtspop
	/Pf2bl9hREu7obsXYjOALH505HLRicjUGXf8M3UsPP475Grl+Z
	5GU3KpzdI697tpeArlvdApXkGPKghEFLNtHwp5cOY
X-UI-Out-Filterresults: notjunk:1;
Cc: Nuno Lopes <nuno.lopes@ist.utl.pt>, John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: multipart/mixed; boundary="===============4280470979985130526=="
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: O

This is a multi-part message in MIME format.
--===============4280470979985130526==
Content-Type: multipart/alternative;
 boundary="------------060507020707000209010403"

This is a multi-part message in MIME format.
--------------060507020707000209010403
Content-Type: text/plain; charset=windows-1252; format=flowed
Content-Transfer-Encoding: 7bit

On 01/28/2015 07:02 AM, Sean Silva wrote:
> Could you maybe provide an example where replacing `%always_poison` 
> with `undef` will change the meaning? At least for me, the thing that 
> I'm most unclear about is how poison differs from undef.
I will second this request for much the same reason.
>
> -- Sean Silva
>
> On Wed, Jan 28, 2015 at 2:50 AM, David Majnemer 
> <david.majnemer@gmail.com <mailto:david.majnemer@gmail.com>> wrote:
>
>     Hello,
>
>     What follows is my attempt to describe how poison works.  Let me
>     know what you think.
>
>     -- 
>     David
>
>
>     # LLVM Poison Semantics
>
>     Poison is an LLVM concept which exists solely to enable further
>     optimization of LLVM IR. The exact behavior of poison has been, to
>     say the least, confusing for users, researchers and engineers
>     working with LLVM.
>
>     This document hopes to clear up some of the confusion of poison
>     and hopefully explain *why* it has its semantics.
>
>     ## A Quick Introduction to Poison
>
>     Let's start with a concrete motivating example in C:
>     ```
>     int isSumGreater(int a, int b) {
>       return a + b > a;
>     }
>     ```
>
>     The C specification permits us to optimize the comparison in
>     `isSumGreater` to `b > 0` because signed overflow results in
>     undefined behavior.  A reasonable translation of `isSumGreater` to
>     LLVM IR could be:
>
>     ```
>     define i32 @isSumGreater(i32 %a, i32 %b) {
>     entry:
>       %add = add i32 %a, %b
>       %cmp = icmp sgt i32 %add, %a
>       %conv = zext i1 %cmp to i32
>       ret i32 %conv
>     }
>     ```
>
>     However, LLVM cannot determine that `%cmp` should not consider
>     cases where `%add` resulted in signed overflow.  We need a way to
>     communicate this information to LLVM.
>
>     This is where the `nsw` and `nuw` flags come into play.  `nsw` is
>     short for "no signed wrap", `nuw` is short for "no unsigned wrap".
>
>     With these, we can come up with a new formulation of `%add`: `add
>     i32 nsw %a, %b`.
>     LLVM can take this into account when it is optimizing the `%cmp`
>     and replace it with: `icmp sgt i32 %b, 0`.
>
>     ## Differences Between LLVM and C/C++
>
>     There are some interesting differences between what C++ and C
>     specify and how LLVM behaves with respect to performing an
>     operationg which is not permitted to overflow.
>
>     Perhaps chief among them is that evaluating an expression in C++
>     or C which results performs an overflow is undefined behavior. In
>     LLVM, executing an instruction which is marked `nsw` but which
>     violates signed overflow results in poison. Values which have no
>     relationship with poisoned values are not effected by them.
>
>     Let us take the following C program into consideration:
>     ```
>     int calculateImportantResult(int a, int b) {
>       int result = 0;
>       if (a) {
>         result = a + b;
>       }
>       return result;
>     }
>     ```
>
>     A straightforward lowering to LLVM IR could be:
>     ```
>     define i32 @calculateImportantResult(i32 %a, i32 %b) {
>     entry:
>       %tobool = icmp ne i32 %a, 0
>       br i1 %tobool, label %if.then, label %if.end
>
>     if.then:
>       %add = add nsw i32 %a, %b
>       br label %if.end
>
>     if.end:
>       %result = phi i32 [ %add, %if.then ], [ 0, %entry ]
>       ret i32 %result
>     }
>     ```
>
>     Moving `%add` to the `%entry` block would be preferable and would
>     allow further optimizations:
>     ```
>     define i32 @calculateImportantResult(i32 %a, i32 %b) {
>     entry:
>       %tobool = icmp ne i32 %a, 0
>       %add = add nsw i32 %a, %b
>       %result = select i1 %tobool, i32 0, i32 %add
>       ret i32 %result
>     }
>     ```
>
>     In the original code, the calculation of `%add` was control dependent.
>     Now, `%add` might result in signed overflow in violation of the
>     `nsw` flag.
>     Despite this, the program should behave as it did before because
>     the poisoned value is masked-out by the select. The next section
>     will dive into this in greater detail.
>
>     # Computation Involving Poison Values
>     Poison in a computation results in poison if the result cannot be
>     constrained by its non-poison operands.
>
>     Examples of this rule which will result in poison:
>     ```
>       %add = add i32 %x, %always_poison
>       %sub = sub i32 %x, %always_poison
>       %xor = xor i32 %x, %always_poison
>       %mul = mul i32 %always_poison, 1
>     ```
>
>     Examples of this rule which do not result in poison:
>     ```
>       %or  = or  i32 %always_poison, 2
>       %and = and i32 %always_poison, 2
>       %mul = mul i32 %always_poison, 0
>     ```
>
>     In fact, it would be reasonable to optimize `%or` to `2` and
>     `%and` to `0`.  In this respect, poison is not different from `undef`.
>
>     The following example is only poison if `%cond` is false:
>     ```
>       %sel = select i1 %cond, i32 2, %always_poison
>     ```
>
>     ### Is it safe to have poison as a `call` argument?
>
>     A `call` instruction may or may not result in poison depending on
>     exactly how the callee  uses the supplied arguments, it is not
>     necessarily the case that `call i32 @someFunction(i32
>     %always_poison)` results in poison.
>
>     LLVM cannot forbid poison from entering `call` arguments without
>     prohibiting an optimization pass from outlining code.
>
>     ### Is it safe to store poison to memory?
>
>     `store i32 %always_poison, i32* %mem` does not result in undefined
>     behavior. A subsequent load instruction like `%load = load i32*
>     %mem` will result in `%load` being a poison value.
>
>     ### Is it safe to load or store a poison memory location?
>
>     No.  Poison works just like `undef` in this respect.
>
>     ### Does comparing a poison value result in poison?
>
>     It depends.  If the comparison couldn't solely be determined by
>     looking at the other operand, the result is poison.
>
>     For example, `icmp i32 ule %always_poison, 4294967295` is `true`,
>     not poison.
>     However, `icmp i32 ne %always_poison, 7` is poison.
>
>     ### What if the condition operand in a `select` is poison?
>
>     In the example `%sel = select i1 %always_poison, i1 true, false`,
>     `%sel` is either `true` or `false`. Because, `%sel` depends on
>     `%always_poison` it too is poison.
>
>     _______________________________________________
>     LLVM Developers mailing list
>     LLVMdev@cs.uiuc.edu <mailto:LLVMdev@cs.uiuc.edu>
>     http://llvm.cs.uiuc.edu
>     http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev
>
>
>
>
> _______________________________________________
> LLVM Developers mailing list
> LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
> http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev


--------------060507020707000209010403
Content-Type: text/html; charset=windows-1252
Content-Transfer-Encoding: quoted-printable
X-MIME-Autoconverted: from 8bit to quoted-printable by pps03.cites.illinois.edu id t0T4rQPV018899

<html>
  <head>
    <meta content=3D"text/html; charset=3Dwindows-1252"
      http-equiv=3D"Content-Type">
  </head>
  <body bgcolor=3D"#FFFFFF" text=3D"#000000">
    <div class=3D"moz-cite-prefix">On 01/28/2015 07:02 AM, Sean Silva
      wrote:<br>
    </div>
    <blockquote
cite=3D"mid:CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmai=
l.com"
      type=3D"cite">
      <div dir=3D"ltr">Could you maybe provide an example where replacing
        `%always_poison` with `undef` will change the meaning? At least
        for me, the thing that I'm most unclear about is how poison
        differs from undef.</div>
    </blockquote>
    I will second this request for much the same reason.<br>
    <blockquote
cite=3D"mid:CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmai=
l.com"
      type=3D"cite">
      <div dir=3D"ltr">
        <div><br>
        </div>
        <div>-- Sean Silva</div>
      </div>
      <div class=3D"gmail_extra"><br>
        <div class=3D"gmail_quote">On Wed, Jan 28, 2015 at 2:50 AM, David
          Majnemer <span dir=3D"ltr">&lt;<a moz-do-not-send=3D"true"
              href=3D"mailto:david.majnemer@gmail.com" target=3D"_blank">=
david.majnemer@gmail.com</a>&gt;</span>
          wrote:<br>
          <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0
            .8ex;border-left:1px #ccc solid;padding-left:1ex">
            <div dir=3D"ltr">Hello,
              <div><br>
              </div>
              <div>What follows is my attempt to describe how poison
                works.=A0 Let me know what you think.</div>
              <div><br>
              </div>
              <div>--=A0</div>
              <div>David</div>
              <div><br>
              </div>
              <div><br>
              </div>
              <div>
                <div># LLVM Poison Semantics</div>
                <div><br>
                </div>
                <div>Poison is an LLVM concept which exists solely to
                  enable further optimization of LLVM IR. The exact
                  behavior of poison has been, to say the least,
                  confusing for users, researchers and engineers working
                  with LLVM.</div>
                <div><br>
                </div>
                <div>This document hopes to clear up some of the
                  confusion of poison and hopefully explain *why* it has
                  its semantics.</div>
                <div><br>
                </div>
                <div>## A Quick Introduction to Poison</div>
                <div><br>
                </div>
                <div>Let's start with a concrete motivating example in
                  C:</div>
                <div>```</div>
                <div>int isSumGreater(int a, int b) {</div>
                <div>=A0 return a + b &gt; a;</div>
                <div>}</div>
                <div>```</div>
                <div><br>
                </div>
                <div>The C specification permits us to optimize the
                  comparison in `isSumGreater` to `b &gt; 0` because
                  signed overflow results in undefined behavior.=A0 A
                  reasonable translation of `isSumGreater` to LLVM IR
                  could be:</div>
                <div><br>
                </div>
                <div>```</div>
                <div>define i32 @isSumGreater(i32 %a, i32 %b) {</div>
                <div>entry:</div>
                <div>=A0 %add =3D add i32 %a, %b</div>
                <div>=A0 %cmp =3D icmp sgt i32 %add, %a</div>
                <div>=A0 %conv =3D zext i1 %cmp to i32</div>
                <div>=A0 ret i32 %conv</div>
                <div>}</div>
                <div>```</div>
                <div><br>
                </div>
                <div>However, LLVM cannot determine that `%cmp` should
                  not consider cases where `%add` resulted in signed
                  overflow.=A0 We need a way to communicate this
                  information to LLVM.</div>
                <div><br>
                </div>
                <div>This is where the `nsw` and `nuw` flags come into
                  play. =A0`nsw` is short for "no signed wrap", `nuw` is
                  short for "no unsigned wrap".</div>
                <div><br>
                </div>
                <div>With these, we can come up with a new formulation
                  of `%add`: `add i32 nsw %a, %b`.</div>
                <div>LLVM can take this into account when it is
                  optimizing the `%cmp` and replace it with: `icmp sgt
                  i32 %b, 0`.</div>
                <div><br>
                </div>
                <div>## Differences Between LLVM and C/C++</div>
                <div><br>
                </div>
                <div>There are some interesting differences between what
                  C++ and C specify and how LLVM behaves with respect to
                  performing an operationg which is not permitted to
                  overflow. =A0</div>
                <div><br>
                </div>
                <div>Perhaps chief among them is that evaluating an
                  expression in C++ or C which results performs an
                  overflow is undefined behavior. In LLVM, executing an
                  instruction which is marked `nsw` but which violates
                  signed overflow results in poison. Values which have
                  no relationship with poisoned values are not effected
                  by them.</div>
                <div><br>
                </div>
                <div>Let us take the following C program into
                  consideration:</div>
                <div>```</div>
                <div>int calculateImportantResult(int a, int b) {</div>
                <div>=A0 int result =3D 0;</div>
                <div>=A0 if (a) {</div>
                <div>=A0 =A0 result =3D a + b;</div>
                <div>=A0 }</div>
                <div>=A0 return result;</div>
                <div>}</div>
                <div>```</div>
                <div><br>
                </div>
                <div>A straightforward lowering to LLVM IR could be:</div=
>
                <div>```</div>
                <div>define i32 @calculateImportantResult(i32 %a, i32
                  %b) {</div>
                <div>entry:</div>
                <div>=A0 %tobool =3D icmp ne i32 %a, 0</div>
                <div>=A0 br i1 %tobool, label %if.then, label %if.end</di=
v>
                <div><br>
                </div>
                <div>if.then:</div>
                <div>=A0 %add =3D add nsw i32 %a, %b</div>
                <div>=A0 br label %if.end</div>
                <div><br>
                </div>
                <div>if.end:</div>
                <div>=A0 %result =3D phi i32 [ %add, %if.then ], [ 0, %en=
try
                  ]</div>
                <div>=A0 ret i32 %result</div>
                <div>}</div>
                <div>```</div>
                <div><br>
                </div>
                <div>Moving `%add` to the `%entry` block would be
                  preferable and would allow further optimizations:</div>
                <div>```</div>
                <div>define i32 @calculateImportantResult(i32 %a, i32
                  %b) {</div>
                <div>entry:</div>
                <div>=A0 %tobool =3D icmp ne i32 %a, 0</div>
                <div>=A0 %add =3D add nsw i32 %a, %b</div>
                <div>=A0 %result =3D select i1 %tobool, i32 0, i32 %add</=
div>
                <div>=A0 ret i32 %result</div>
                <div>}</div>
                <div>```</div>
                <div><br>
                </div>
                <div>In the original code, the calculation of `%add` was
                  control dependent.</div>
                <div>Now, `%add` might result in signed overflow in
                  violation of the `nsw` flag.</div>
                <div>Despite this, the program should behave as it did
                  before because the poisoned value is masked-out by the
                  select. The next section will dive into this in
                  greater detail.</div>
                <div><br>
                </div>
                <div># Computation Involving Poison Values</div>
                <div>Poison in a computation results in poison if the
                  result cannot be constrained by its non-poison
                  operands.</div>
                <div><br>
                </div>
                <div>Examples of this rule which will result in poison:</=
div>
                <div>```</div>
                <div>=A0 %add =3D add i32 %x, %always_poison</div>
                <div>=A0 %sub =3D sub i32 %x, %always_poison</div>
                <div>=A0 %xor =3D xor i32 %x, %always_poison</div>
                <div>=A0 %mul =3D mul i32 %always_poison, 1</div>
                <div>```</div>
                <div><br>
                </div>
                <div>Examples of this rule which do not result in
                  poison:</div>
                <div>```</div>
                <div>=A0 %or =A0=3D or =A0i32 %always_poison, 2</div>
                <div>=A0 %and =3D and i32 %always_poison, 2</div>
                <div>=A0 %mul =3D mul i32 %always_poison, 0</div>
                <div>```</div>
                <div><br>
                </div>
                <div>In fact, it would be reasonable to optimize `%or`
                  to `2` and `%and` to `0`.=A0 In this respect, poison is
                  not different from `undef`.</div>
                <div><br>
                </div>
                <div>The following example is only poison if `%cond` is
                  false:</div>
                <div>```</div>
                <div>=A0 %sel =3D select i1 %cond, i32 2, %always_poison<=
/div>
                <div>```</div>
                <div><br>
                </div>
                <div>### Is it safe to have poison as a `call` argument?<=
/div>
                <div><br>
                </div>
                <div>A `call` instruction may or may not result in
                  poison depending on exactly how the callee =A0uses the
                  supplied arguments, it is not necessarily the case
                  that `call i32 @someFunction(i32 %always_poison)`
                  results in poison.</div>
                <div><br>
                </div>
                <div>LLVM cannot forbid poison from entering `call`
                  arguments without prohibiting an optimization pass
                  from outlining code.</div>
                <div><br>
                </div>
                <div>### Is it safe to store poison to memory?</div>
                <div><br>
                </div>
                <div>`store i32 %always_poison, i32* %mem` does not
                  result in undefined behavior. A subsequent load
                  instruction like `%load =3D load i32* %mem` will result
                  in `%load` being a poison value.</div>
                <div><br>
                </div>
                <div>### Is it safe to load or store a poison memory
                  location?</div>
                <div><br>
                </div>
                <div>No.=A0 Poison works just like `undef` in this
                  respect.</div>
                <div><br>
                </div>
                <div>### Does comparing a poison value result in poison?<=
/div>
                <div><br>
                </div>
                <div>It depends.=A0 If the comparison couldn't solely be
                  determined by looking at the other operand, the result
                  is poison.</div>
                <div><br>
                </div>
                <div>For example, `icmp i32 ule %always_poison,
                  4294967295` is `true`, not poison.</div>
                <div>However, `icmp i32 ne %always_poison, 7` is poison.<=
/div>
                <div><br>
                </div>
                <div>### What if the condition operand in a `select` is
                  poison?</div>
                <div><br>
                </div>
                <div>In the example `%sel =3D select i1 %always_poison, i=
1
                  true, false`, `%sel` is either `true` or `false`.=A0
                  Because, `%sel` depends on `%always_poison` it too is
                  poison.</div>
              </div>
            </div>
            <br>
            _______________________________________________<br>
            LLVM Developers mailing list<br>
            <a moz-do-not-send=3D"true" href=3D"mailto:LLVMdev@cs.uiuc.ed=
u">LLVMdev@cs.uiuc.edu</a>=A0
            =A0 =A0 =A0 =A0<a moz-do-not-send=3D"true"
              href=3D"http://llvm.cs.uiuc.edu" target=3D"_blank">http://l=
lvm.cs.uiuc.edu</a><br>
            <a moz-do-not-send=3D"true"
              href=3D"http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev"
              target=3D"_blank">http://lists.cs.uiuc.edu/mailman/listinfo=
/llvmdev</a><br>
            <br>
          </blockquote>
        </div>
        <br>
      </div>
      <br>
      <fieldset class=3D"mimeAttachmentHeader"></fieldset>
      <br>
      <pre wrap=3D"">_______________________________________________
LLVM Developers mailing list
<a class=3D"moz-txt-link-abbreviated" href=3D"mailto:LLVMdev@cs.uiuc.edu"=
>LLVMdev@cs.uiuc.edu</a>         <a class=3D"moz-txt-link-freetext" href=3D=
"http://llvm.cs.uiuc.edu">http://llvm.cs.uiuc.edu</a>
<a class=3D"moz-txt-link-freetext" href=3D"http://lists.cs.uiuc.edu/mailm=
an/listinfo/llvmdev">http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev</a=
>
</pre>
    </blockquote>
    <br>
  </body>
</html>

--------------060507020707000209010403--

--===============4280470979985130526==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

_______________________________________________
LLVM Developers mailing list
LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev

--===============4280470979985130526==--

From llvmdev-bounces@cs.uiuc.edu Wed Jan 28 22:27:14 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.6 required=5.0 tests=AWL,HK_RANDOM_ENVFROM,
	HTML_MESSAGE autolearn=no version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id 926D16501A3;
	Wed, 28 Jan 2015 22:27:14 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Wed, 28 Jan 2015 22:27:14 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0T5P1Wc014478;
	Wed, 28 Jan 2015 23:25:02 -0600
Received: from engr-mail-prod.engr.illinois.edu
	(engr-mail-prod.engr.illinois.edu [192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0T5P0Sd014471
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Wed, 28 Jan 2015 23:25:00 -0600
Received: from pps01.cites.illinois.edu ([192.17.82.69])
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <listmail@philipreames.com>)
	id 1YGhbA-0002Ib-FS
	for llvmdev@cs.uiuc.edu; Wed, 28 Jan 2015 23:25:00 -0600
Received: from mout.perfora.net (mout.perfora.net [74.208.4.196])
	by pps01.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0T5OpPo009818
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Wed, 28 Jan 2015 23:24:51 -0600
Received: from [192.168.200.212] (c-50-184-78-248.hsd1.ca.comcast.net
	[50.184.78.248])
	by mrelay.perfora.net (node=mreueus003) with ESMTP (Nemesis)
	id 0LyTxo-1XebAz0C3C-015pZl; Thu, 29 Jan 2015 06:24:49 +0100
Message-ID: <54C9C41A.2060207@philipreames.com>
Date: Wed, 28 Jan 2015 21:24:42 -0800
From: Philip Reames <listmail@philipreames.com>
User-Agent: Mozilla/5.0 (X11; Linux x86_64;
	rv:31.0) Gecko/20100101 Thunderbird/31.4.0
MIME-Version: 1.0
To: Sean Silva <chisophugis@gmail.com>,
        David Majnemer <david.majnemer@gmail.com>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>	<CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmail.com>
	<54C9BCB8.8040904@philipreames.com>
In-Reply-To: <54C9BCB8.8040904@philipreames.com>
X-Provags-ID: V02:K0:ZG51lARi8F/8YanthC6RhUQrDpd5Cg8coLWe029yPtK
	fS12DyxQwpsetptQfXm/LFQof7IVc5Og1M6U9ujwPZtdOadPHw
	0am0PCs3gd9/B7ZDRTSoYaWBUxZyOUehEt6P3pB/ZBQkkgd7Mf
	a3lZpKqNsTr/DznMaONMROVh3iWIPg0Ghu0/PA2rElJUIJOdkR
	BjvgKfiILy21drB7RMZXw7ZWzK+yBpuq4UpfmR/hPpTVkFhEhD
	yz/S8NFO/041GQ64h4aHUBWtvplAMp2klOV//JVXT9210gro3H
	l2jddgQSwm0crqiRbQCSqNNlKEV3SocZ10f6EpMaztZlWI78KZ
	MOBdcNMrCGD5A/WOa3VMPfOSopoQ2eqm61jStZyzi
X-UI-Out-Filterresults: notjunk:1;
Cc: Nuno Lopes <nuno.lopes@ist.utl.pt>, John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: multipart/mixed; boundary="===============4185526877861905567=="
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: O

This is a multi-part message in MIME format.
--===============4185526877861905567==
Content-Type: multipart/alternative;
 boundary="------------070409070909090306010607"

This is a multi-part message in MIME format.
--------------070409070909090306010607
Content-Type: text/plain; charset=windows-1252; format=flowed
Content-Transfer-Encoding: 7bit

I'm going to try to compare the proposed semantics of poison with 
undef.  This may be completely wrong, but I'm hoping the corrections 
will help clarify the semantics.

Begin attempt:

poison is similar to undef in that the optimizer is free to assume any 
value for the poison bits in an *input* to an instruction. Where it 
differs is that bits in the *output* which are not "entirely controlled 
by a non-poison input bit" are *also* poison.

This is different from undef in that there may be bits in the output 
whose values would be known for *any* specific value chosen for the 
poison input.  For undef, these bits would not be undef and would 
instead be known.  For poison, these bits are unconditionally poison.

(I'm having a hard time finding an example for this part; this implies 
it probably isn't true.)

Similarly, the choice of domain of input choices may restrict the output 
of an instruction when supplied undef.  Such restrictions do not apply 
when the input is poison.

The simplest example of this difference might be:
%2 = sext i1 %1 to i32

If %1 is undef, the %2 can take only two values: all zeros, or all ones.

If %1 is poison, all bits of %2 are poison.  %2 can thus take *any* 
value representable by an i32.

Note however that given a zext on the same input, 31 of the output bits 
would be defined in either case.  Only the last bit would be either 
undef or poison depending.  Note that the distinction between the two is 
important here in that it may influence propagation in later instructions.


To phrase these two differently, undef must take a specific value (or 
set of values) on input to an instruction.  The only legal outputs are 
those which can result from all such values.  Poison does not need to 
take a specific value and propagates to any output bit which is 
influenced by the value of a poison input.

------

Ok, how wrong was I?

Philip







On 01/28/2015 08:53 PM, Philip Reames wrote:
> On 01/28/2015 07:02 AM, Sean Silva wrote:
>> Could you maybe provide an example where replacing `%always_poison` 
>> with `undef` will change the meaning? At least for me, the thing that 
>> I'm most unclear about is how poison differs from undef.
> I will second this request for much the same reason.
>>
>> -- Sean Silva
>>
>> On Wed, Jan 28, 2015 at 2:50 AM, David Majnemer 
>> <david.majnemer@gmail.com <mailto:david.majnemer@gmail.com>> wrote:
>>
>>     Hello,
>>
>>     What follows is my attempt to describe how poison works.  Let me
>>     know what you think.
>>
>>     -- 
>>     David
>>
>>
>>     # LLVM Poison Semantics
>>
>>     Poison is an LLVM concept which exists solely to enable further
>>     optimization of LLVM IR. The exact behavior of poison has been,
>>     to say the least, confusing for users, researchers and engineers
>>     working with LLVM.
>>
>>     This document hopes to clear up some of the confusion of poison
>>     and hopefully explain *why* it has its semantics.
>>
>>     ## A Quick Introduction to Poison
>>
>>     Let's start with a concrete motivating example in C:
>>     ```
>>     int isSumGreater(int a, int b) {
>>       return a + b > a;
>>     }
>>     ```
>>
>>     The C specification permits us to optimize the comparison in
>>     `isSumGreater` to `b > 0` because signed overflow results in
>>     undefined behavior.  A reasonable translation of `isSumGreater`
>>     to LLVM IR could be:
>>
>>     ```
>>     define i32 @isSumGreater(i32 %a, i32 %b) {
>>     entry:
>>       %add = add i32 %a, %b
>>       %cmp = icmp sgt i32 %add, %a
>>       %conv = zext i1 %cmp to i32
>>       ret i32 %conv
>>     }
>>     ```
>>
>>     However, LLVM cannot determine that `%cmp` should not consider
>>     cases where `%add` resulted in signed overflow.  We need a way to
>>     communicate this information to LLVM.
>>
>>     This is where the `nsw` and `nuw` flags come into play.  `nsw` is
>>     short for "no signed wrap", `nuw` is short for "no unsigned wrap".
>>
>>     With these, we can come up with a new formulation of `%add`: `add
>>     i32 nsw %a, %b`.
>>     LLVM can take this into account when it is optimizing the `%cmp`
>>     and replace it with: `icmp sgt i32 %b, 0`.
>>
>>     ## Differences Between LLVM and C/C++
>>
>>     There are some interesting differences between what C++ and C
>>     specify and how LLVM behaves with respect to performing an
>>     operationg which is not permitted to overflow.
>>
>>     Perhaps chief among them is that evaluating an expression in C++
>>     or C which results performs an overflow is undefined behavior. In
>>     LLVM, executing an instruction which is marked `nsw` but which
>>     violates signed overflow results in poison. Values which have no
>>     relationship with poisoned values are not effected by them.
>>
>>     Let us take the following C program into consideration:
>>     ```
>>     int calculateImportantResult(int a, int b) {
>>       int result = 0;
>>       if (a) {
>>         result = a + b;
>>       }
>>       return result;
>>     }
>>     ```
>>
>>     A straightforward lowering to LLVM IR could be:
>>     ```
>>     define i32 @calculateImportantResult(i32 %a, i32 %b) {
>>     entry:
>>       %tobool = icmp ne i32 %a, 0
>>       br i1 %tobool, label %if.then, label %if.end
>>
>>     if.then:
>>       %add = add nsw i32 %a, %b
>>       br label %if.end
>>
>>     if.end:
>>       %result = phi i32 [ %add, %if.then ], [ 0, %entry ]
>>       ret i32 %result
>>     }
>>     ```
>>
>>     Moving `%add` to the `%entry` block would be preferable and would
>>     allow further optimizations:
>>     ```
>>     define i32 @calculateImportantResult(i32 %a, i32 %b) {
>>     entry:
>>       %tobool = icmp ne i32 %a, 0
>>       %add = add nsw i32 %a, %b
>>       %result = select i1 %tobool, i32 0, i32 %add
>>       ret i32 %result
>>     }
>>     ```
>>
>>     In the original code, the calculation of `%add` was control
>>     dependent.
>>     Now, `%add` might result in signed overflow in violation of the
>>     `nsw` flag.
>>     Despite this, the program should behave as it did before because
>>     the poisoned value is masked-out by the select. The next section
>>     will dive into this in greater detail.
>>
>>     # Computation Involving Poison Values
>>     Poison in a computation results in poison if the result cannot be
>>     constrained by its non-poison operands.
>>
>>     Examples of this rule which will result in poison:
>>     ```
>>       %add = add i32 %x, %always_poison
>>       %sub = sub i32 %x, %always_poison
>>       %xor = xor i32 %x, %always_poison
>>       %mul = mul i32 %always_poison, 1
>>     ```
>>
>>     Examples of this rule which do not result in poison:
>>     ```
>>       %or  = or  i32 %always_poison, 2
>>       %and = and i32 %always_poison, 2
>>       %mul = mul i32 %always_poison, 0
>>     ```
>>
>>     In fact, it would be reasonable to optimize `%or` to `2` and
>>     `%and` to `0`.  In this respect, poison is not different from
>>     `undef`.
>>
>>     The following example is only poison if `%cond` is false:
>>     ```
>>       %sel = select i1 %cond, i32 2, %always_poison
>>     ```
>>
>>     ### Is it safe to have poison as a `call` argument?
>>
>>     A `call` instruction may or may not result in poison depending on
>>     exactly how the callee  uses the supplied arguments, it is not
>>     necessarily the case that `call i32 @someFunction(i32
>>     %always_poison)` results in poison.
>>
>>     LLVM cannot forbid poison from entering `call` arguments without
>>     prohibiting an optimization pass from outlining code.
>>
>>     ### Is it safe to store poison to memory?
>>
>>     `store i32 %always_poison, i32* %mem` does not result in
>>     undefined behavior. A subsequent load instruction like `%load =
>>     load i32* %mem` will result in `%load` being a poison value.
>>
>>     ### Is it safe to load or store a poison memory location?
>>
>>     No.  Poison works just like `undef` in this respect.
>>
>>     ### Does comparing a poison value result in poison?
>>
>>     It depends.  If the comparison couldn't solely be determined by
>>     looking at the other operand, the result is poison.
>>
>>     For example, `icmp i32 ule %always_poison, 4294967295` is `true`,
>>     not poison.
>>     However, `icmp i32 ne %always_poison, 7` is poison.
>>
>>     ### What if the condition operand in a `select` is poison?
>>
>>     In the example `%sel = select i1 %always_poison, i1 true, false`,
>>     `%sel` is either `true` or `false`.  Because, `%sel` depends on
>>     `%always_poison` it too is poison.
>>
>>     _______________________________________________
>>     LLVM Developers mailing list
>>     LLVMdev@cs.uiuc.edu <mailto:LLVMdev@cs.uiuc.edu>
>>     http://llvm.cs.uiuc.edu
>>     http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev
>>
>>
>>
>>
>> _______________________________________________
>> LLVM Developers mailing list
>> LLVMdev@cs.uiuc.edu          http://llvm.cs.uiuc.edu
>> http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev
>
>
>
> _______________________________________________
> LLVM Developers mailing list
> LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
> http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev


--------------070409070909090306010607
Content-Type: text/html; charset=windows-1252
Content-Transfer-Encoding: quoted-printable
X-MIME-Autoconverted: from 8bit to quoted-printable by pps01.cites.illinois.edu id t0T5OpPo009818

<html>
  <head>
    <meta content=3D"text/html; charset=3Dwindows-1252"
      http-equiv=3D"Content-Type">
  </head>
  <body bgcolor=3D"#FFFFFF" text=3D"#000000">
    <div class=3D"moz-cite-prefix">I'm going to try to compare the
      proposed semantics of poison with undef.=A0 This may be completely
      wrong, but I'm hoping the corrections will help clarify the
      semantics.<br>
      <br>
      Begin attempt:<br>
      <br>
      poison is similar to undef in that the optimizer is free to assume
      any value for the poison bits in an *input* to an instruction.=A0
      Where it differs is that bits in the *output* which are not
      "entirely controlled by a non-poison input bit" are *also*
      poison.=A0 <br>
      <br>
      This is different from undef in that there may be bits in the
      output whose values would be known for *any* specific value chosen
      for the poison input.=A0 For undef, these bits would not be undef
      and would instead be known.=A0 For poison, these bits are
      unconditionally poison.=A0 <br>
      <br>
      (I'm having a hard time finding an example for this part; this
      implies it probably isn't true.)<br>
      <br>
      Similarly, the choice of domain of input choices may restrict the
      output of an instruction when supplied undef.=A0 Such restrictions
      do not apply when the input is poison.=A0 <br>
      <br>
      The simplest example of this difference might be:<br>
      %2 =3D sext i1 %1 to i32<br>
      <br>
      If %1 is undef, the %2 can take only two values: all zeros, or all
      ones.<br>
      <br>
      If %1 is poison, all bits of %2 are poison.=A0 %2 can thus take
      *any* value representable by an i32.<br>
      <br>
      Note however that given a zext on the same input, 31 of the output
      bits would be defined in either case.=A0 Only the last bit would be
      either undef or poison depending.=A0 Note that the distinction
      between the two is important here in that it may influence
      propagation in later instructions.=A0 <br>
      <br>
      <br>
      To phrase these two differently, undef must take a specific value
      (or set of values) on input to an instruction.=A0 The only legal
      outputs are those which can result from all such values.=A0 Poison
      does not need to take a specific value and propagates to any
      output bit which is influenced by the value of a poison input.=A0 <=
br>
      <br>
      ------<br>
      <br>
      Ok, how wrong was I?<br>
      <br>
      Philip<br>
      <br>
      <br>
      <br>
      <br>
      <br>
      <br>
      <br>
      On 01/28/2015 08:53 PM, Philip Reames wrote:<br>
    </div>
    <blockquote cite=3D"mid:54C9BCB8.8040904@philipreames.com" type=3D"ci=
te">
      <meta content=3D"text/html; charset=3Dwindows-1252"
        http-equiv=3D"Content-Type">
      <div class=3D"moz-cite-prefix">On 01/28/2015 07:02 AM, Sean Silva
        wrote:<br>
      </div>
      <blockquote
cite=3D"mid:CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmai=
l.com"
        type=3D"cite">
        <div dir=3D"ltr">Could you maybe provide an example where
          replacing `%always_poison` with `undef` will change the
          meaning? At least for me, the thing that I'm most unclear
          about is how poison differs from undef.</div>
      </blockquote>
      I will second this request for much the same reason.<br>
      <blockquote
cite=3D"mid:CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmai=
l.com"
        type=3D"cite">
        <div dir=3D"ltr">
          <div><br>
          </div>
          <div>-- Sean Silva</div>
        </div>
        <div class=3D"gmail_extra"><br>
          <div class=3D"gmail_quote">On Wed, Jan 28, 2015 at 2:50 AM,
            David Majnemer <span dir=3D"ltr">&lt;<a
                moz-do-not-send=3D"true"
                href=3D"mailto:david.majnemer@gmail.com" target=3D"_blank=
">david.majnemer@gmail.com</a>&gt;</span>
            wrote:<br>
            <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0
              .8ex;border-left:1px #ccc solid;padding-left:1ex">
              <div dir=3D"ltr">Hello,
                <div><br>
                </div>
                <div>What follows is my attempt to describe how poison
                  works.=A0 Let me know what you think.</div>
                <div><br>
                </div>
                <div>--=A0</div>
                <div>David</div>
                <div><br>
                </div>
                <div><br>
                </div>
                <div>
                  <div># LLVM Poison Semantics</div>
                  <div><br>
                  </div>
                  <div>Poison is an LLVM concept which exists solely to
                    enable further optimization of LLVM IR. The exact
                    behavior of poison has been, to say the least,
                    confusing for users, researchers and engineers
                    working with LLVM.</div>
                  <div><br>
                  </div>
                  <div>This document hopes to clear up some of the
                    confusion of poison and hopefully explain *why* it
                    has its semantics.</div>
                  <div><br>
                  </div>
                  <div>## A Quick Introduction to Poison</div>
                  <div><br>
                  </div>
                  <div>Let's start with a concrete motivating example in
                    C:</div>
                  <div>```</div>
                  <div>int isSumGreater(int a, int b) {</div>
                  <div>=A0 return a + b &gt; a;</div>
                  <div>}</div>
                  <div>```</div>
                  <div><br>
                  </div>
                  <div>The C specification permits us to optimize the
                    comparison in `isSumGreater` to `b &gt; 0` because
                    signed overflow results in undefined behavior.=A0 A
                    reasonable translation of `isSumGreater` to LLVM IR
                    could be:</div>
                  <div><br>
                  </div>
                  <div>```</div>
                  <div>define i32 @isSumGreater(i32 %a, i32 %b) {</div>
                  <div>entry:</div>
                  <div>=A0 %add =3D add i32 %a, %b</div>
                  <div>=A0 %cmp =3D icmp sgt i32 %add, %a</div>
                  <div>=A0 %conv =3D zext i1 %cmp to i32</div>
                  <div>=A0 ret i32 %conv</div>
                  <div>}</div>
                  <div>```</div>
                  <div><br>
                  </div>
                  <div>However, LLVM cannot determine that `%cmp` should
                    not consider cases where `%add` resulted in signed
                    overflow.=A0 We need a way to communicate this
                    information to LLVM.</div>
                  <div><br>
                  </div>
                  <div>This is where the `nsw` and `nuw` flags come into
                    play. =A0`nsw` is short for "no signed wrap", `nuw` i=
s
                    short for "no unsigned wrap".</div>
                  <div><br>
                  </div>
                  <div>With these, we can come up with a new formulation
                    of `%add`: `add i32 nsw %a, %b`.</div>
                  <div>LLVM can take this into account when it is
                    optimizing the `%cmp` and replace it with: `icmp sgt
                    i32 %b, 0`.</div>
                  <div><br>
                  </div>
                  <div>## Differences Between LLVM and C/C++</div>
                  <div><br>
                  </div>
                  <div>There are some interesting differences between
                    what C++ and C specify and how LLVM behaves with
                    respect to performing an operationg which is not
                    permitted to overflow. =A0</div>
                  <div><br>
                  </div>
                  <div>Perhaps chief among them is that evaluating an
                    expression in C++ or C which results performs an
                    overflow is undefined behavior. In LLVM, executing
                    an instruction which is marked `nsw` but which
                    violates signed overflow results in poison. Values
                    which have no relationship with poisoned values are
                    not effected by them.</div>
                  <div><br>
                  </div>
                  <div>Let us take the following C program into
                    consideration:</div>
                  <div>```</div>
                  <div>int calculateImportantResult(int a, int b) {</div>
                  <div>=A0 int result =3D 0;</div>
                  <div>=A0 if (a) {</div>
                  <div>=A0 =A0 result =3D a + b;</div>
                  <div>=A0 }</div>
                  <div>=A0 return result;</div>
                  <div>}</div>
                  <div>```</div>
                  <div><br>
                  </div>
                  <div>A straightforward lowering to LLVM IR could be:</d=
iv>
                  <div>```</div>
                  <div>define i32 @calculateImportantResult(i32 %a, i32
                    %b) {</div>
                  <div>entry:</div>
                  <div>=A0 %tobool =3D icmp ne i32 %a, 0</div>
                  <div>=A0 br i1 %tobool, label %if.then, label %if.end</=
div>
                  <div><br>
                  </div>
                  <div>if.then:</div>
                  <div>=A0 %add =3D add nsw i32 %a, %b</div>
                  <div>=A0 br label %if.end</div>
                  <div><br>
                  </div>
                  <div>if.end:</div>
                  <div>=A0 %result =3D phi i32 [ %add, %if.then ], [ 0,
                    %entry ]</div>
                  <div>=A0 ret i32 %result</div>
                  <div>}</div>
                  <div>```</div>
                  <div><br>
                  </div>
                  <div>Moving `%add` to the `%entry` block would be
                    preferable and would allow further optimizations:</di=
v>
                  <div>```</div>
                  <div>define i32 @calculateImportantResult(i32 %a, i32
                    %b) {</div>
                  <div>entry:</div>
                  <div>=A0 %tobool =3D icmp ne i32 %a, 0</div>
                  <div>=A0 %add =3D add nsw i32 %a, %b</div>
                  <div>=A0 %result =3D select i1 %tobool, i32 0, i32 %add=
</div>
                  <div>=A0 ret i32 %result</div>
                  <div>}</div>
                  <div>```</div>
                  <div><br>
                  </div>
                  <div>In the original code, the calculation of `%add`
                    was control dependent.</div>
                  <div>Now, `%add` might result in signed overflow in
                    violation of the `nsw` flag.</div>
                  <div>Despite this, the program should behave as it did
                    before because the poisoned value is masked-out by
                    the select. The next section will dive into this in
                    greater detail.</div>
                  <div><br>
                  </div>
                  <div># Computation Involving Poison Values</div>
                  <div>Poison in a computation results in poison if the
                    result cannot be constrained by its non-poison
                    operands.</div>
                  <div><br>
                  </div>
                  <div>Examples of this rule which will result in
                    poison:</div>
                  <div>```</div>
                  <div>=A0 %add =3D add i32 %x, %always_poison</div>
                  <div>=A0 %sub =3D sub i32 %x, %always_poison</div>
                  <div>=A0 %xor =3D xor i32 %x, %always_poison</div>
                  <div>=A0 %mul =3D mul i32 %always_poison, 1</div>
                  <div>```</div>
                  <div><br>
                  </div>
                  <div>Examples of this rule which do not result in
                    poison:</div>
                  <div>```</div>
                  <div>=A0 %or =A0=3D or =A0i32 %always_poison, 2</div>
                  <div>=A0 %and =3D and i32 %always_poison, 2</div>
                  <div>=A0 %mul =3D mul i32 %always_poison, 0</div>
                  <div>```</div>
                  <div><br>
                  </div>
                  <div>In fact, it would be reasonable to optimize `%or`
                    to `2` and `%and` to `0`.=A0 In this respect, poison
                    is not different from `undef`.</div>
                  <div><br>
                  </div>
                  <div>The following example is only poison if `%cond`
                    is false:</div>
                  <div>```</div>
                  <div>=A0 %sel =3D select i1 %cond, i32 2, %always_poiso=
n</div>
                  <div>```</div>
                  <div><br>
                  </div>
                  <div>### Is it safe to have poison as a `call`
                    argument?</div>
                  <div><br>
                  </div>
                  <div>A `call` instruction may or may not result in
                    poison depending on exactly how the callee =A0uses th=
e
                    supplied arguments, it is not necessarily the case
                    that `call i32 @someFunction(i32 %always_poison)`
                    results in poison.</div>
                  <div><br>
                  </div>
                  <div>LLVM cannot forbid poison from entering `call`
                    arguments without prohibiting an optimization pass
                    from outlining code.</div>
                  <div><br>
                  </div>
                  <div>### Is it safe to store poison to memory?</div>
                  <div><br>
                  </div>
                  <div>`store i32 %always_poison, i32* %mem` does not
                    result in undefined behavior. A subsequent load
                    instruction like `%load =3D load i32* %mem` will
                    result in `%load` being a poison value.</div>
                  <div><br>
                  </div>
                  <div>### Is it safe to load or store a poison memory
                    location?</div>
                  <div><br>
                  </div>
                  <div>No.=A0 Poison works just like `undef` in this
                    respect.</div>
                  <div><br>
                  </div>
                  <div>### Does comparing a poison value result in
                    poison?</div>
                  <div><br>
                  </div>
                  <div>It depends.=A0 If the comparison couldn't solely b=
e
                    determined by looking at the other operand, the
                    result is poison.</div>
                  <div><br>
                  </div>
                  <div>For example, `icmp i32 ule %always_poison,
                    4294967295` is `true`, not poison.</div>
                  <div>However, `icmp i32 ne %always_poison, 7` is
                    poison.</div>
                  <div><br>
                  </div>
                  <div>### What if the condition operand in a `select`
                    is poison?</div>
                  <div><br>
                  </div>
                  <div>In the example `%sel =3D select i1 %always_poison,
                    i1 true, false`, `%sel` is either `true` or
                    `false`.=A0 Because, `%sel` depends on
                    `%always_poison` it too is poison.</div>
                </div>
              </div>
              <br>
              _______________________________________________<br>
              LLVM Developers mailing list<br>
              <a moz-do-not-send=3D"true"
                href=3D"mailto:LLVMdev@cs.uiuc.edu">LLVMdev@cs.uiuc.edu</=
a>=A0
              =A0 =A0 =A0 =A0<a moz-do-not-send=3D"true"
                href=3D"http://llvm.cs.uiuc.edu" target=3D"_blank">http:/=
/llvm.cs.uiuc.edu</a><br>
              <a moz-do-not-send=3D"true"
                href=3D"http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev=
"
                target=3D"_blank">http://lists.cs.uiuc.edu/mailman/listin=
fo/llvmdev</a><br>
              <br>
            </blockquote>
          </div>
          <br>
        </div>
        <br>
        <fieldset class=3D"mimeAttachmentHeader"></fieldset>
        <br>
        <pre wrap=3D"">_______________________________________________
LLVM Developers mailing list
<a moz-do-not-send=3D"true" class=3D"moz-txt-link-abbreviated" href=3D"ma=
ilto:LLVMdev@cs.uiuc.edu">LLVMdev@cs.uiuc.edu</a>         <a moz-do-not-s=
end=3D"true" class=3D"moz-txt-link-freetext" href=3D"http://llvm.cs.uiuc.=
edu">http://llvm.cs.uiuc.edu</a>
<a moz-do-not-send=3D"true" class=3D"moz-txt-link-freetext" href=3D"http:=
//lists.cs.uiuc.edu/mailman/listinfo/llvmdev">http://lists.cs.uiuc.edu/ma=
ilman/listinfo/llvmdev</a>
</pre>
      </blockquote>
      <br>
      <br>
      <fieldset class=3D"mimeAttachmentHeader"></fieldset>
      <br>
      <pre wrap=3D"">_______________________________________________
LLVM Developers mailing list
<a class=3D"moz-txt-link-abbreviated" href=3D"mailto:LLVMdev@cs.uiuc.edu"=
>LLVMdev@cs.uiuc.edu</a>         <a class=3D"moz-txt-link-freetext" href=3D=
"http://llvm.cs.uiuc.edu">http://llvm.cs.uiuc.edu</a>
<a class=3D"moz-txt-link-freetext" href=3D"http://lists.cs.uiuc.edu/mailm=
an/listinfo/llvmdev">http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev</a=
>
</pre>
    </blockquote>
    <br>
  </body>
</html>

--------------070409070909090306010607--

--===============4185526877861905567==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

_______________________________________________
LLVM Developers mailing list
LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev

--===============4185526877861905567==--

From llvmdev-bounces@cs.uiuc.edu Wed Jan 28 22:35:24 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.6 required=5.0 tests=HK_RANDOM_ENVFROM,HTML_MESSAGE
	autolearn=no version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id 956856501AE;
	Wed, 28 Jan 2015 22:35:24 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Wed, 28 Jan 2015 22:35:24 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0T5XEeu014748;
	Wed, 28 Jan 2015 23:33:14 -0600
Received: from engr-mail-prod.engr.illinois.edu
	(engr-mail-prod.engr.illinois.edu [192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0T5XD26014744
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Wed, 28 Jan 2015 23:33:13 -0600
Received: from pps06.cites.illinois.edu ([192.17.82.102])
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <sanjoy@playingwithpointers.com>)
	id 1YGhj7-00034A-BW
	for llvmdev@cs.uiuc.edu; Wed, 28 Jan 2015 23:33:13 -0600
Received: from mail-wi0-f174.google.com (mail-wi0-f174.google.com
	[209.85.212.174])
	by pps06.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0T5X6MX025842
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Wed, 28 Jan 2015 23:33:07 -0600
Received: by mail-wi0-f174.google.com with SMTP id n3so20544176wiv.1
	for <llvmdev@cs.uiuc.edu>; Wed, 28 Jan 2015 21:33:05 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:mime-version:in-reply-to:references:date
	:message-id:subject:from:to:cc:content-type;
	bh=KGzf4h6obaCVfPDwv+9I76rh89HTlwOcphmL8Qotv4A=;
	b=EHYby/m/Rkr7LR9PIZOdyqvPkS38DJvRrEG2YmCzTIGX/IOB4Bjw/L7+V8jL8sJmhj
	Fn9ZUKmP3DwLXgBL97zt6+UoLuRcjv4hil2beCEaFKPsDa/Mo0zGCkydbGWyg7QXSelx
	LxPd5YZ5o4vAC+yLOnLp44LGc8gfEYYZV4PyDH2MzexXlJMxGL9PAmJLerUS9v9E5fGL
	bk2vamBehw6dmx6zdBlvfRRDc8v0gztSpinO3ARoXS6D19tumz88tyQoOZU6//ZYL9L6
	tmeq9QqzctMlnN+trZIvcd69g7abFHpGHEdU4QeZFMBofoXA2boONPFcUe3gTNwepgJ5
	86pA==
X-Gm-Message-State: ALoCoQn6z6/hULz9drDUIZ75jdrhawxY0yt3T09qRcfvzQZ0lAHJSoG9Bgz414Gh/IRhFri7sRp1
MIME-Version: 1.0
X-Received: by 10.194.94.227 with SMTP id df3mr1205945wjb.34.1422509585674;
	Wed, 28 Jan 2015 21:33:05 -0800 (PST)
Received: by 10.216.76.72 with HTTP; Wed, 28 Jan 2015 21:33:05 -0800 (PST)
X-Originating-IP: [208.54.4.175]
Received: by 10.216.76.72 with HTTP; Wed, 28 Jan 2015 21:33:05 -0800 (PST)
In-Reply-To: <54C9BCB8.8040904@philipreames.com>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>
	<CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmail.com>
	<54C9BCB8.8040904@philipreames.com>
Date: Wed, 28 Jan 2015 21:33:05 -0800
Message-ID: <CAMiUf7ec7sywLhOsDbF9YQGUXfYZqoXXmOC+pH8y9hkXKMY6-g@mail.gmail.com>
From: Sanjoy Das <sanjoy@playingwithpointers.com>
To: Philip Reames <listmail@philipreames.com>
Cc: Nuno Lopes <nuno.lopes@ist.utl.pt>, John Regehr <regehr@cs.utah.edu>,
        LLVM Developers Mailing List <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: multipart/mixed; boundary="===============8648861951505925605=="
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: O

--===============8648861951505925605==
Content-Type: multipart/alternative; boundary=047d7bdcad9e8b778e050dc3d20c

--047d7bdcad9e8b778e050dc3d20c
Content-Type: text/plain; charset=UTF-8

If we follow the RFC, the following program has UB if X is poison but is
well defined if X is undef:

%loc = select i1 X, %global0, %global1
store 42 to %loc

(Assuming both global0 and global1 can be legally stored to and are
different locations.)

-- Sanjoy

Sent from a mobile device, please excuse typos.
On Jan 28, 2015 9:02 PM, "Philip Reames" <listmail@philipreames.com> wrote:

>  On 01/28/2015 07:02 AM, Sean Silva wrote:
>
> Could you maybe provide an example where replacing `%always_poison` with
> `undef` will change the meaning? At least for me, the thing that I'm most
> unclear about is how poison differs from undef.
>
> I will second this request for much the same reason.
>
>
>  -- Sean Silva
>
> On Wed, Jan 28, 2015 at 2:50 AM, David Majnemer <david.majnemer@gmail.com>
> wrote:
>
>> Hello,
>>
>>  What follows is my attempt to describe how poison works.  Let me know
>> what you think.
>>
>>  --
>> David
>>
>>
>>  # LLVM Poison Semantics
>>
>>  Poison is an LLVM concept which exists solely to enable further
>> optimization of LLVM IR. The exact behavior of poison has been, to say the
>> least, confusing for users, researchers and engineers working with LLVM.
>>
>>  This document hopes to clear up some of the confusion of poison and
>> hopefully explain *why* it has its semantics.
>>
>>  ## A Quick Introduction to Poison
>>
>>  Let's start with a concrete motivating example in C:
>> ```
>> int isSumGreater(int a, int b) {
>>   return a + b > a;
>> }
>> ```
>>
>>  The C specification permits us to optimize the comparison in
>> `isSumGreater` to `b > 0` because signed overflow results in undefined
>> behavior.  A reasonable translation of `isSumGreater` to LLVM IR could be:
>>
>>  ```
>> define i32 @isSumGreater(i32 %a, i32 %b) {
>> entry:
>>   %add = add i32 %a, %b
>>   %cmp = icmp sgt i32 %add, %a
>>   %conv = zext i1 %cmp to i32
>>   ret i32 %conv
>> }
>> ```
>>
>>  However, LLVM cannot determine that `%cmp` should not consider cases
>> where `%add` resulted in signed overflow.  We need a way to communicate
>> this information to LLVM.
>>
>>  This is where the `nsw` and `nuw` flags come into play.  `nsw` is short
>> for "no signed wrap", `nuw` is short for "no unsigned wrap".
>>
>>  With these, we can come up with a new formulation of `%add`: `add i32
>> nsw %a, %b`.
>> LLVM can take this into account when it is optimizing the `%cmp` and
>> replace it with: `icmp sgt i32 %b, 0`.
>>
>>  ## Differences Between LLVM and C/C++
>>
>>  There are some interesting differences between what C++ and C specify
>> and how LLVM behaves with respect to performing an operationg which is not
>> permitted to overflow.
>>
>>  Perhaps chief among them is that evaluating an expression in C++ or C
>> which results performs an overflow is undefined behavior. In LLVM,
>> executing an instruction which is marked `nsw` but which violates signed
>> overflow results in poison. Values which have no relationship with poisoned
>> values are not effected by them.
>>
>>  Let us take the following C program into consideration:
>> ```
>> int calculateImportantResult(int a, int b) {
>>   int result = 0;
>>   if (a) {
>>     result = a + b;
>>   }
>>   return result;
>> }
>> ```
>>
>>  A straightforward lowering to LLVM IR could be:
>> ```
>> define i32 @calculateImportantResult(i32 %a, i32 %b) {
>> entry:
>>   %tobool = icmp ne i32 %a, 0
>>   br i1 %tobool, label %if.then, label %if.end
>>
>>  if.then:
>>   %add = add nsw i32 %a, %b
>>   br label %if.end
>>
>>  if.end:
>>   %result = phi i32 [ %add, %if.then ], [ 0, %entry ]
>>   ret i32 %result
>> }
>> ```
>>
>>  Moving `%add` to the `%entry` block would be preferable and would allow
>> further optimizations:
>> ```
>> define i32 @calculateImportantResult(i32 %a, i32 %b) {
>> entry:
>>   %tobool = icmp ne i32 %a, 0
>>   %add = add nsw i32 %a, %b
>>   %result = select i1 %tobool, i32 0, i32 %add
>>   ret i32 %result
>> }
>> ```
>>
>>  In the original code, the calculation of `%add` was control dependent.
>> Now, `%add` might result in signed overflow in violation of the `nsw`
>> flag.
>> Despite this, the program should behave as it did before because the
>> poisoned value is masked-out by the select. The next section will dive into
>> this in greater detail.
>>
>>  # Computation Involving Poison Values
>> Poison in a computation results in poison if the result cannot be
>> constrained by its non-poison operands.
>>
>>  Examples of this rule which will result in poison:
>> ```
>>   %add = add i32 %x, %always_poison
>>   %sub = sub i32 %x, %always_poison
>>   %xor = xor i32 %x, %always_poison
>>   %mul = mul i32 %always_poison, 1
>> ```
>>
>>  Examples of this rule which do not result in poison:
>> ```
>>   %or  = or  i32 %always_poison, 2
>>   %and = and i32 %always_poison, 2
>>   %mul = mul i32 %always_poison, 0
>> ```
>>
>>  In fact, it would be reasonable to optimize `%or` to `2` and `%and` to
>> `0`.  In this respect, poison is not different from `undef`.
>>
>>  The following example is only poison if `%cond` is false:
>> ```
>>   %sel = select i1 %cond, i32 2, %always_poison
>> ```
>>
>>  ### Is it safe to have poison as a `call` argument?
>>
>>  A `call` instruction may or may not result in poison depending on
>> exactly how the callee  uses the supplied arguments, it is not necessarily
>> the case that `call i32 @someFunction(i32 %always_poison)` results in
>> poison.
>>
>>  LLVM cannot forbid poison from entering `call` arguments without
>> prohibiting an optimization pass from outlining code.
>>
>>  ### Is it safe to store poison to memory?
>>
>>  `store i32 %always_poison, i32* %mem` does not result in undefined
>> behavior. A subsequent load instruction like `%load = load i32* %mem` will
>> result in `%load` being a poison value.
>>
>>  ### Is it safe to load or store a poison memory location?
>>
>>  No.  Poison works just like `undef` in this respect.
>>
>>  ### Does comparing a poison value result in poison?
>>
>>  It depends.  If the comparison couldn't solely be determined by looking
>> at the other operand, the result is poison.
>>
>>  For example, `icmp i32 ule %always_poison, 4294967295` is `true`, not
>> poison.
>> However, `icmp i32 ne %always_poison, 7` is poison.
>>
>>  ### What if the condition operand in a `select` is poison?
>>
>>  In the example `%sel = select i1 %always_poison, i1 true, false`,
>> `%sel` is either `true` or `false`.  Because, `%sel` depends on
>> `%always_poison` it too is poison.
>>
>> _______________________________________________
>> LLVM Developers mailing list
>> LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
>> http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev
>>
>>
>
>
> _______________________________________________
> LLVM Developers mailing listLLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.eduhttp://lists.cs.uiuc.edu/mailman/listinfo/llvmdev
>
>
>
> _______________________________________________
> LLVM Developers mailing list
> LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
> http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev
>
>

--047d7bdcad9e8b778e050dc3d20c
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<p dir=3D"ltr">If we follow the RFC, the following program has UB if X is p=
oison but is well defined if X is undef:</p>
<p dir=3D"ltr">%loc =3D select i1 X, %global0, %global1<br>
store 42 to %loc</p>
<p dir=3D"ltr">(Assuming both global0 and global1 can be legally stored to =
and are different locations.)</p>
<p dir=3D"ltr">-- Sanjoy</p>
<p dir=3D"ltr">Sent from a mobile device, please excuse typos.</p>
<div class=3D"gmail_quote">On Jan 28, 2015 9:02 PM, &quot;Philip Reames&quo=
t; &lt;<a href=3D"mailto:listmail@philipreames.com">listmail@philipreames.c=
om</a>&gt; wrote:<br type=3D"attribution"><blockquote class=3D"gmail_quote"=
 style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 =20
   =20
 =20
  <div bgcolor=3D"#FFFFFF" text=3D"#000000">
    <div>On 01/28/2015 07:02 AM, Sean Silva
      wrote:<br>
    </div>
    <blockquote type=3D"cite">
      <div dir=3D"ltr">Could you maybe provide an example where replacing
        `%always_poison` with `undef` will change the meaning? At least
        for me, the thing that I&#39;m most unclear about is how poison
        differs from undef.</div>
    </blockquote>
    I will second this request for much the same reason.<br>
    <blockquote type=3D"cite">
      <div dir=3D"ltr">
        <div><br>
        </div>
        <div>-- Sean Silva</div>
      </div>
      <div class=3D"gmail_extra"><br>
        <div class=3D"gmail_quote">On Wed, Jan 28, 2015 at 2:50 AM, David
          Majnemer <span dir=3D"ltr">&lt;<a href=3D"mailto:david.majnemer@g=
mail.com" target=3D"_blank">david.majnemer@gmail.com</a>&gt;</span>
          wrote:<br>
          <blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;bord=
er-left:1px #ccc solid;padding-left:1ex">
            <div dir=3D"ltr">Hello,
              <div><br>
              </div>
              <div>What follows is my attempt to describe how poison
                works.=C2=A0 Let me know what you think.</div>
              <div><br>
              </div>
              <div>--=C2=A0</div>
              <div>David</div>
              <div><br>
              </div>
              <div><br>
              </div>
              <div>
                <div># LLVM Poison Semantics</div>
                <div><br>
                </div>
                <div>Poison is an LLVM concept which exists solely to
                  enable further optimization of LLVM IR. The exact
                  behavior of poison has been, to say the least,
                  confusing for users, researchers and engineers working
                  with LLVM.</div>
                <div><br>
                </div>
                <div>This document hopes to clear up some of the
                  confusion of poison and hopefully explain *why* it has
                  its semantics.</div>
                <div><br>
                </div>
                <div>## A Quick Introduction to Poison</div>
                <div><br>
                </div>
                <div>Let&#39;s start with a concrete motivating example in
                  C:</div>
                <div>```</div>
                <div>int isSumGreater(int a, int b) {</div>
                <div>=C2=A0 return a + b &gt; a;</div>
                <div>}</div>
                <div>```</div>
                <div><br>
                </div>
                <div>The C specification permits us to optimize the
                  comparison in `isSumGreater` to `b &gt; 0` because
                  signed overflow results in undefined behavior.=C2=A0 A
                  reasonable translation of `isSumGreater` to LLVM IR
                  could be:</div>
                <div><br>
                </div>
                <div>```</div>
                <div>define i32 @isSumGreater(i32 %a, i32 %b) {</div>
                <div>entry:</div>
                <div>=C2=A0 %add =3D add i32 %a, %b</div>
                <div>=C2=A0 %cmp =3D icmp sgt i32 %add, %a</div>
                <div>=C2=A0 %conv =3D zext i1 %cmp to i32</div>
                <div>=C2=A0 ret i32 %conv</div>
                <div>}</div>
                <div>```</div>
                <div><br>
                </div>
                <div>However, LLVM cannot determine that `%cmp` should
                  not consider cases where `%add` resulted in signed
                  overflow.=C2=A0 We need a way to communicate this
                  information to LLVM.</div>
                <div><br>
                </div>
                <div>This is where the `nsw` and `nuw` flags come into
                  play. =C2=A0`nsw` is short for &quot;no signed wrap&quot;=
, `nuw` is
                  short for &quot;no unsigned wrap&quot;.</div>
                <div><br>
                </div>
                <div>With these, we can come up with a new formulation
                  of `%add`: `add i32 nsw %a, %b`.</div>
                <div>LLVM can take this into account when it is
                  optimizing the `%cmp` and replace it with: `icmp sgt
                  i32 %b, 0`.</div>
                <div><br>
                </div>
                <div>## Differences Between LLVM and C/C++</div>
                <div><br>
                </div>
                <div>There are some interesting differences between what
                  C++ and C specify and how LLVM behaves with respect to
                  performing an operationg which is not permitted to
                  overflow. =C2=A0</div>
                <div><br>
                </div>
                <div>Perhaps chief among them is that evaluating an
                  expression in C++ or C which results performs an
                  overflow is undefined behavior. In LLVM, executing an
                  instruction which is marked `nsw` but which violates
                  signed overflow results in poison. Values which have
                  no relationship with poisoned values are not effected
                  by them.</div>
                <div><br>
                </div>
                <div>Let us take the following C program into
                  consideration:</div>
                <div>```</div>
                <div>int calculateImportantResult(int a, int b) {</div>
                <div>=C2=A0 int result =3D 0;</div>
                <div>=C2=A0 if (a) {</div>
                <div>=C2=A0 =C2=A0 result =3D a + b;</div>
                <div>=C2=A0 }</div>
                <div>=C2=A0 return result;</div>
                <div>}</div>
                <div>```</div>
                <div><br>
                </div>
                <div>A straightforward lowering to LLVM IR could be:</div>
                <div>```</div>
                <div>define i32 @calculateImportantResult(i32 %a, i32
                  %b) {</div>
                <div>entry:</div>
                <div>=C2=A0 %tobool =3D icmp ne i32 %a, 0</div>
                <div>=C2=A0 br i1 %tobool, label %if.then, label %if.end</d=
iv>
                <div><br>
                </div>
                <div>if.then:</div>
                <div>=C2=A0 %add =3D add nsw i32 %a, %b</div>
                <div>=C2=A0 br label %if.end</div>
                <div><br>
                </div>
                <div>if.end:</div>
                <div>=C2=A0 %result =3D phi i32 [ %add, %if.then ], [ 0, %e=
ntry
                  ]</div>
                <div>=C2=A0 ret i32 %result</div>
                <div>}</div>
                <div>```</div>
                <div><br>
                </div>
                <div>Moving `%add` to the `%entry` block would be
                  preferable and would allow further optimizations:</div>
                <div>```</div>
                <div>define i32 @calculateImportantResult(i32 %a, i32
                  %b) {</div>
                <div>entry:</div>
                <div>=C2=A0 %tobool =3D icmp ne i32 %a, 0</div>
                <div>=C2=A0 %add =3D add nsw i32 %a, %b</div>
                <div>=C2=A0 %result =3D select i1 %tobool, i32 0, i32 %add<=
/div>
                <div>=C2=A0 ret i32 %result</div>
                <div>}</div>
                <div>```</div>
                <div><br>
                </div>
                <div>In the original code, the calculation of `%add` was
                  control dependent.</div>
                <div>Now, `%add` might result in signed overflow in
                  violation of the `nsw` flag.</div>
                <div>Despite this, the program should behave as it did
                  before because the poisoned value is masked-out by the
                  select. The next section will dive into this in
                  greater detail.</div>
                <div><br>
                </div>
                <div># Computation Involving Poison Values</div>
                <div>Poison in a computation results in poison if the
                  result cannot be constrained by its non-poison
                  operands.</div>
                <div><br>
                </div>
                <div>Examples of this rule which will result in poison:</di=
v>
                <div>```</div>
                <div>=C2=A0 %add =3D add i32 %x, %always_poison</div>
                <div>=C2=A0 %sub =3D sub i32 %x, %always_poison</div>
                <div>=C2=A0 %xor =3D xor i32 %x, %always_poison</div>
                <div>=C2=A0 %mul =3D mul i32 %always_poison, 1</div>
                <div>```</div>
                <div><br>
                </div>
                <div>Examples of this rule which do not result in
                  poison:</div>
                <div>```</div>
                <div>=C2=A0 %or =C2=A0=3D or =C2=A0i32 %always_poison, 2</d=
iv>
                <div>=C2=A0 %and =3D and i32 %always_poison, 2</div>
                <div>=C2=A0 %mul =3D mul i32 %always_poison, 0</div>
                <div>```</div>
                <div><br>
                </div>
                <div>In fact, it would be reasonable to optimize `%or`
                  to `2` and `%and` to `0`.=C2=A0 In this respect, poison i=
s
                  not different from `undef`.</div>
                <div><br>
                </div>
                <div>The following example is only poison if `%cond` is
                  false:</div>
                <div>```</div>
                <div>=C2=A0 %sel =3D select i1 %cond, i32 2, %always_poison=
</div>
                <div>```</div>
                <div><br>
                </div>
                <div>### Is it safe to have poison as a `call` argument?</d=
iv>
                <div><br>
                </div>
                <div>A `call` instruction may or may not result in
                  poison depending on exactly how the callee =C2=A0uses the
                  supplied arguments, it is not necessarily the case
                  that `call i32 @someFunction(i32 %always_poison)`
                  results in poison.</div>
                <div><br>
                </div>
                <div>LLVM cannot forbid poison from entering `call`
                  arguments without prohibiting an optimization pass
                  from outlining code.</div>
                <div><br>
                </div>
                <div>### Is it safe to store poison to memory?</div>
                <div><br>
                </div>
                <div>`store i32 %always_poison, i32* %mem` does not
                  result in undefined behavior. A subsequent load
                  instruction like `%load =3D load i32* %mem` will result
                  in `%load` being a poison value.</div>
                <div><br>
                </div>
                <div>### Is it safe to load or store a poison memory
                  location?</div>
                <div><br>
                </div>
                <div>No.=C2=A0 Poison works just like `undef` in this
                  respect.</div>
                <div><br>
                </div>
                <div>### Does comparing a poison value result in poison?</d=
iv>
                <div><br>
                </div>
                <div>It depends.=C2=A0 If the comparison couldn&#39;t solel=
y be
                  determined by looking at the other operand, the result
                  is poison.</div>
                <div><br>
                </div>
                <div>For example, `icmp i32 ule %always_poison,
                  4294967295` is `true`, not poison.</div>
                <div>However, `icmp i32 ne %always_poison, 7` is poison.</d=
iv>
                <div><br>
                </div>
                <div>### What if the condition operand in a `select` is
                  poison?</div>
                <div><br>
                </div>
                <div>In the example `%sel =3D select i1 %always_poison, i1
                  true, false`, `%sel` is either `true` or `false`.=C2=A0
                  Because, `%sel` depends on `%always_poison` it too is
                  poison.</div>
              </div>
            </div>
            <br>
            _______________________________________________<br>
            LLVM Developers mailing list<br>
            <a href=3D"mailto:LLVMdev@cs.uiuc.edu" target=3D"_blank">LLVMde=
v@cs.uiuc.edu</a>=C2=A0
            =C2=A0 =C2=A0 =C2=A0 =C2=A0<a href=3D"http://llvm.cs.uiuc.edu" =
target=3D"_blank">http://llvm.cs.uiuc.edu</a><br>
            <a href=3D"http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev" t=
arget=3D"_blank">http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev</a><br>
            <br>
          </blockquote>
        </div>
        <br>
      </div>
      <br>
      <fieldset></fieldset>
      <br>
      <pre>_______________________________________________
LLVM Developers mailing list
<a href=3D"mailto:LLVMdev@cs.uiuc.edu" target=3D"_blank">LLVMdev@cs.uiuc.ed=
u</a>         <a href=3D"http://llvm.cs.uiuc.edu" target=3D"_blank">http://=
llvm.cs.uiuc.edu</a>
<a href=3D"http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev" target=3D"_bl=
ank">http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev</a>
</pre>
    </blockquote>
    <br>
  </div>

<br>_______________________________________________<br>
LLVM Developers mailing list<br>
<a href=3D"mailto:LLVMdev@cs.uiuc.edu">LLVMdev@cs.uiuc.edu</a>=C2=A0 =C2=A0=
 =C2=A0 =C2=A0 =C2=A0<a href=3D"http://llvm.cs.uiuc.edu" target=3D"_blank">=
http://llvm.cs.uiuc.edu</a><br>
<a href=3D"http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev" target=3D"_bl=
ank">http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev</a><br>
<br></blockquote></div>

--047d7bdcad9e8b778e050dc3d20c--

--===============8648861951505925605==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

_______________________________________________
LLVM Developers mailing list
LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev

--===============8648861951505925605==--

From llvmdev-bounces@cs.uiuc.edu Wed Jan 28 22:44:43 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.6 required=5.0 tests=AWL,HK_RANDOM_ENVFROM,
	HTML_MESSAGE autolearn=no version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id CA2C16501A4;
	Wed, 28 Jan 2015 22:44:43 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Wed, 28 Jan 2015 22:44:43 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0T5gfn5015098;
	Wed, 28 Jan 2015 23:42:41 -0600
Received: from engr-mail-prod.engr.illinois.edu ([192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0T5geTS015095
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Wed, 28 Jan 2015 23:42:40 -0600
Received: from [192.17.82.100] (helo=pps02.cites.illinois.edu)
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <listmail@philipreames.com>)
	id 1YGhsG-0003Kp-0X
	for llvmdev@cs.uiuc.edu; Wed, 28 Jan 2015 23:42:40 -0600
Received: from mout.perfora.net ([74.208.4.197])
	by pps02.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0T5gSDu030785
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Wed, 28 Jan 2015 23:42:29 -0600
Received: from [192.168.200.212] (c-50-184-78-248.hsd1.ca.comcast.net
	[50.184.78.248])
	by mrelay.perfora.net (node=mreueus002) with ESMTP (Nemesis)
	id 0MCrG1-1YPonx1CWx-009kSx; Thu, 29 Jan 2015 06:42:24 +0100
Message-ID: <54C9C839.8090301@philipreames.com>
Date: Wed, 28 Jan 2015 21:42:17 -0800
From: Philip Reames <listmail@philipreames.com>
User-Agent: Mozilla/5.0 (X11; Linux x86_64;
	rv:31.0) Gecko/20100101 Thunderbird/31.4.0
MIME-Version: 1.0
To: Sanjoy Das <sanjoy@playingwithpointers.com>,
        Chandler Carruth <chandlerc@google.com>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>	<CAMiUf7dGeE-DKi3JNog_EOrtaxfsOOVhaBRW5Ti_t41Xq3YkWg@mail.gmail.com>	<CAL7bZ_djhG=GB2AdWzjKUw4zsA=cm-AZKMugv1Z8SxbAp+qBSQ@mail.gmail.com>	<CAMiUf7dEaorbaW4oGeTz3yfF9qcvQYe=JFjW55MBEd2TGezy1g@mail.gmail.com>	<CAL7bZ_fqhr0f1aoqQaCczsgTvDZqxxCWvSobWcZKj5iHDDgBXg@mail.gmail.com>	<CAMiUf7ey9XAcnTibNObGiqkuX28N7sECDChNMtBZ9PTtCK33yg@mail.gmail.com>	<CAL7bZ_deFdNgEYUvwaaexLeAmaGVmYateNi8Ug5FQTAHqPVFVw@mail.gmail.com>	<CAMiUf7cUMhMPpSF-DXSGaX1pwXQ4R5x5j6wDAOO1qqeiyuW_qA@mail.gmail.com>	<CAGCO0KjkcM5hnOS_roK3c1xO3Lsb1zU2heazC6BEYFFwhbe0TQ@mail.gmail.com>
	<CAMiUf7cApBzoFtjfub5C8E46V1jCwBXjzPqh9XLVyYefX0pTQA@mail.gmail.com>
In-Reply-To: <CAMiUf7cApBzoFtjfub5C8E46V1jCwBXjzPqh9XLVyYefX0pTQA@mail.gmail.com>
X-Provags-ID: V02:K0:9wqGsxzDkf/VUm3HQJFcHfoJk8ozftmvMhKTM6lEmZ8
	NXUaXALiUvDo0HG+XuYmP+eVs8rOSsrhlwtzAWQao00UpZmfhO
	ulZ8uwu7mnMGQ6042TyP1rzoQpXgnEMuluoMif8+uiJNbVBXSG
	ZlTB5aLWKy8X5u8f28iIfzM+fBwzNNF1x+ccxSpdUNK7RAm1p8
	5zZK+o42V4iuTBJv4YE63OFejOmw29ae8BzoSHeYTRaCKtgomo
	N0CzumlV9Ha5NcXv8NHF5D/DtjKINrx2w3QQidCn6/QNgSl0gM
	qY4tEjb98wllhCUNh7NhaIgFddsgIqMcowusRyH0NjZ3IYRrKy
	bFjZIX3O/HEDHtwMNX4u/9ZICqU+KeN0FtM/zUV7L
X-UI-Out-Filterresults: notjunk:1;
Cc: Nuno Lopes <nuno.lopes@protection.opia.illinois.edu>,
        John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: multipart/mixed; boundary="===============4932281991648086296=="
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: O

This is a multi-part message in MIME format.
--===============4932281991648086296==
Content-Type: multipart/alternative;
 boundary="------------040306050109030909090909"

This is a multi-part message in MIME format.
--------------040306050109030909090909
Content-Type: text/plain; charset=windows-1252; format=flowed
Content-Transfer-Encoding: 7bit

On 01/27/2015 09:38 PM, Sanjoy Das wrote:
>> if the definition of NUW is that zext-ing the result is equivalent to
>> zext-ing the inputs and doing the operation at a higher bitwidth (my
>> understanding), then %m and %n cannot hold those values, that would violate
>> the NUW flag.
> The problem to solve is adequately defining "cannot hold".  In the
> strictest sense, you could say if %m = %n = 2^31 - 1 then the program
> has UB; in effect defining "cannot hold" in the same way a location
> you're loading from "cannot be" non-deferenceable.  But, as David points
> out, that would mean you cannot hoist arithmetic with the nuw/nsw tags
> intact:
>
>    if (foo)
>     %t = add nuw X Y
>
> since it could be that (X != 2^32-1 && Y != 2^32-1) only if foo ==
> true.  Arithmetic with no-wrap flags effectively are side-effecting
> operations in this scheme.
>
> The RFC tries to formalize a weaker notion of "cannot hold" that
> justifies treating arithmetic like arithmetic.  I'm trying to show
> that the notion of poison value in this RFC is too weak; and allows
> for certain programs to be well-defined (like the example I just
> showed) which change meaning in the face of transforms we'd like to be
> able to do.
I don't think your example is actually problematic.  The original 
program before your transformation *executed* undefined behavior in the 
form of '%x = add nuw i32 %m, %n' with "%m = %n = 2^32-1 (a.k.a 
INT_MAX)".  If I understand the c++ spec correctly, that implies that 
the meaning of this program is lost, even if the value of that 
instruction doesn't contribute to the output of the program.  We can 
produce any output for this program (or none, or wipe your hard drive) 
and it would be "correct".

To show a problem, you'd need to show a *well defined* program which 
becomes undefined through a series of transformations.  In your example, 
you might try the input program:

  br i1 %cnd, label %skip, label %exec
exec:
  %x1 = add nuw i32 %m, %n
  br label %skip
skip:
  %x  = phi (x1, 0)
  %y = zext i32 %x to i64
  %s = lshr i64 %y, 32
  %addr = gep %some_global, %s
  store i32 42, i32* %addr

But when the add is speculated, this becomes:

  %x1 = add nuw i32 %m, %n
  %x  = select i1 %cnd x1, 0
  %y = zext i32 %x to i64
  %s = lshr i64 %y, 32
  %addr = gep %some_global, %s
  store i32 42, i32* %addr

This is well defined as per the spec David sent out.  %x is not poison.  %x1 is, but that's fine.

Philip




--------------040306050109030909090909
Content-Type: text/html; charset=windows-1252
Content-Transfer-Encoding: quoted-printable
X-MIME-Autoconverted: from 8bit to quoted-printable by pps02.cites.illinois.edu id t0T5gSDu030785

<html>
  <head>
    <meta content=3D"text/html; charset=3Dwindows-1252"
      http-equiv=3D"Content-Type">
  </head>
  <body bgcolor=3D"#FFFFFF" text=3D"#000000">
    <div class=3D"moz-cite-prefix">On 01/27/2015 09:38 PM, Sanjoy Das
      wrote:<br>
    </div>
    <blockquote
cite=3D"mid:CAMiUf7cApBzoFtjfub5C8E46V1jCwBXjzPqh9XLVyYefX0pTQA@mail.gmai=
l.com"
      type=3D"cite">
      <blockquote type=3D"cite">
        <pre wrap=3D"">if the definition of NUW is that zext-ing the resu=
lt is equivalent to
zext-ing the inputs and doing the operation at a higher bitwidth (my
understanding), then %m and %n cannot hold those values, that would viola=
te
the NUW flag.
</pre>
      </blockquote>
      <pre wrap=3D"">
The problem to solve is adequately defining "cannot hold".  In the
strictest sense, you could say if %m =3D %n =3D 2^31 - 1 then the program
has UB; in effect defining "cannot hold" in the same way a location
you're loading from "cannot be" non-deferenceable.  But, as David points
out, that would mean you cannot hoist arithmetic with the nuw/nsw tags
intact:

  if (foo)
   %t =3D add nuw X Y

since it could be that (X !=3D 2^32-1 &amp;&amp; Y !=3D 2^32-1) only if f=
oo =3D=3D
true.  Arithmetic with no-wrap flags effectively are side-effecting
operations in this scheme.

The RFC tries to formalize a weaker notion of "cannot hold" that
justifies treating arithmetic like arithmetic.  I'm trying to show
that the notion of poison value in this RFC is too weak; and allows
for certain programs to be well-defined (like the example I just
showed) which change meaning in the face of transforms we'd like to be
able to do.
</pre>
    </blockquote>
    I don't think your example is actually problematic.=A0 The original
    program before your transformation *executed* undefined behavior in
    the form of '%x =3D add nuw i32 %m, %n' with "%m =3D %n =3D 2<sup
      class=3D"moz-txt-sup"><span
        style=3D"display:inline-block;width:0;height:0;overflow:hidden">^=
</span>32</sup>-1
    (a.k.a INT_MAX)".=A0 If I understand the c++ spec correctly, that
    implies that the meaning of this program is lost, even if the value
    of that instruction doesn't contribute to the output of the
    program.=A0 We can produce any output for this program (or none, or
    wipe your hard drive) and it would be "correct".=A0 <br>
    <br>
    To show a problem, you'd need to show a *well defined* program which
    becomes undefined through a series of transformations.=A0 In your
    example, you might try the input program:<br>
    <pre wrap=3D""> br i1 %cnd, label %skip, label %exec
exec:
 %x1 =3D add nuw i32 %m, %n
 br label %skip
skip:
 %x  =3D phi (x1, 0)
=A0%y =3D zext i32 %x to i64
 %s =3D lshr i64 %y, 32
 %addr =3D gep %some_global, %s
 store i32 42, i32* %addr

But when the add is speculated, this becomes:

 %x1 =3D add nuw i32 %m, %n
 %x  =3D select i1 %cnd x1, 0
=A0%y =3D zext i32 %x to i64
 %s =3D lshr i64 %y, 32
 %addr =3D gep %some_global, %s
 store i32 42, i32* %addr

This is well defined as per the spec David sent out.  %x is not poison.  =
%x1 is, but that's fine.=20

Philip

</pre>
    <br>
    <br>
  </body>
</html>

--------------040306050109030909090909--

--===============4932281991648086296==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

_______________________________________________
LLVM Developers mailing list
LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev

--===============4932281991648086296==--

From llvmdev-bounces@cs.uiuc.edu Wed Jan 28 23:02:01 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.7 required=5.0 tests=DKIM_SIGNED,HK_RANDOM_ENVFROM,
	HTML_MESSAGE,T_DKIM_INVALID autolearn=no version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id D51F56501AA;
	Wed, 28 Jan 2015 23:02:01 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Wed, 28 Jan 2015 23:02:01 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0T5xlFW015424;
	Wed, 28 Jan 2015 23:59:47 -0600
Received: from engr-mail-prod.engr.illinois.edu ([192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0T5xjag015421
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Wed, 28 Jan 2015 23:59:45 -0600
Received: from [192.17.82.70] (helo=pps03.cites.illinois.edu)
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <bruce.hoult@gmail.com>)
	id 1YGi8n-0004K1-2t
	for llvmdev@cs.uiuc.edu; Wed, 28 Jan 2015 23:59:45 -0600
Received: from mail-wi0-f173.google.com ([209.85.212.173])
	by pps03.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0T5xcAo023612
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Wed, 28 Jan 2015 23:59:39 -0600
Received: by mail-wi0-f173.google.com with SMTP id r20so20803256wiv.0
	for <llvmdev@cs.uiuc.edu>; Wed, 28 Jan 2015 21:59:38 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
	h=mime-version:sender:in-reply-to:references:date:message-id:subject
	:from:to:cc:content-type;
	bh=nFC+yuuZOoSqmFKkADyDPBG9t50QYgSnFWChnXYe25o=;
	b=TtyWftY6Zfs3CyYEz0VV/bfMPUbrBjIjcNNMyRYNfB7Mm548/GknOm8j3DD9Z9teLJ
	4N0D3g8wss4FC2G8jBg3yWdK3ohyoGDkdxdDgwCpHBrozIyxnpnkUEIOx61TyLA52x7i
	yiODtoYi5p4BkOelQT0hD90bA1S3T3eV+ILZZMuSa9arR7Fv4aTg5DYANje+/bSrpofZ
	7tdR5/PkTBpJaA+WQ6mbzWAetih8KgLcDkILC/1sA7aotfTywC0Zzx52jDD9hBi0hBeB
	WZfTdIhPAbvaxiNmT1mrW+o//i3uc6siGTbI642uoimgl4AJ0byYdvXSTcKD87AqpAbL
	bU+A==
MIME-Version: 1.0
X-Received: by 10.194.71.45 with SMTP id r13mr14568728wju.128.1422511178296;
	Wed, 28 Jan 2015 21:59:38 -0800 (PST)
Received: by 10.27.78.133 with HTTP; Wed, 28 Jan 2015 21:59:38 -0800 (PST)
In-Reply-To: <54C9C41A.2060207@philipreames.com>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>
	<CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmail.com>
	<54C9BCB8.8040904@philipreames.com>
	<54C9C41A.2060207@philipreames.com>
Date: Thu, 29 Jan 2015 18:59:38 +1300
X-Google-Sender-Auth: mfFkuZtmtUXsXSThiJaa8RBvf2A
Message-ID: <CAMU+Ekz4nCAX49LOpEXgeOvmwKhHgkaeNRMh54MoTT2aLnSjYA@mail.gmail.com>
From: Bruce Hoult <bruce@protection.opia.illinois.edu>
To: Philip Reames <listmail@philipreames.com>
Cc: Nuno Lopes <nuno.lopes@protection.opia.illinois.edu>,
        John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: multipart/mixed; boundary="===============5956364989669249245=="
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: O

--===============5956364989669249245==
Content-Type: multipart/alternative; boundary=047d7bfcebda78b0dc050dc431b1

--047d7bfcebda78b0dc050dc431b1
Content-Type: text/plain; charset=UTF-8

On Thu, Jan 29, 2015 at 6:24 PM, Philip Reames <listmail@philipreames.com>
wrote:

>  This is different from undef in that there may be bits in the output
> whose values would be known for *any* specific value chosen for the poison
> input.  For undef, these bits would not be undef and would instead be
> known.  For poison, these bits are unconditionally poison.
>
> (I'm having a hard time finding an example for this part; this implies it
> probably isn't true.)
>
>
undef xor undef == 0 but poison xor poison == poison ?

--047d7bfcebda78b0dc050dc431b1
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_extra"><div class=3D"gmail_quote">On T=
hu, Jan 29, 2015 at 6:24 PM, Philip Reames <span dir=3D"ltr">&lt;<a href=3D=
"mailto:listmail@philipreames.com" target=3D"_blank">listmail@philipreames.=
com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"mar=
gin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
 =20
   =20
 =20
  <div bgcolor=3D"#FFFFFF" text=3D"#000000">
    <div>This is different from undef in that there may be bits in the
      output whose values would be known for *any* specific value chosen
      for the poison input.=C2=A0 For undef, these bits would not be undef
      and would instead be known.=C2=A0 For poison, these bits are
      unconditionally poison.=C2=A0 <br>
      <br>
      (I&#39;m having a hard time finding an example for this part; this
      implies it probably isn&#39;t true.)<br><br></div></div></blockquote>=
<div><br></div><div>undef xor undef =3D=3D 0 but poison xor poison =3D=3D p=
oison ?</div><div>=C2=A0</div></div></div></div>

--047d7bfcebda78b0dc050dc431b1--

--===============5956364989669249245==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

_______________________________________________
LLVM Developers mailing list
LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev

--===============5956364989669249245==--

From llvmdev-bounces@cs.uiuc.edu Thu Jan 29 00:31:53 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.6 required=5.0 tests=HK_RANDOM_ENVFROM autolearn=no
	version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id CC8F56501AA;
	Thu, 29 Jan 2015 00:31:53 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Thu, 29 Jan 2015 00:31:53 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0T7TZQ0016807;
	Thu, 29 Jan 2015 01:29:35 -0600
Received: from engr-mail-prod.engr.illinois.edu
	(engr-mail-prod.engr.illinois.edu [192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0T7TX9O016804
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Thu, 29 Jan 2015 01:29:33 -0600
Received: from pps04.cites.illinois.edu ([192.17.82.101])
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <sanjoy@playingwithpointers.com>)
	id 1YGjXh-00061p-Qo
	for llvmdev@cs.uiuc.edu; Thu, 29 Jan 2015 01:29:33 -0600
Received: from mail-wi0-f176.google.com (mail-wi0-f176.google.com
	[209.85.212.176])
	by pps04.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0T7TQ4V015520
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Thu, 29 Jan 2015 01:29:27 -0600
Received: by mail-wi0-f176.google.com with SMTP id bs8so13421881wib.3
	for <llvmdev@cs.uiuc.edu>; Wed, 28 Jan 2015 23:29:25 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:mime-version:in-reply-to:references:from:date
	:message-id:subject:to:cc:content-type;
	bh=nChlMbTvPQtOnOVbgIrSM3gvJE/X4gD+J41Q8ZG34K0=;
	b=O8nRmEUgRvbS+9zuY9qFLj78K1YHhj2rQASkjxfJA9BWwgRkJ1BEzuHaRsKKrZxXNv
	C9+c0cJNDFpBNiZFoKGanqOQtpVoFW2iWPyqbYEV3iDG+pIFoj9pRyBxGS/Is1zWUMN6
	it5d2GN/uE5LVwNWoeLuVxDHqjcnP4jJAMWICnmOqMufBZ4TZ2WMN+IGO98S6SJFAyhl
	grOyRUMTIbz3qF08LzdoVOZj10fRaGIAxTphYHiRm+wuUy8hNOxD+HZLd2ScE5nNkFSL
	YT/I1/Y7631rM/xoC+eogmLVKSRHievwiVKAa8V120b1qf7oN8ZHcAzr3g9bGPiOm6ll
	Qatg==
X-Gm-Message-State: ALoCoQlxbxFh+OuU/ZSkb1HDquj6B5bP78FOgbAYQBuxSNa1FhUQ6MMB3ZDA2MEFxqP0OiF2iF8Q
X-Received: by 10.180.211.2 with SMTP id my2mr1458945wic.3.1422516565491; Wed,
	28 Jan 2015 23:29:25 -0800 (PST)
MIME-Version: 1.0
Received: by 10.216.76.72 with HTTP; Wed, 28 Jan 2015 23:29:04 -0800 (PST)
X-Originating-IP: [2601:9:4980:b60:24f1:1a0:8406:7b6d]
In-Reply-To: <54C9C839.8090301@philipreames.com>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>
	<CAMiUf7dGeE-DKi3JNog_EOrtaxfsOOVhaBRW5Ti_t41Xq3YkWg@mail.gmail.com>
	<CAL7bZ_djhG=GB2AdWzjKUw4zsA=cm-AZKMugv1Z8SxbAp+qBSQ@mail.gmail.com>
	<CAMiUf7dEaorbaW4oGeTz3yfF9qcvQYe=JFjW55MBEd2TGezy1g@mail.gmail.com>
	<CAL7bZ_fqhr0f1aoqQaCczsgTvDZqxxCWvSobWcZKj5iHDDgBXg@mail.gmail.com>
	<CAMiUf7ey9XAcnTibNObGiqkuX28N7sECDChNMtBZ9PTtCK33yg@mail.gmail.com>
	<CAL7bZ_deFdNgEYUvwaaexLeAmaGVmYateNi8Ug5FQTAHqPVFVw@mail.gmail.com>
	<CAMiUf7cUMhMPpSF-DXSGaX1pwXQ4R5x5j6wDAOO1qqeiyuW_qA@mail.gmail.com>
	<CAGCO0KjkcM5hnOS_roK3c1xO3Lsb1zU2heazC6BEYFFwhbe0TQ@mail.gmail.com>
	<CAMiUf7cApBzoFtjfub5C8E46V1jCwBXjzPqh9XLVyYefX0pTQA@mail.gmail.com>
	<54C9C839.8090301@philipreames.com>
From: Sanjoy Das <sanjoy@playingwithpointers.com>
Date: Wed, 28 Jan 2015 23:29:04 -0800
Message-ID: <CAMiUf7ek4-NaPiBqaA16KoyWZhtp87D2suihkinarxG4KE_2Ew@mail.gmail.com>
To: Philip Reames <listmail@philipreames.com>
Cc: Nuno Lopes <nuno.lopes@ist.utl.pt>, John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: O

> I don't think your example is actually problematic.  The original program
> before your transformation *executed* undefined behavior in the form of '%x
> = add nuw i32 %m, %n' with "%m = %n = 2^32-1 (a.k.a INT_MAX)".  If I

I was trying to show why the rule "signed overflow is undefined
behavior" is problematic w.r.t. hoisting arithmetic by repeating an
argument David made in the first email on this thread.  That
particular example is not a counterexample to the RFC.

The RFC has issues with icmps, sexts and zexts; but they're distinct
from the hoisting problem.

>  %x1 = add nuw i32 %m, %n
>  %x  = select i1 %cnd x1, 0
>  %y = zext i32 %x to i64
>  %s = lshr i64 %y, 32
>  %addr = gep %some_global, %s
>  store i32 42, i32* %addr
>
> This is well defined as per the spec David sent out.  %x is not poison.  %x1
> is, but that's fine.

AFAICT, going by the RFC, %x is poison iff %x1 is poison and %cond is true.

-- Sanjoy
_______________________________________________
LLVM Developers mailing list
LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev

From llvmdev-bounces@cs.uiuc.edu Thu Jan 29 10:51:49 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.7 required=5.0 tests=AWL,DKIM_ADSP_CUSTOM_MED,
	DKIM_SIGNED,HK_RANDOM_ENVFROM,HTML_MESSAGE,T_DKIM_INVALID autolearn=no
	version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id 41B666501B0;
	Thu, 29 Jan 2015 10:51:49 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Thu, 29 Jan 2015 10:51:48 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0THnPOA012125;
	Thu, 29 Jan 2015 11:49:25 -0600
Received: from engr-mail-prod.engr.illinois.edu
	(engr-mail-prod.engr.illinois.edu [192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0THn5Kx012087
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Thu, 29 Jan 2015 11:49:05 -0600
Received: from pps06.cites.illinois.edu ([192.17.82.102])
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <rnk@google.com>) id 1YGtDF-0005hq-8C
	for llvmdev@cs.uiuc.edu; Thu, 29 Jan 2015 11:49:05 -0600
Received: from mail-vc0-f179.google.com (mail-vc0-f179.google.com
	[209.85.220.179])
	by pps06.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0THmxf8025862
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Thu, 29 Jan 2015 11:48:59 -0600
Received: by mail-vc0-f179.google.com with SMTP id la4so9331260vcb.10
	for <llvmdev@cs.uiuc.edu>; Thu, 29 Jan 2015 09:48:59 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=20120113;
	h=mime-version:in-reply-to:references:date:message-id:subject:from:to
	:cc:content-type;
	bh=aed8ZEJcPlWnofioIkSfP2vjfkdllR7U/COaeXl+XZI=;
	b=NqvyGQVBfz1f29l+FkTKr/c1BzhP7VFxymh0UWYgWBTICZ8YIe8wQcDuZBCNAR4M1T
	1OYFn9qiFdp/Wn2j018Esfmw8+9gg0ZC5aH3Tg5U1nZBdXTTZrnejuA+STAagd+mJ9cK
	Q82aooBtdTcrTSteC2Wz5bylodP+s+SyBahojOk4E1uAFvOq1S9og2znBZtJLANwvcov
	bT4YX8pUpo7UucRzlFUvEDt/g/vy3pWaHL4bHLu3EYHjcEXq1GwK95nPG6K9g90WCKpl
	8T+bzyo3LK/igU/jBDtasHSQsp6Ot/IcOw+PsyEs3VVnFOQfJgYMovHxHONVupt/OMWE
	9oWA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:mime-version:in-reply-to:references:date
	:message-id:subject:from:to:cc:content-type;
	bh=aed8ZEJcPlWnofioIkSfP2vjfkdllR7U/COaeXl+XZI=;
	b=PYtx2tkSDMuoyoZSgWjd0EYr8/r+XCgueIghjVjAqWx9eWaKVWnbxtjItw3rF488py
	WWDGgYdpor/N0uYwTM5UnV1hfZlWZfqBClHnUq0hCML92uh+UnZ4OFKwCyYxoXcaikR8
	OfbPSl7xnjuCwQ63w0oUDzBpDIdjKAOOBHQ36vYUhlCeG5/ydUIBSwB5gWz6d27e7zxb
	sAsx8dnz8dWgKITX4CJd7u6c1PnDEBgilKGNNXALULPiyhmUVzRXnodSrdL2RPJ+JET+
	0H73KIw+5Vw3l8mmhgaRVBVfVuydQ8dPbPz1cstmCt14Mznumq60rMhHSg4d2tFSP52D
	+Y1Q==
X-Gm-Message-State: ALoCoQlxI1m/0R+UkOC9nNKeJkXEeyu9ATBT5o0+wPlE2wutCh0OVUYZ1q/6P88CwuvPua4zHjpf
MIME-Version: 1.0
X-Received: by 10.221.37.8 with SMTP id tc8mr973868vcb.25.1422553738845; Thu,
	29 Jan 2015 09:48:58 -0800 (PST)
Received: by 10.52.179.230 with HTTP; Thu, 29 Jan 2015 09:48:58 -0800 (PST)
In-Reply-To: <54C9BCB8.8040904@philipreames.com>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>
	<CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmail.com>
	<54C9BCB8.8040904@philipreames.com>
Date: Thu, 29 Jan 2015 09:48:58 -0800
Message-ID: <CACs=tyJoP9Ht87xWBrW37Tf5__vWcMwB2r3hVhBfdAdntfOhXw@mail.gmail.com>
From: Reid Kleckner <rnk@google.com>
To: Philip Reames <listmail@philipreames.com>
Cc: Nuno Lopes <nuno.lopes@ist.utl.pt>, John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: multipart/mixed; boundary="===============3520369922488547781=="
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: O

--===============3520369922488547781==
Content-Type: multipart/alternative; boundary=001a11337520474a04050dce1a67

--001a11337520474a04050dce1a67
Content-Type: text/plain; charset=UTF-8

On Wed, Jan 28, 2015 at 8:53 PM, Philip Reames <listmail@philipreames.com>
wrote:

>  On 01/28/2015 07:02 AM, Sean Silva wrote:
>
> Could you maybe provide an example where replacing `%always_poison` with
> `undef` will change the meaning? At least for me, the thing that I'm most
> unclear about is how poison differs from undef.
>
> I will second this request for much the same reason.
>

undef isn't strong enough to perform the simplification "a + 1 > a  -->
 true" for an nsw add.

If we use undef instead of poison, "a + 1" will produce undef iff a is
MAX_INT, but we cannot choose a bit-pattern for the undef result that is
greater than MAX_INT. In other words, as David said, the comparison  "icmp
gt i32 undef, MAX_INT" is always true, just as "and i32 undef, 0" always
produces 0.

I've been discussing a model with David that might steer poison back
towards something that simply supports algebraic simplification. If we have
a math operation that cannot wrap, then it notionally produces as many bits
of undef as the operation could possibly produce. For example, "add nsw i8"
can produce an i9 undef, and "mul nsw i8" can produce an undefined 16 bit
bitpattern. This is strong enough to do things like "a + 1 > a  -->  true",
because on overflow of "a + 1" we can choose an poison value of "MAX_INT +
1", even though that is not a valid i8 bit pattern.

So, a short version would be that poison is like undef, except you get to
include the overflow bits of the computation in your undef value.

--001a11337520474a04050dce1a67
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_extra"><div class=3D"gmail_quote">On W=
ed, Jan 28, 2015 at 8:53 PM, Philip Reames <span dir=3D"ltr">&lt;<a href=3D=
"mailto:listmail@philipreames.com" target=3D"_blank">listmail@philipreames.=
com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=3D"mar=
gin:0px 0px 0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,2=
04);border-left-style:solid;padding-left:1ex">
 =20
   =20
 =20
  <div bgcolor=3D"#FFFFFF" text=3D"#000000"><span class=3D"">
    <div>On 01/28/2015 07:02 AM, Sean Silva
      wrote:<br>
    </div>
    <blockquote type=3D"cite">
      <div dir=3D"ltr">Could you maybe provide an example where replacing
        `%always_poison` with `undef` will change the meaning? At least
        for me, the thing that I&#39;m most unclear about is how poison
        differs from undef.</div>
    </blockquote></span>
    I will second this request for much the same reason.</div></blockquote>=
<div><br></div><div>undef isn&#39;t strong enough to perform the simplifica=
tion &quot;a + 1 &gt; a =C2=A0--&gt; =C2=A0true&quot; for an nsw add.</div>=
<div><br></div><div>If we use undef instead of poison, &quot;a + 1&quot; wi=
ll produce undef iff a is MAX_INT, but we cannot choose a bit-pattern for t=
he undef result that is greater than MAX_INT. In other words, as David said=
, the comparison=20
<span style=3D"color:rgb(34,34,34);font-family:arial,sans-serif;font-size:s=
mall;font-style:normal;font-variant:normal;font-weight:normal;letter-spacin=
g:normal;line-height:normal;text-align:start;text-indent:0px;text-transform=
:none;white-space:normal;word-spacing:0px;float:none;display:inline!importa=
nt;background-color:rgb(255,255,255)"><span class=3D"">=C2=A0</span>&quot;i=
cmp gt i32 undef, MAX_INT&quot;</span>

is always true, just as &quot;and i32 undef, 0&quot; always produces 0.</di=
v><div><br></div><div>I&#39;ve been discussing a model with David that migh=
t steer poison back towards something that simply supports algebraic simpli=
fication. If we have a math operation that cannot wrap, then it notionally =
produces as many bits of undef as the operation could possibly produce. For=
 example, &quot;add nsw i8&quot; can produce an i9 undef, and &quot;mul nsw=
 i8&quot; can produce an undefined 16 bit bitpattern. This is strong enough=
 to do things like &quot;a + 1 &gt; a =C2=A0--&gt; =C2=A0true&quot;, becaus=
e on overflow of &quot;a + 1&quot; we can choose an poison value of &quot;M=
AX_INT + 1&quot;, even though that is not a valid i8 bit pattern.</div><div=
><br></div><div>So, a short version would be that poison is like undef, exc=
ept you get to include the overflow bits of the computation in your undef v=
alue.</div></div></div></div>

--001a11337520474a04050dce1a67--

--===============3520369922488547781==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

_______________________________________________
LLVM Developers mailing list
LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev

--===============3520369922488547781==--

From llvmdev-bounces@cs.uiuc.edu Thu Jan 29 11:36:44 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.6 required=5.0 tests=AWL,HK_RANDOM_ENVFROM
	autolearn=no version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id 2C08C6501A4;
	Thu, 29 Jan 2015 11:36:44 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Thu, 29 Jan 2015 11:36:44 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0TIXaMv014373;
	Thu, 29 Jan 2015 12:33:36 -0600
Received: from engr-mail-prod.engr.illinois.edu
	(engr-mail-prod.engr.illinois.edu [192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0TIXTvl014365
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Thu, 29 Jan 2015 12:33:30 -0600
Received: from pps06.cites.illinois.edu ([192.17.82.102])
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <listmail@philipreames.com>)
	id 1YGtuD-000817-TA
	for llvmdev@cs.uiuc.edu; Thu, 29 Jan 2015 12:33:29 -0600
Received: from hub021-ca-7.exch021.serverdata.net
	(hub021-ca-7.exch021.serverdata.net [64.78.56.72])
	by pps06.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0TIXM08017226
	(version=TLSv1/SSLv3 cipher=AES128-SHA bits=128 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Thu, 29 Jan 2015 12:33:23 -0600
Received: from [10.10.6.216] (64.79.112.130) by west.exch021.serverdata.net
	(10.254.4.110) with Microsoft SMTP Server (TLS) id 14.3.174.1;
	Thu, 29 Jan 2015 10:33:22 -0800
Message-ID: <54CA7CE3.1030509@philipreames.com>
Date: Thu, 29 Jan 2015 10:33:07 -0800
From: Philip Reames <listmail@philipreames.com>
User-Agent: Mozilla/5.0 (X11; Linux x86_64;
	rv:31.0) Gecko/20100101 Thunderbird/31.3.0
MIME-Version: 1.0
To: Sanjoy Das <sanjoy@playingwithpointers.com>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>
	<CAMiUf7dGeE-DKi3JNog_EOrtaxfsOOVhaBRW5Ti_t41Xq3YkWg@mail.gmail.com>
	<CAL7bZ_djhG=GB2AdWzjKUw4zsA=cm-AZKMugv1Z8SxbAp+qBSQ@mail.gmail.com>
	<CAMiUf7dEaorbaW4oGeTz3yfF9qcvQYe=JFjW55MBEd2TGezy1g@mail.gmail.com>
	<CAL7bZ_fqhr0f1aoqQaCczsgTvDZqxxCWvSobWcZKj5iHDDgBXg@mail.gmail.com>
	<CAMiUf7ey9XAcnTibNObGiqkuX28N7sECDChNMtBZ9PTtCK33yg@mail.gmail.com>
	<CAL7bZ_deFdNgEYUvwaaexLeAmaGVmYateNi8Ug5FQTAHqPVFVw@mail.gmail.com>
	<CAMiUf7cUMhMPpSF-DXSGaX1pwXQ4R5x5j6wDAOO1qqeiyuW_qA@mail.gmail.com>
	<CAGCO0KjkcM5hnOS_roK3c1xO3Lsb1zU2heazC6BEYFFwhbe0TQ@mail.gmail.com>
	<CAMiUf7cApBzoFtjfub5C8E46V1jCwBXjzPqh9XLVyYefX0pTQA@mail.gmail.com>
	<54C9C839.8090301@philipreames.com>
	<CAMiUf7ek4-NaPiBqaA16KoyWZhtp87D2suihkinarxG4KE_2Ew@mail.gmail.com>
In-Reply-To: <CAMiUf7ek4-NaPiBqaA16KoyWZhtp87D2suihkinarxG4KE_2Ew@mail.gmail.com>
Cc: Nuno Lopes <nuno.lopes@ist.utl.pt>, John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Transfer-Encoding: 7bit
Content-Type: text/plain; charset="us-ascii"; Format="flowed"
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: O


On 01/28/2015 11:29 PM, Sanjoy Das wrote:
>> I don't think your example is actually problematic.  The original program
>> before your transformation *executed* undefined behavior in the form of '%x
>> = add nuw i32 %m, %n' with "%m = %n = 2^32-1 (a.k.a INT_MAX)".  If I
> I was trying to show why the rule "signed overflow is undefined
> behavior" is problematic w.r.t. hoisting arithmetic by repeating an
> argument David made in the first email on this thread.  That
> particular example is not a counterexample to the RFC.
Er, I really don't get your point here.  This is a direct mapping of 
what the C++ spec says onto LLVM IR.  Can you clarify what you mean?
>
> The RFC has issues with icmps, sexts and zexts; but they're distinct
> from the hoisting problem.
Can you enumerate?  Or give an example?
>
>>   %x1 = add nuw i32 %m, %n
>>   %x  = select i1 %cnd x1, 0
>>   %y = zext i32 %x to i64
>>   %s = lshr i64 %y, 32
>>   %addr = gep %some_global, %s
>>   store i32 42, i32* %addr
>>
>> This is well defined as per the spec David sent out.  %x is not poison.  %x1
>> is, but that's fine.
> AFAICT, going by the RFC, %x is poison iff %x1 is poison and %cond is true.
You're correct; I was sloppy in my wording.  What I should have said was 
that %x is poison exactly when the original program would have executed 
undefined behaviour.  If the original program was well defined (and thus 
%cnd is false), %x is not poison.  That seems like exactly what we want.

Philip

_______________________________________________
LLVM Developers mailing list
LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev

From llvmdev-bounces@cs.uiuc.edu Thu Jan 29 12:30:03 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.6 required=5.0 tests=AWL,HK_RANDOM_ENVFROM
	autolearn=no version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id A53026501A2;
	Thu, 29 Jan 2015 12:30:03 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Thu, 29 Jan 2015 12:30:03 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0TJRs1W017484;
	Thu, 29 Jan 2015 13:27:54 -0600
Received: from engr-mail-prod.engr.illinois.edu
	(engr-mail-prod.engr.illinois.edu [192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0TJQtPr017445
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Thu, 29 Jan 2015 13:26:55 -0600
Received: from pps06.cites.illinois.edu ([192.17.82.102])
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <sanjoy@playingwithpointers.com>)
	id 1YGujv-0001VQ-Ra
	for llvmdev@cs.uiuc.edu; Thu, 29 Jan 2015 13:26:55 -0600
Received: from mail-wg0-f46.google.com (mail-wg0-f46.google.com [74.125.82.46])
	by pps06.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0TJQmZK018255
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Thu, 29 Jan 2015 13:26:49 -0600
Received: by mail-wg0-f46.google.com with SMTP id l2so23958732wgh.5
	for <llvmdev@cs.uiuc.edu>; Thu, 29 Jan 2015 11:26:47 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:mime-version:in-reply-to:references:from:date
	:message-id:subject:to:cc:content-type;
	bh=TwMK5yMWKb1ojx0qoJuZXtGd1keGyV7DX7H6WOIhxEg=;
	b=aTeOCmbdDJoRXEO1E1bBNzFmJcjO3VOErK41LorUn1A8IwWBaU34snfw+K/Anzwav0
	sHmslRNPnqXzcrDk4XNu3+5EEC772qf4HIn5kWRgIIMF8w03jjc6OXHvwQLpaa5Lit3W
	fnMqWQranZqHkAGI3f4K28xRKLdNRDIhfrZXaUkSU3pEDmZUqqYIwqiaCNign43GRfBN
	8iP4q43VbLeD+dllDVyUkK2crZRrFcTXFOWbEpbbQ9nIjfgOSrwNsVP2VGFrH0VRyTqz
	rh4urOblQnev+yIVKHGrnNNe8yNhY/Q+3gOKS2/RA6LsDvyM1iVXcqjg0FJgCDkVAs9m
	I91Q==
X-Gm-Message-State: ALoCoQldzuJznX9vAoWj2oMs8UX1QXT9lUU/6ngzyL4XB+AEspAkyZE35zGs8qf/3prYFdPM3SoZ
X-Received: by 10.194.143.109 with SMTP id sd13mr4548118wjb.70.1422559606248; 
	Thu, 29 Jan 2015 11:26:46 -0800 (PST)
MIME-Version: 1.0
Received: by 10.216.76.72 with HTTP; Thu, 29 Jan 2015 11:26:26 -0800 (PST)
X-Originating-IP: [64.79.112.130]
In-Reply-To: <54CA7CE3.1030509@philipreames.com>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>
	<CAMiUf7dGeE-DKi3JNog_EOrtaxfsOOVhaBRW5Ti_t41Xq3YkWg@mail.gmail.com>
	<CAL7bZ_djhG=GB2AdWzjKUw4zsA=cm-AZKMugv1Z8SxbAp+qBSQ@mail.gmail.com>
	<CAMiUf7dEaorbaW4oGeTz3yfF9qcvQYe=JFjW55MBEd2TGezy1g@mail.gmail.com>
	<CAL7bZ_fqhr0f1aoqQaCczsgTvDZqxxCWvSobWcZKj5iHDDgBXg@mail.gmail.com>
	<CAMiUf7ey9XAcnTibNObGiqkuX28N7sECDChNMtBZ9PTtCK33yg@mail.gmail.com>
	<CAL7bZ_deFdNgEYUvwaaexLeAmaGVmYateNi8Ug5FQTAHqPVFVw@mail.gmail.com>
	<CAMiUf7cUMhMPpSF-DXSGaX1pwXQ4R5x5j6wDAOO1qqeiyuW_qA@mail.gmail.com>
	<CAGCO0KjkcM5hnOS_roK3c1xO3Lsb1zU2heazC6BEYFFwhbe0TQ@mail.gmail.com>
	<CAMiUf7cApBzoFtjfub5C8E46V1jCwBXjzPqh9XLVyYefX0pTQA@mail.gmail.com>
	<54C9C839.8090301@philipreames.com>
	<CAMiUf7ek4-NaPiBqaA16KoyWZhtp87D2suihkinarxG4KE_2Ew@mail.gmail.com>
	<54CA7CE3.1030509@philipreames.com>
From: Sanjoy Das <sanjoy@playingwithpointers.com>
Date: Thu, 29 Jan 2015 11:26:26 -0800
Message-ID: <CAMiUf7dJSGc6na7UHYdxjsk_QNGOTaY0-uD3GL1S1NqXLs5Kbw@mail.gmail.com>
To: Philip Reames <listmail@philipreames.com>
Cc: Nuno Lopes <nuno.lopes@ist.utl.pt>, John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: R

On Thu, Jan 29, 2015 at 10:33 AM, Philip Reames
<listmail@philipreames.com> wrote:
>
> On 01/28/2015 11:29 PM, Sanjoy Das wrote:
>>>
>>> I don't think your example is actually problematic.  The original program
>>> before your transformation *executed* undefined behavior in the form of
>>> '%x
>>> = add nuw i32 %m, %n' with "%m = %n = 2^32-1 (a.k.a INT_MAX)".  If I
>>
>> I was trying to show why the rule "signed overflow is undefined
>> behavior" is problematic w.r.t. hoisting arithmetic by repeating an
>> argument David made in the first email on this thread.  That
>> particular example is not a counterexample to the RFC.
>
> Er, I really don't get your point here.  This is a direct mapping of what
> the C++ spec says onto LLVM IR.  Can you clarify what you mean?

I mean if the specification of nsw (say) in LLVM is "add nsw X Y" is
undefined behavior if the addition overflows, then we cannot hoist
additions through control flow since we could be introducing undefined
behavior that wasn't present in the original program.  Hence it is
undesirable to state "add nsw X Y has UB if the addition overflows".
The RFC does not formalize nsw this way, so this is not a problem with
the RFC.


> Can you enumerate?  Or give an example?

I've given (counter-)examples for all of these in previous emails:

[zext] http://lists.cs.uiuc.edu/pipermail/llvmdev/2015-January/081321.html
+ http://lists.cs.uiuc.edu/pipermail/llvmdev/2015-January/081322.html

[sext] http://lists.cs.uiuc.edu/pipermail/llvmdev/2015-January/081316.html

[icmp] http://lists.cs.uiuc.edu/pipermail/llvmdev/2015-January/081312.html

> You're correct; I was sloppy in my wording.  What I should have said was
> that %x is poison exactly when the original program would have executed
> undefined behaviour.  If the original program was well defined (and thus
> %cnd is false), %x is not poison.  That seems like exactly what we want.

Yes, this RFC does the right thing in this case.

-- Sanjoy
_______________________________________________
LLVM Developers mailing list
LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev

From llvmdev-bounces@cs.uiuc.edu Thu Jan 29 12:43:39 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.6 required=5.0 tests=AWL,HK_RANDOM_ENVFROM
	autolearn=no version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id D6E0665019D;
	Thu, 29 Jan 2015 12:43:39 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Thu, 29 Jan 2015 12:43:39 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0TJfZ49018352;
	Thu, 29 Jan 2015 13:41:35 -0600
Received: from engr-mail-prod.engr.illinois.edu
	(engr-mail-prod.engr.illinois.edu [192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0TJduk8018237
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Thu, 29 Jan 2015 13:39:56 -0600
Received: from pps05.cites.illinois.edu ([192.17.82.72])
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <sanjoy@playingwithpointers.com>)
	id 1YGuwW-0002OF-KO
	for llvmdev@cs.uiuc.edu; Thu, 29 Jan 2015 13:39:56 -0600
Received: from mail-wi0-f172.google.com (mail-wi0-f172.google.com
	[209.85.212.172])
	by pps05.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0TJdAiu004929
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Thu, 29 Jan 2015 13:39:22 -0600
Received: by mail-wi0-f172.google.com with SMTP id h11so30950758wiw.5
	for <llvmdev@cs.uiuc.edu>; Thu, 29 Jan 2015 11:37:49 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:mime-version:in-reply-to:references:from:date
	:message-id:subject:to:cc:content-type;
	bh=0dizYAdHiRuKYdTbjguIJnIRWYbqFNDB+Br9zGBv5/Y=;
	b=dRZ2/YY5J6r5s6uwYZPsVlZnvaY4U3JOXWomG6VVOxzzVkXBtQzOkRIWm63WXkDImE
	5GOHkecXyQoDtnqTerAR68HVXleHSRM4iVZxs8OYpSAXVMCRCyaQs7Ae0PX9BCkcOfMM
	0prjK9RJPm8nTyTLXnYnw0kcQKH6CKjDGqwgVYan2hN5HCx4ixC2ChHsXr7VCY6X7CNV
	Z2S2Zk6T+emz158vtJjvqr6Xjg3kFmNA849NPaKxiE7XUxkI5AcxPEGS4bzsvQ2c+byK
	ZWD8fOMULqnIiQ08+9kHmanfr3QoeG/SRrYXyDA/SRLDBbroyXgTB1Zu+zQcKtjhv2Cx
	fQJw==
X-Gm-Message-State: ALoCoQlLgKv+fitOkgskGhpLhckGCt+ZY0q0jfiu6BiYcv1T40qFVpAvVDpzzJxtR9nK0qtpTzKa
X-Received: by 10.194.185.15 with SMTP id ey15mr4302583wjc.3.1422559776935;
	Thu, 29 Jan 2015 11:29:36 -0800 (PST)
MIME-Version: 1.0
Received: by 10.216.76.72 with HTTP; Thu, 29 Jan 2015 11:29:16 -0800 (PST)
X-Originating-IP: [64.79.112.130]
In-Reply-To: <CACs=tyJoP9Ht87xWBrW37Tf5__vWcMwB2r3hVhBfdAdntfOhXw@mail.gmail.com>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>
	<CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmail.com>
	<54C9BCB8.8040904@philipreames.com>
	<CACs=tyJoP9Ht87xWBrW37Tf5__vWcMwB2r3hVhBfdAdntfOhXw@mail.gmail.com>
From: Sanjoy Das <sanjoy@playingwithpointers.com>
Date: Thu, 29 Jan 2015 11:29:16 -0800
Message-ID: <CAMiUf7fzRVfBoKc14pVLv1WvoCqC0=yy983q_xuacyk-sDEJmQ@mail.gmail.com>
To: Reid Kleckner <rnk@google.com>
Cc: Nuno Lopes <nuno.lopes@ist.utl.pt>, John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: RO

> I've been discussing a model with David that might steer poison back towards
> something that simply supports algebraic simplification. If we have a math
> operation that cannot wrap, then it notionally produces as many bits of
> undef as the operation could possibly produce. For example, "add nsw i8" can
> produce an i9 undef, and "mul nsw i8" can produce an undefined 16 bit
> bitpattern. This is strong enough to do things like "a + 1 > a  -->  true",
> because on overflow of "a + 1" we can choose an poison value of "MAX_INT +
> 1", even though that is not a valid i8 bit pattern.
>
> So, a short version would be that poison is like undef, except you get to
> include the overflow bits of the computation in your undef value.

I  suspect it will be hard to justify reg2mem is meaning preserving in
this scheme.  But if this can be made to work, then I agree that this
is the right thing to do -- an i32 poison effectively has the
semantics of a wider type, and it makes sense to be explicit in that.

-- Sanjoy
_______________________________________________
LLVM Developers mailing list
LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev

From llvmdev-bounces@cs.uiuc.edu Thu Jan 29 21:05:12 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.7 required=5.0 tests=DKIM_SIGNED,HK_RANDOM_ENVFROM,
	T_DKIM_INVALID autolearn=no version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id C431E65019E;
	Thu, 29 Jan 2015 21:05:12 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Thu, 29 Jan 2015 21:05:12 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0U434kb007937;
	Thu, 29 Jan 2015 22:03:04 -0600
Received: from engr-mail-prod.engr.illinois.edu
	(engr-mail-prod.engr.illinois.edu [192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0U433P4007934
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Thu, 29 Jan 2015 22:03:03 -0600
Received: from pps01.cites.illinois.edu ([192.17.82.69])
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <matze@braunis.de>) id 1YH2nO-0005Q9-T6
	for llvmdev@cs.uiuc.edu; Thu, 29 Jan 2015 22:03:03 -0600
Received: from mo4-p00-ob.smtp.rzone.de (mo4-p00-ob.smtp.rzone.de
	[81.169.146.219])
	by pps01.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0U42uQQ019459
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Thu, 29 Jan 2015 22:02:57 -0600
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; t=1422590575; l=2593;
	s=domk; d=braunis.de;
	h=To:References:Content-Transfer-Encoding:Cc:Date:In-Reply-To:From:
	Subject:Mime-Version:Content-Type;
	bh=wpZkUHxSNyU5XzX4/p2+MkPV77JprlK5EXeKEgvhTvg=;
	b=s4C6fMPAiqe3l9WhgPsCVe4kmFYMGfVnoVK1dM6iq6NhzP852wlyOMd34cbn6zqIAVc
	UtYV1jVq44VNfk2uqwBHRznj70gnpNWiLJPmN9O18dNkUViqZv6yYnK5Asz3h5p+YVuJI
	oGkzCvE4fnLEurbBEpdq2Wy5vMt9lErjO48=
X-RZG-AUTH: :IW0Qb0WIee3a21CBOtQF9AagGrT+fRLDVqxmFvxNolGd+8FGAppMK1M9R1i7yVk=
X-RZG-CLASS-ID: mo00
Received: from [192.168.0.2] (c-67-161-69-204.hsd1.ca.comcast.net
	[67.161.69.204]) by smtp.strato.de (RZmta 37.1 DYNA|AUTH)
	with ESMTPSA id K06953r0U42r9BN
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(Client did not present a certificate);
	Fri, 30 Jan 2015 05:02:53 +0100 (CET)
Mime-Version: 1.0 (Mac OS X Mail 8.2 \(2070.6\))
From: Matthias Braun <matze@braunis.de>
In-Reply-To: <CAMiUf7fzRVfBoKc14pVLv1WvoCqC0=yy983q_xuacyk-sDEJmQ@mail.gmail.com>
Date: Thu, 29 Jan 2015 20:05:33 -0800
Message-Id: <FF44B6AB-3A49-4774-B807-6073DC04A304@braunis.de>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>
	<CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmail.com>
	<54C9BCB8.8040904@philipreames.com>
	<CACs=tyJoP9Ht87xWBrW37Tf5__vWcMwB2r3hVhBfdAdntfOhXw@mail.gmail.com>
	<CAMiUf7fzRVfBoKc14pVLv1WvoCqC0=yy983q_xuacyk-sDEJmQ@mail.gmail.com>
To: Sanjoy Das <sanjoy@playingwithpointers.com>
X-Mailer: Apple Mail (2.2070.6)
X-MIME-Autoconverted: from quoted-printable to 8bit by
	dcs-maillist2.engr.illinois.edu id t0U433P4007934
Cc: Nuno Lopes <nuno.lopes@ist.utl.pt>, John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: O

SGF2aW5nIHRob3VnaCBhYm91dCB0aGlzIHNvbWUgbW9yZSBJIHRoaW5rIG9wdGltaXppbmcKCih4
KzEgPiB4KSA8PT4gdHJ1ZQoKYW5kIGF0IHRoZSBzYW1lIHRpbWUgbW9kZWxpbmcgdW5kZWZpbmVk
IGJlaGF2aW9yIGFzIGEgcG9zaW9uIHZhbHVlIGlzIGltcG9zc2libGUuIFRoaXMgaXMgYmVjYXVz
ZSB3ZSBhbHNvIHdhbnQgdGhlIGZvbGxvd2luZyBydWxlOgoKKHggPiBJTlRfTUFYKSA8PT4gZmFs
c2UKCk5vdyBpZiBwb2lzb24gaXMgYSB2YWx1ZSwgdGhlbiB0aGUgc2Vjb25kIHJlcGxhY2VtZW50
IHRlbGxzIHVzIChwb2lzb24gPiBJTlRfTUFYKSA9PSBmYWxzZSB3aGljaCBjb250cmFkaWN0cyB0
aGUgZmlyc3QgcnVsZS4KCgoKVGhlIG9ubHkgd2F5IG91dCBvZiB0aGlzIHdoaWxlIHN0aWxsIGFs
bG93aW5nICh4KzE+eCk8PT50cnVlIEkgY2FuIHNlZSBhdCB0aGUgbW9tZW50IGlzIGRlZmluaW5n
IHRoYXQgYWRkIG5zdyBkb2VzIHByb2R1Y2UgYWN0dWFsIHVuZGVmaW5lZCBiZWhhdmlvciBhbGxv
d2luZyB1cyB0byDigJxmcmVlbHkgcmV3cml0ZSIgdGhlIGZvbGxvd2luZyA+IHRvIHRydWUgaW4g
dGhlIFVCIGNhc2VzLiBPZiBjb3Vyc2UgaGF2aW5nIGFkZCBwcm9kdWNlIGFjdHVhbCB1bmRlZmlu
ZWQgYmVoYXZpb3VyIGdyZWF0bHkgbGltaXRzIHVzIGluIHRoZSB3YXkgd2UgY2FuIGFjdHVhbGx5
IG1vdmUgdGhlIGluc3RydWN0aW9uIGFyb3VuZCB3aXRob3V0IGNoYW5naW5nIHByb2dyYW0gc2Vt
YW50aWNzLgoKVGhlIG9ubHkgd2F5IGFsbG93aW5nIG1vdmluZyBpbnN0cnVjdGlvbnMgYW5kIGhh
dmluZyBhZGQgcHJvZHVjZSByZWFsIFVCIEkgY2FuIHNlZSBpcyB0aGF0IGFzIHNvb24gYXMgd2Ug
c3RhcnQgbW92aW5nIGluc3RydWN0aW9ucyBhcm91bmQgKHNwZWNpZmljYWxseSBtb3ZpbmcgdGhl
IGFkZCB0byBhIHBsYWNlIGl0IGRvZXMgbm90IGRvbWluYXRlIG9yIG1vdmluZyBhbnkgb3RoZXIg
aW5zdHJ1Y3Rpb24gb3ZlciB0aGUgYWRkKSB3ZSBjaGFuZ2UgdGhlIGFkZCB0byBhbiBpbnN0cnVj
dGlvbiB0aGF0IGRvZXMgbm90IHByb2R1Y2UgcmVhbCBVQiBhbnltb3JlOyBzb21ldGhpbmcgbGlr
ZSBhZGQgc3d1ID0g4oCcYWRkIHNpZ25lZCB3cmFwIGdpdmVzIHVuZGVm4oCdLi4uCgotIE1hdHRo
aWFzCgo+IE9uIEphbiAyOSwgMjAxNSwgYXQgMTE6MjkgQU0sIFNhbmpveSBEYXMgPHNhbmpveUBw
bGF5aW5nd2l0aHBvaW50ZXJzLmNvbT4gd3JvdGU6Cj4gCj4+IEkndmUgYmVlbiBkaXNjdXNzaW5n
IGEgbW9kZWwgd2l0aCBEYXZpZCB0aGF0IG1pZ2h0IHN0ZWVyIHBvaXNvbiBiYWNrIHRvd2FyZHMK
Pj4gc29tZXRoaW5nIHRoYXQgc2ltcGx5IHN1cHBvcnRzIGFsZ2VicmFpYyBzaW1wbGlmaWNhdGlv
bi4gSWYgd2UgaGF2ZSBhIG1hdGgKPj4gb3BlcmF0aW9uIHRoYXQgY2Fubm90IHdyYXAsIHRoZW4g
aXQgbm90aW9uYWxseSBwcm9kdWNlcyBhcyBtYW55IGJpdHMgb2YKPj4gdW5kZWYgYXMgdGhlIG9w
ZXJhdGlvbiBjb3VsZCBwb3NzaWJseSBwcm9kdWNlLiBGb3IgZXhhbXBsZSwgImFkZCBuc3cgaTgi
IGNhbgo+PiBwcm9kdWNlIGFuIGk5IHVuZGVmLCBhbmQgIm11bCBuc3cgaTgiIGNhbiBwcm9kdWNl
IGFuIHVuZGVmaW5lZCAxNiBiaXQKPj4gYml0cGF0dGVybi4gVGhpcyBpcyBzdHJvbmcgZW5vdWdo
IHRvIGRvIHRoaW5ncyBsaWtlICJhICsgMSA+IGEgIC0tPiAgdHJ1ZSIsCj4+IGJlY2F1c2Ugb24g
b3ZlcmZsb3cgb2YgImEgKyAxIiB3ZSBjYW4gY2hvb3NlIGFuIHBvaXNvbiB2YWx1ZSBvZiAiTUFY
X0lOVCArCj4+IDEiLCBldmVuIHRob3VnaCB0aGF0IGlzIG5vdCBhIHZhbGlkIGk4IGJpdCBwYXR0
ZXJuLgo+PiAKPj4gU28sIGEgc2hvcnQgdmVyc2lvbiB3b3VsZCBiZSB0aGF0IHBvaXNvbiBpcyBs
aWtlIHVuZGVmLCBleGNlcHQgeW91IGdldCB0bwo+PiBpbmNsdWRlIHRoZSBvdmVyZmxvdyBiaXRz
IG9mIHRoZSBjb21wdXRhdGlvbiBpbiB5b3VyIHVuZGVmIHZhbHVlLgo+IAo+IEkgIHN1c3BlY3Qg
aXQgd2lsbCBiZSBoYXJkIHRvIGp1c3RpZnkgcmVnMm1lbSBpcyBtZWFuaW5nIHByZXNlcnZpbmcg
aW4KPiB0aGlzIHNjaGVtZS4gIEJ1dCBpZiB0aGlzIGNhbiBiZSBtYWRlIHRvIHdvcmssIHRoZW4g
SSBhZ3JlZSB0aGF0IHRoaXMKPiBpcyB0aGUgcmlnaHQgdGhpbmcgdG8gZG8gLS0gYW4gaTMyIHBv
aXNvbiBlZmZlY3RpdmVseSBoYXMgdGhlCj4gc2VtYW50aWNzIG9mIGEgd2lkZXIgdHlwZSwgYW5k
IGl0IG1ha2VzIHNlbnNlIHRvIGJlIGV4cGxpY2l0IGluIHRoYXQuCj4gCj4gLS0gU2Fuam95Cj4g
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KPiBMTFZNIERl
dmVsb3BlcnMgbWFpbGluZyBsaXN0Cj4gTExWTWRldkBjcy51aXVjLmVkdSAgICAgICAgIGh0dHA6
Ly9sbHZtLmNzLnVpdWMuZWR1Cj4gaHR0cDovL2xpc3RzLmNzLnVpdWMuZWR1L21haWxtYW4vbGlz
dGluZm8vbGx2bWRldgoKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fCkxMVk0gRGV2ZWxvcGVycyBtYWlsaW5nIGxpc3QKTExWTWRldkBjcy51aXVjLmVkdSAg
ICAgICAgIGh0dHA6Ly9sbHZtLmNzLnVpdWMuZWR1Cmh0dHA6Ly9saXN0cy5jcy51aXVjLmVkdS9t
YWlsbWFuL2xpc3RpbmZvL2xsdm1kZXYK

From llvmdev-bounces@cs.uiuc.edu Thu Jan 29 22:46:05 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.6 required=5.0 tests=HK_RANDOM_ENVFROM autolearn=no
	version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id 0BB8E65019E;
	Thu, 29 Jan 2015 22:46:05 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Thu, 29 Jan 2015 22:46:04 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0U5hbY6009601;
	Thu, 29 Jan 2015 23:43:37 -0600
Received: from engr-mail-prod.engr.illinois.edu
	(engr-mail-prod.engr.illinois.edu [192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0U5hZAJ009598
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Thu, 29 Jan 2015 23:43:35 -0600
Received: from pps03.cites.illinois.edu ([192.17.82.70])
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <sanjoy@playingwithpointers.com>)
	id 1YH4Mh-000097-Hz
	for llvmdev@cs.uiuc.edu; Thu, 29 Jan 2015 23:43:35 -0600
Received: from mail-wg0-f52.google.com (mail-wg0-f52.google.com [74.125.82.52])
	by pps03.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0U5hStC017322
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Thu, 29 Jan 2015 23:43:29 -0600
Received: by mail-wg0-f52.google.com with SMTP id y19so24920648wgg.11
	for <llvmdev@cs.uiuc.edu>; Thu, 29 Jan 2015 21:43:28 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:mime-version:in-reply-to:references:from:date
	:message-id:subject:to:cc:content-type:content-transfer-encoding;
	bh=DFea159JwPxrlXuOnXXl36BMpXaOw/XNPwBJhnE62i0=;
	b=co+lXUbxvSN4x4LgtRX+50i7lU7oGlgO1W3zDQX/6Vixeqec6LPruPS8t3WxlLG9S8
	YF4kqYrcLrzXWUpPn4aJYIAi55MZGgBnD6bIZ7TYWRnP7Ypl9xsJXsoG4l+U93NbDwUZ
	nG+v9fMHTT5+ozb9OU/rCvFyNOe/4NaOqPYKLiIi6d8numBJi75IiU6hXqCWoxI7S70w
	MwdS2pilQHaAO6rrOsdHqC748WOaR4kPZScp0jdjhdwr6yRUXo3fo+R0JZS9m0kp26aM
	sAVHiDZL435ChXSew7V2Hx829TwrvnAQzWDKAqSZ2p+d2IihPIU8h/2anOPs4EipaC26
	wGKw==
X-Gm-Message-State: ALoCoQl4b/sTHRDs5UxmMj6jFHx6sFtCODBsb7JLr6SuXG0+hHegjlNGFGHBeLbvG/b24Uo4SKS6
X-Received: by 10.194.237.41 with SMTP id uz9mr8693556wjc.80.1422596608152;
	Thu, 29 Jan 2015 21:43:28 -0800 (PST)
MIME-Version: 1.0
Received: by 10.216.76.72 with HTTP; Thu, 29 Jan 2015 21:43:07 -0800 (PST)
X-Originating-IP: [2601:9:4980:b60:d16d:e6cf:17fc:7005]
In-Reply-To: <FF44B6AB-3A49-4774-B807-6073DC04A304@braunis.de>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>
	<CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmail.com>
	<54C9BCB8.8040904@philipreames.com>
	<CACs=tyJoP9Ht87xWBrW37Tf5__vWcMwB2r3hVhBfdAdntfOhXw@mail.gmail.com>
	<CAMiUf7fzRVfBoKc14pVLv1WvoCqC0=yy983q_xuacyk-sDEJmQ@mail.gmail.com>
	<FF44B6AB-3A49-4774-B807-6073DC04A304@braunis.de>
From: Sanjoy Das <sanjoy@playingwithpointers.com>
Date: Thu, 29 Jan 2015 21:43:07 -0800
Message-ID: <CAMiUf7c1YzBNoScRkPMDzN_juqrZ56vS4DOPMgezBWLLzYRdbQ@mail.gmail.com>
To: Matthias Braun <matze@braunis.de>
X-MIME-Autoconverted: from quoted-printable to 8bit by
	dcs-maillist2.engr.illinois.edu id t0U5hZAJ009598
Cc: Nuno Lopes <nuno.lopes@ist.utl.pt>, John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: O

T25lIHdheSBhcm91bmQgdGhpcyBpcyB0byBzYXkgdGhhdCB0aGVyZSBhcmUgc29tZSBzcGVjaWFs
Cmluc3RydWN0aW9ucywgaWNtcCwgc2V4dCBhbmQgemV4dCB3aGljaCBwcm9kdWNlIGEgdmFsdWUg
c29sZWx5CmNvbXBvc2VkIG9mIHBvaXNvbiBiaXRzIGlmIGFueSBvZiB0aGVpciBpbnB1dCBiaXRz
IGlzIHBvaXNvbi4gIFNvCmA8cG9pc29uPiBpY21wIFhgIGlzIHBvaXNvbiBmb3IgYW55IHZhbHVl
IG9mIFgsIGluY2x1ZGluZyBJTlRfTUFYLgpUaGlzIGlzIG9uZSB3YXkgcG9pc29uIGNvdWxkIGJl
IGZ1bmRhbWVudGFsbHkgZGlmZmVyZW50IGZyb20gdW5kZWYuCgotLSBTYW5qb3kKCk9uIFRodSwg
SmFuIDI5LCAyMDE1IGF0IDg6MDUgUE0sIE1hdHRoaWFzIEJyYXVuIDxtYXR6ZUBicmF1bmlzLmRl
PiB3cm90ZToKPiBIYXZpbmcgdGhvdWdoIGFib3V0IHRoaXMgc29tZSBtb3JlIEkgdGhpbmsgb3B0
aW1pemluZwo+Cj4gKHgrMSA+IHgpIDw9PiB0cnVlCj4KPiBhbmQgYXQgdGhlIHNhbWUgdGltZSBt
b2RlbGluZyB1bmRlZmluZWQgYmVoYXZpb3IgYXMgYSBwb3Npb24gdmFsdWUgaXMgaW1wb3NzaWJs
ZS4gVGhpcyBpcyBiZWNhdXNlIHdlIGFsc28gd2FudCB0aGUgZm9sbG93aW5nIHJ1bGU6Cj4KPiAo
eCA+IElOVF9NQVgpIDw9PiBmYWxzZQo+Cj4gTm93IGlmIHBvaXNvbiBpcyBhIHZhbHVlLCB0aGVu
IHRoZSBzZWNvbmQgcmVwbGFjZW1lbnQgdGVsbHMgdXMgKHBvaXNvbiA+IElOVF9NQVgpID09IGZh
bHNlIHdoaWNoIGNvbnRyYWRpY3RzIHRoZSBmaXJzdCBydWxlLgo+Cj4KPgo+IFRoZSBvbmx5IHdh
eSBvdXQgb2YgdGhpcyB3aGlsZSBzdGlsbCBhbGxvd2luZyAoeCsxPngpPD0+dHJ1ZSBJIGNhbiBz
ZWUgYXQgdGhlIG1vbWVudCBpcyBkZWZpbmluZyB0aGF0IGFkZCBuc3cgZG9lcyBwcm9kdWNlIGFj
dHVhbCB1bmRlZmluZWQgYmVoYXZpb3IgYWxsb3dpbmcgdXMgdG8g4oCcZnJlZWx5IHJld3JpdGUi
IHRoZSBmb2xsb3dpbmcgPiB0byB0cnVlIGluIHRoZSBVQiBjYXNlcy4gT2YgY291cnNlIGhhdmlu
ZyBhZGQgcHJvZHVjZSBhY3R1YWwgdW5kZWZpbmVkIGJlaGF2aW91ciBncmVhdGx5IGxpbWl0cyB1
cyBpbiB0aGUgd2F5IHdlIGNhbiBhY3R1YWxseSBtb3ZlIHRoZSBpbnN0cnVjdGlvbiBhcm91bmQg
d2l0aG91dCBjaGFuZ2luZyBwcm9ncmFtIHNlbWFudGljcy4KPgo+IFRoZSBvbmx5IHdheSBhbGxv
d2luZyBtb3ZpbmcgaW5zdHJ1Y3Rpb25zIGFuZCBoYXZpbmcgYWRkIHByb2R1Y2UgcmVhbCBVQiBJ
IGNhbiBzZWUgaXMgdGhhdCBhcyBzb29uIGFzIHdlIHN0YXJ0IG1vdmluZyBpbnN0cnVjdGlvbnMg
YXJvdW5kIChzcGVjaWZpY2FsbHkgbW92aW5nIHRoZSBhZGQgdG8gYSBwbGFjZSBpdCBkb2VzIG5v
dCBkb21pbmF0ZSBvciBtb3ZpbmcgYW55IG90aGVyIGluc3RydWN0aW9uIG92ZXIgdGhlIGFkZCkg
d2UgY2hhbmdlIHRoZSBhZGQgdG8gYW4gaW5zdHJ1Y3Rpb24gdGhhdCBkb2VzIG5vdCBwcm9kdWNl
IHJlYWwgVUIgYW55bW9yZTsgc29tZXRoaW5nIGxpa2UgYWRkIHN3dSA9IOKAnGFkZCBzaWduZWQg
d3JhcCBnaXZlcyB1bmRlZuKAnS4uLgo+Cj4gLSBNYXR0aGlhcwo+Cj4+IE9uIEphbiAyOSwgMjAx
NSwgYXQgMTE6MjkgQU0sIFNhbmpveSBEYXMgPHNhbmpveUBwbGF5aW5nd2l0aHBvaW50ZXJzLmNv
bT4gd3JvdGU6Cj4+Cj4+PiBJJ3ZlIGJlZW4gZGlzY3Vzc2luZyBhIG1vZGVsIHdpdGggRGF2aWQg
dGhhdCBtaWdodCBzdGVlciBwb2lzb24gYmFjayB0b3dhcmRzCj4+PiBzb21ldGhpbmcgdGhhdCBz
aW1wbHkgc3VwcG9ydHMgYWxnZWJyYWljIHNpbXBsaWZpY2F0aW9uLiBJZiB3ZSBoYXZlIGEgbWF0
aAo+Pj4gb3BlcmF0aW9uIHRoYXQgY2Fubm90IHdyYXAsIHRoZW4gaXQgbm90aW9uYWxseSBwcm9k
dWNlcyBhcyBtYW55IGJpdHMgb2YKPj4+IHVuZGVmIGFzIHRoZSBvcGVyYXRpb24gY291bGQgcG9z
c2libHkgcHJvZHVjZS4gRm9yIGV4YW1wbGUsICJhZGQgbnN3IGk4IiBjYW4KPj4+IHByb2R1Y2Ug
YW4gaTkgdW5kZWYsIGFuZCAibXVsIG5zdyBpOCIgY2FuIHByb2R1Y2UgYW4gdW5kZWZpbmVkIDE2
IGJpdAo+Pj4gYml0cGF0dGVybi4gVGhpcyBpcyBzdHJvbmcgZW5vdWdoIHRvIGRvIHRoaW5ncyBs
aWtlICJhICsgMSA+IGEgIC0tPiAgdHJ1ZSIsCj4+PiBiZWNhdXNlIG9uIG92ZXJmbG93IG9mICJh
ICsgMSIgd2UgY2FuIGNob29zZSBhbiBwb2lzb24gdmFsdWUgb2YgIk1BWF9JTlQgKwo+Pj4gMSIs
IGV2ZW4gdGhvdWdoIHRoYXQgaXMgbm90IGEgdmFsaWQgaTggYml0IHBhdHRlcm4uCj4+Pgo+Pj4g
U28sIGEgc2hvcnQgdmVyc2lvbiB3b3VsZCBiZSB0aGF0IHBvaXNvbiBpcyBsaWtlIHVuZGVmLCBl
eGNlcHQgeW91IGdldCB0bwo+Pj4gaW5jbHVkZSB0aGUgb3ZlcmZsb3cgYml0cyBvZiB0aGUgY29t
cHV0YXRpb24gaW4geW91ciB1bmRlZiB2YWx1ZS4KPj4KPj4gSSAgc3VzcGVjdCBpdCB3aWxsIGJl
IGhhcmQgdG8ganVzdGlmeSByZWcybWVtIGlzIG1lYW5pbmcgcHJlc2VydmluZyBpbgo+PiB0aGlz
IHNjaGVtZS4gIEJ1dCBpZiB0aGlzIGNhbiBiZSBtYWRlIHRvIHdvcmssIHRoZW4gSSBhZ3JlZSB0
aGF0IHRoaXMKPj4gaXMgdGhlIHJpZ2h0IHRoaW5nIHRvIGRvIC0tIGFuIGkzMiBwb2lzb24gZWZm
ZWN0aXZlbHkgaGFzIHRoZQo+PiBzZW1hbnRpY3Mgb2YgYSB3aWRlciB0eXBlLCBhbmQgaXQgbWFr
ZXMgc2Vuc2UgdG8gYmUgZXhwbGljaXQgaW4gdGhhdC4KPj4KPj4gLS0gU2Fuam95Cj4+IF9fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCj4+IExMVk0gRGV2ZWxv
cGVycyBtYWlsaW5nIGxpc3QKPj4gTExWTWRldkBjcy51aXVjLmVkdSAgICAgICAgIGh0dHA6Ly9s
bHZtLmNzLnVpdWMuZWR1Cj4+IGh0dHA6Ly9saXN0cy5jcy51aXVjLmVkdS9tYWlsbWFuL2xpc3Rp
bmZvL2xsdm1kZXYKPgoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX18KTExWTSBEZXZlbG9wZXJzIG1haWxpbmcgbGlzdApMTFZNZGV2QGNzLnVpdWMuZWR1ICAg
ICAgICAgaHR0cDovL2xsdm0uY3MudWl1Yy5lZHUKaHR0cDovL2xpc3RzLmNzLnVpdWMuZWR1L21h
aWxtYW4vbGlzdGluZm8vbGx2bWRldgo=

From llvmdev-bounces@cs.uiuc.edu Thu Jan 29 23:03:40 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.7 required=5.0 tests=DKIM_SIGNED,HK_RANDOM_ENVFROM,
	T_DKIM_INVALID autolearn=no version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id D35F965019E;
	Thu, 29 Jan 2015 23:03:40 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Thu, 29 Jan 2015 23:03:40 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0U61O48010177;
	Fri, 30 Jan 2015 00:01:24 -0600
Received: from engr-mail-prod.engr.illinois.edu
	(engr-mail-prod.engr.illinois.edu [192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0U61Mlq010174
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Fri, 30 Jan 2015 00:01:22 -0600
Received: from pps05.cites.illinois.edu ([192.17.82.72])
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <matze@braunis.de>) id 1YH4du-0000Ws-Cc
	for llvmdev@cs.uiuc.edu; Fri, 30 Jan 2015 00:01:22 -0600
Received: from mo4-p00-ob.smtp.rzone.de (mo4-p00-ob.smtp.rzone.de
	[81.169.146.162])
	by pps05.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0U61Ffq020585
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Fri, 30 Jan 2015 00:01:16 -0600
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; t=1422597674; l=3626;
	s=domk; d=braunis.de;
	h=To:Date:Subject:From:Cc:Content-Transfer-Encoding:Content-Type:
	In-Reply-To:Mime-Version:References;
	bh=7W8jK4DdcP58geDxKcFZLhRQQCkNxtmovJt2VLkxsZE=;
	b=RuhvykE+r0lcP4goMQwCRozjNI3lRK+T1jnNshKjvYQuMSuW7M9MEUpe1Vz9XQ1RMSr
	+mq7/XLLnxQcr9797KNeSNYQBYkmYO+/Tx/3+iinmAXKDDwtfbPTj5dbuEKf0Rw37UcNT
	HcMuW6sU7ae8bTsUbVLv/rXtXlux2/DtX+c=
X-RZG-AUTH: :IW0Qb0WIee3a21CBOtQF9AagGrTqeBTPI0SIPtJBbMdJWwHO1Aq7sNIk
X-RZG-CLASS-ID: mo00
Received: from [192.168.0.6] (c-67-161-69-204.hsd1.ca.comcast.net
	[67.161.69.204]) by smtp.strato.de (RZmta 37.1 DYNA|AUTH)
	with ESMTPSA id V06012r0U6198Ga
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(Client did not present a certificate);
	Fri, 30 Jan 2015 07:01:09 +0100 (CET)
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>
	<CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmail.com>
	<54C9BCB8.8040904@philipreames.com>
	<CACs=tyJoP9Ht87xWBrW37Tf5__vWcMwB2r3hVhBfdAdntfOhXw@mail.gmail.com>
	<CAMiUf7fzRVfBoKc14pVLv1WvoCqC0=yy983q_xuacyk-sDEJmQ@mail.gmail.com>
	<FF44B6AB-3A49-4774-B807-6073DC04A304@braunis.de>
	<CAMiUf7c1YzBNoScRkPMDzN_juqrZ56vS4DOPMgezBWLLzYRdbQ@mail.gmail.com>
Mime-Version: 1.0 (1.0)
In-Reply-To: <CAMiUf7c1YzBNoScRkPMDzN_juqrZ56vS4DOPMgezBWLLzYRdbQ@mail.gmail.com>
Message-Id: <F55205AD-CC03-4E2B-96DE-AFE285518CD2@braunis.de>
X-Mailer: iPad Mail (12B440)
From: Matthias Braun <matze@braunis.de>
Date: Thu, 29 Jan 2015 22:01:10 -0800
To: Sanjoy Das <sanjoy@playingwithpointers.com>
X-MIME-Autoconverted: from quoted-printable to 8bit by
	dcs-maillist2.engr.illinois.edu id t0U61Mlq010174
Cc: Nuno Lopes <nuno.lopes@ist.utl.pt>, John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: O

QnV0CihQb2lzb24gPiBJTlRfTUFYKSA8PT4gcG9pc29uCmNvbnRyYWRpY3RzCihYID4gSU5UX01B
WCkgPD0+IGZhbHNlCgphbmQgSSBkb24ndCB0aGluayB5b3Ugd2FudCB0byBhYmFuZG9uIHRoZSBz
ZWNvbmQgcnVsZSBqdXN0IGJlY2F1c2UgeCBtaWdodCBiZSBwb2lzb24uCgotIE1hdHRoaWFzCgo+
IE9uIEphbiAyOSwgMjAxNSwgYXQgOTo0MyBQTSwgU2Fuam95IERhcyA8c2Fuam95QHBsYXlpbmd3
aXRocG9pbnRlcnMuY29tPiB3cm90ZToKPiAKPiBPbmUgd2F5IGFyb3VuZCB0aGlzIGlzIHRvIHNh
eSB0aGF0IHRoZXJlIGFyZSBzb21lIHNwZWNpYWwKPiBpbnN0cnVjdGlvbnMsIGljbXAsIHNleHQg
YW5kIHpleHQgd2hpY2ggcHJvZHVjZSBhIHZhbHVlIHNvbGVseQo+IGNvbXBvc2VkIG9mIHBvaXNv
biBiaXRzIGlmIGFueSBvZiB0aGVpciBpbnB1dCBiaXRzIGlzIHBvaXNvbi4gIFNvCj4gYDxwb2lz
b24+IGljbXAgWGAgaXMgcG9pc29uIGZvciBhbnkgdmFsdWUgb2YgWCwgaW5jbHVkaW5nIElOVF9N
QVguCj4gVGhpcyBpcyBvbmUgd2F5IHBvaXNvbiBjb3VsZCBiZSBmdW5kYW1lbnRhbGx5IGRpZmZl
cmVudCBmcm9tIHVuZGVmLgo+IAo+IC0tIFNhbmpveQo+IAo+PiBPbiBUaHUsIEphbiAyOSwgMjAx
NSBhdCA4OjA1IFBNLCBNYXR0aGlhcyBCcmF1biA8bWF0emVAYnJhdW5pcy5kZT4gd3JvdGU6Cj4+
IEhhdmluZyB0aG91Z2ggYWJvdXQgdGhpcyBzb21lIG1vcmUgSSB0aGluayBvcHRpbWl6aW5nCj4+
IAo+PiAoeCsxID4geCkgPD0+IHRydWUKPj4gCj4+IGFuZCBhdCB0aGUgc2FtZSB0aW1lIG1vZGVs
aW5nIHVuZGVmaW5lZCBiZWhhdmlvciBhcyBhIHBvc2lvbiB2YWx1ZSBpcyBpbXBvc3NpYmxlLiBU
aGlzIGlzIGJlY2F1c2Ugd2UgYWxzbyB3YW50IHRoZSBmb2xsb3dpbmcgcnVsZToKPj4gCj4+ICh4
ID4gSU5UX01BWCkgPD0+IGZhbHNlCj4+IAo+PiBOb3cgaWYgcG9pc29uIGlzIGEgdmFsdWUsIHRo
ZW4gdGhlIHNlY29uZCByZXBsYWNlbWVudCB0ZWxscyB1cyAocG9pc29uID4gSU5UX01BWCkgPT0g
ZmFsc2Ugd2hpY2ggY29udHJhZGljdHMgdGhlIGZpcnN0IHJ1bGUuCj4+IAo+PiAKPj4gCj4+IFRo
ZSBvbmx5IHdheSBvdXQgb2YgdGhpcyB3aGlsZSBzdGlsbCBhbGxvd2luZyAoeCsxPngpPD0+dHJ1
ZSBJIGNhbiBzZWUgYXQgdGhlIG1vbWVudCBpcyBkZWZpbmluZyB0aGF0IGFkZCBuc3cgZG9lcyBw
cm9kdWNlIGFjdHVhbCB1bmRlZmluZWQgYmVoYXZpb3IgYWxsb3dpbmcgdXMgdG8g4oCcZnJlZWx5
IHJld3JpdGUiIHRoZSBmb2xsb3dpbmcgPiB0byB0cnVlIGluIHRoZSBVQiBjYXNlcy4gT2YgY291
cnNlIGhhdmluZyBhZGQgcHJvZHVjZSBhY3R1YWwgdW5kZWZpbmVkIGJlaGF2aW91ciBncmVhdGx5
IGxpbWl0cyB1cyBpbiB0aGUgd2F5IHdlIGNhbiBhY3R1YWxseSBtb3ZlIHRoZSBpbnN0cnVjdGlv
biBhcm91bmQgd2l0aG91dCBjaGFuZ2luZyBwcm9ncmFtIHNlbWFudGljcy4KPj4gCj4+IFRoZSBv
bmx5IHdheSBhbGxvd2luZyBtb3ZpbmcgaW5zdHJ1Y3Rpb25zIGFuZCBoYXZpbmcgYWRkIHByb2R1
Y2UgcmVhbCBVQiBJIGNhbiBzZWUgaXMgdGhhdCBhcyBzb29uIGFzIHdlIHN0YXJ0IG1vdmluZyBp
bnN0cnVjdGlvbnMgYXJvdW5kIChzcGVjaWZpY2FsbHkgbW92aW5nIHRoZSBhZGQgdG8gYSBwbGFj
ZSBpdCBkb2VzIG5vdCBkb21pbmF0ZSBvciBtb3ZpbmcgYW55IG90aGVyIGluc3RydWN0aW9uIG92
ZXIgdGhlIGFkZCkgd2UgY2hhbmdlIHRoZSBhZGQgdG8gYW4gaW5zdHJ1Y3Rpb24gdGhhdCBkb2Vz
IG5vdCBwcm9kdWNlIHJlYWwgVUIgYW55bW9yZTsgc29tZXRoaW5nIGxpa2UgYWRkIHN3dSA9IOKA
nGFkZCBzaWduZWQgd3JhcCBnaXZlcyB1bmRlZuKAnS4uLgo+PiAKPj4gLSBNYXR0aGlhcwo+PiAK
Pj4+PiBPbiBKYW4gMjksIDIwMTUsIGF0IDExOjI5IEFNLCBTYW5qb3kgRGFzIDxzYW5qb3lAcGxh
eWluZ3dpdGhwb2ludGVycy5jb20+IHdyb3RlOgo+Pj4+IAo+Pj4+IEkndmUgYmVlbiBkaXNjdXNz
aW5nIGEgbW9kZWwgd2l0aCBEYXZpZCB0aGF0IG1pZ2h0IHN0ZWVyIHBvaXNvbiBiYWNrIHRvd2Fy
ZHMKPj4+PiBzb21ldGhpbmcgdGhhdCBzaW1wbHkgc3VwcG9ydHMgYWxnZWJyYWljIHNpbXBsaWZp
Y2F0aW9uLiBJZiB3ZSBoYXZlIGEgbWF0aAo+Pj4+IG9wZXJhdGlvbiB0aGF0IGNhbm5vdCB3cmFw
LCB0aGVuIGl0IG5vdGlvbmFsbHkgcHJvZHVjZXMgYXMgbWFueSBiaXRzIG9mCj4+Pj4gdW5kZWYg
YXMgdGhlIG9wZXJhdGlvbiBjb3VsZCBwb3NzaWJseSBwcm9kdWNlLiBGb3IgZXhhbXBsZSwgImFk
ZCBuc3cgaTgiIGNhbgo+Pj4+IHByb2R1Y2UgYW4gaTkgdW5kZWYsIGFuZCAibXVsIG5zdyBpOCIg
Y2FuIHByb2R1Y2UgYW4gdW5kZWZpbmVkIDE2IGJpdAo+Pj4+IGJpdHBhdHRlcm4uIFRoaXMgaXMg
c3Ryb25nIGVub3VnaCB0byBkbyB0aGluZ3MgbGlrZSAiYSArIDEgPiBhICAtLT4gIHRydWUiLAo+
Pj4+IGJlY2F1c2Ugb24gb3ZlcmZsb3cgb2YgImEgKyAxIiB3ZSBjYW4gY2hvb3NlIGFuIHBvaXNv
biB2YWx1ZSBvZiAiTUFYX0lOVCArCj4+Pj4gMSIsIGV2ZW4gdGhvdWdoIHRoYXQgaXMgbm90IGEg
dmFsaWQgaTggYml0IHBhdHRlcm4uCj4+Pj4gCj4+Pj4gU28sIGEgc2hvcnQgdmVyc2lvbiB3b3Vs
ZCBiZSB0aGF0IHBvaXNvbiBpcyBsaWtlIHVuZGVmLCBleGNlcHQgeW91IGdldCB0bwo+Pj4+IGlu
Y2x1ZGUgdGhlIG92ZXJmbG93IGJpdHMgb2YgdGhlIGNvbXB1dGF0aW9uIGluIHlvdXIgdW5kZWYg
dmFsdWUuCj4+PiAKPj4+IEkgIHN1c3BlY3QgaXQgd2lsbCBiZSBoYXJkIHRvIGp1c3RpZnkgcmVn
Mm1lbSBpcyBtZWFuaW5nIHByZXNlcnZpbmcgaW4KPj4+IHRoaXMgc2NoZW1lLiAgQnV0IGlmIHRo
aXMgY2FuIGJlIG1hZGUgdG8gd29yaywgdGhlbiBJIGFncmVlIHRoYXQgdGhpcwo+Pj4gaXMgdGhl
IHJpZ2h0IHRoaW5nIHRvIGRvIC0tIGFuIGkzMiBwb2lzb24gZWZmZWN0aXZlbHkgaGFzIHRoZQo+
Pj4gc2VtYW50aWNzIG9mIGEgd2lkZXIgdHlwZSwgYW5kIGl0IG1ha2VzIHNlbnNlIHRvIGJlIGV4
cGxpY2l0IGluIHRoYXQuCj4+PiAKPj4+IC0tIFNhbmpveQo+Pj4gX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX18KPj4+IExMVk0gRGV2ZWxvcGVycyBtYWlsaW5n
IGxpc3QKPj4+IExMVk1kZXZAY3MudWl1Yy5lZHUgICAgICAgICBodHRwOi8vbGx2bS5jcy51aXVj
LmVkdQo+Pj4gaHR0cDovL2xpc3RzLmNzLnVpdWMuZWR1L21haWxtYW4vbGlzdGluZm8vbGx2bWRl
dgo+IAo+IF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCj4g
TExWTSBEZXZlbG9wZXJzIG1haWxpbmcgbGlzdAo+IExMVk1kZXZAY3MudWl1Yy5lZHUgICAgICAg
ICBodHRwOi8vbGx2bS5jcy51aXVjLmVkdQo+IGh0dHA6Ly9saXN0cy5jcy51aXVjLmVkdS9tYWls
bWFuL2xpc3RpbmZvL2xsdm1kZXYKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fCkxMVk0gRGV2ZWxvcGVycyBtYWlsaW5nIGxpc3QKTExWTWRldkBjcy51aXVj
LmVkdSAgICAgICAgIGh0dHA6Ly9sbHZtLmNzLnVpdWMuZWR1Cmh0dHA6Ly9saXN0cy5jcy51aXVj
LmVkdS9tYWlsbWFuL2xpc3RpbmZvL2xsdm1kZXYK

From llvmdev-bounces@cs.uiuc.edu Thu Jan 29 23:08:27 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.6 required=5.0 tests=HK_RANDOM_ENVFROM autolearn=no
	version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id BE9D765019E;
	Thu, 29 Jan 2015 23:08:27 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Thu, 29 Jan 2015 23:08:27 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0U66KKX010466;
	Fri, 30 Jan 2015 00:06:20 -0600
Received: from engr-mail-prod.engr.illinois.edu
	(engr-mail-prod.engr.illinois.edu [192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0U66J4A010451
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Fri, 30 Jan 2015 00:06:19 -0600
Received: from pps05.cites.illinois.edu ([192.17.82.72])
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <sanjoy@playingwithpointers.com>)
	id 1YH4ih-0000iZ-5y
	for llvmdev@cs.uiuc.edu; Fri, 30 Jan 2015 00:06:19 -0600
Received: from mail-wi0-f170.google.com (mail-wi0-f170.google.com
	[209.85.212.170])
	by pps05.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0U66C2k024279
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Fri, 30 Jan 2015 00:06:13 -0600
Received: by mail-wi0-f170.google.com with SMTP id bs8so805180wib.1
	for <llvmdev@cs.uiuc.edu>; Thu, 29 Jan 2015 22:06:12 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:mime-version:in-reply-to:references:from:date
	:message-id:subject:to:cc:content-type:content-transfer-encoding;
	bh=FubxAWXCKwKPV8fxt4a6+/ENFZ7LEp8NVXQy9drLvKg=;
	b=dz1yx69rm9GVAhS4OSK7HlOPqxod8nR0f2EqBB+XEC/sAPRXFec54T/z2CP4lUD+1y
	KsytOlU2wjEux6dICDgh3f51XGv8Iaxlc6LwLSnHMTKFV/EtBOyLAeF36pVnBr/4o0yb
	KJw0/Dm1c4fGHV59udAVDLyLXnLBh8SnwGjoS1k32qcIZLMPSaIaSjVzzn5973857lwX
	A/qWIJ/Qi7nixNTPdocZEQviQe+ZVFmxHni8yqICq/KpZg/7f1gAd5ZtPY6G2CsxyCvd
	lDVV23yBS5Uy1i7oEfTFXdepGSUkM0nt0/5mYbEiB8T903+OrkOBAVSJWJubCLh+K5EZ
	bj5Q==
X-Gm-Message-State: ALoCoQlW4+DOchgWh2VGF6FME5dPT79zskN26r1lTH9CK6ETUc6vxljixhJPCpm9LHV5gsdCXc12
X-Received: by 10.180.205.163 with SMTP id lh3mr1407168wic.63.1422597972300;
	Thu, 29 Jan 2015 22:06:12 -0800 (PST)
MIME-Version: 1.0
Received: by 10.216.76.72 with HTTP; Thu, 29 Jan 2015 22:05:52 -0800 (PST)
X-Originating-IP: [2601:9:4980:b60:d16d:e6cf:17fc:7005]
In-Reply-To: <F55205AD-CC03-4E2B-96DE-AFE285518CD2@braunis.de>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>
	<CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmail.com>
	<54C9BCB8.8040904@philipreames.com>
	<CACs=tyJoP9Ht87xWBrW37Tf5__vWcMwB2r3hVhBfdAdntfOhXw@mail.gmail.com>
	<CAMiUf7fzRVfBoKc14pVLv1WvoCqC0=yy983q_xuacyk-sDEJmQ@mail.gmail.com>
	<FF44B6AB-3A49-4774-B807-6073DC04A304@braunis.de>
	<CAMiUf7c1YzBNoScRkPMDzN_juqrZ56vS4DOPMgezBWLLzYRdbQ@mail.gmail.com>
	<F55205AD-CC03-4E2B-96DE-AFE285518CD2@braunis.de>
From: Sanjoy Das <sanjoy@playingwithpointers.com>
Date: Thu, 29 Jan 2015 22:05:52 -0800
Message-ID: <CAMiUf7f+iUXRr7P1KyQOKVXLNT=y8hevTAh=udVeHBEJV_9Hnw@mail.gmail.com>
To: Matthias Braun <matze@braunis.de>
X-MIME-Autoconverted: from quoted-printable to 8bit by
	dcs-maillist2.engr.illinois.edu id t0U66J4A010451
Cc: Nuno Lopes <nuno.lopes@ist.utl.pt>, John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: O

T24gVGh1LCBKYW4gMjksIDIwMTUgYXQgMTA6MDEgUE0sIE1hdHRoaWFzIEJyYXVuIDxtYXR6ZUBi
cmF1bmlzLmRlPiB3cm90ZToKPiBCdXQKPiAoUG9pc29uID4gSU5UX01BWCkgPD0+IHBvaXNvbgo+
IGNvbnRyYWRpY3RzCj4gKFggPiBJTlRfTUFYKSA8PT4gZmFsc2UKPgo+IGFuZCBJIGRvbid0IHRo
aW5rIHlvdSB3YW50IHRvIGFiYW5kb24gdGhlIHNlY29uZCBydWxlIGp1c3QgYmVjYXVzZSB4IG1p
Z2h0IGJlIHBvaXNvbi4KCk1heWJlIHdlIGNvdWxkIGRlZmluZSBwb2lzb24gaW4gc3VjaCBhIHdh
eSB0aGF0IGl0IGlzIHNhZmUgdG8gcHJldGVuZAppdCAiaXMiIGZhbHNlLCBhcyBwZXIgb3VyIGNv
bnZlbmllbmNlLiAgSW4gdGhpcyBzZW5zZSwgY291bGQgYmUKZGVmaW5lZCB0byBiZSB2ZXJ5IHNp
bWlsYXIgdG8gdW5kZWYuCgotLSBTYW5qb3kKCj4KPiAtIE1hdHRoaWFzCj4KPj4gT24gSmFuIDI5
LCAyMDE1LCBhdCA5OjQzIFBNLCBTYW5qb3kgRGFzIDxzYW5qb3lAcGxheWluZ3dpdGhwb2ludGVy
cy5jb20+IHdyb3RlOgo+Pgo+PiBPbmUgd2F5IGFyb3VuZCB0aGlzIGlzIHRvIHNheSB0aGF0IHRo
ZXJlIGFyZSBzb21lIHNwZWNpYWwKPj4gaW5zdHJ1Y3Rpb25zLCBpY21wLCBzZXh0IGFuZCB6ZXh0
IHdoaWNoIHByb2R1Y2UgYSB2YWx1ZSBzb2xlbHkKPj4gY29tcG9zZWQgb2YgcG9pc29uIGJpdHMg
aWYgYW55IG9mIHRoZWlyIGlucHV0IGJpdHMgaXMgcG9pc29uLiAgU28KPj4gYDxwb2lzb24+IGlj
bXAgWGAgaXMgcG9pc29uIGZvciBhbnkgdmFsdWUgb2YgWCwgaW5jbHVkaW5nIElOVF9NQVguCj4+
IFRoaXMgaXMgb25lIHdheSBwb2lzb24gY291bGQgYmUgZnVuZGFtZW50YWxseSBkaWZmZXJlbnQg
ZnJvbSB1bmRlZi4KPj4KPj4gLS0gU2Fuam95Cj4+Cj4+PiBPbiBUaHUsIEphbiAyOSwgMjAxNSBh
dCA4OjA1IFBNLCBNYXR0aGlhcyBCcmF1biA8bWF0emVAYnJhdW5pcy5kZT4gd3JvdGU6Cj4+PiBI
YXZpbmcgdGhvdWdoIGFib3V0IHRoaXMgc29tZSBtb3JlIEkgdGhpbmsgb3B0aW1pemluZwo+Pj4K
Pj4+ICh4KzEgPiB4KSA8PT4gdHJ1ZQo+Pj4KPj4+IGFuZCBhdCB0aGUgc2FtZSB0aW1lIG1vZGVs
aW5nIHVuZGVmaW5lZCBiZWhhdmlvciBhcyBhIHBvc2lvbiB2YWx1ZSBpcyBpbXBvc3NpYmxlLiBU
aGlzIGlzIGJlY2F1c2Ugd2UgYWxzbyB3YW50IHRoZSBmb2xsb3dpbmcgcnVsZToKPj4+Cj4+PiAo
eCA+IElOVF9NQVgpIDw9PiBmYWxzZQo+Pj4KPj4+IE5vdyBpZiBwb2lzb24gaXMgYSB2YWx1ZSwg
dGhlbiB0aGUgc2Vjb25kIHJlcGxhY2VtZW50IHRlbGxzIHVzIChwb2lzb24gPiBJTlRfTUFYKSA9
PSBmYWxzZSB3aGljaCBjb250cmFkaWN0cyB0aGUgZmlyc3QgcnVsZS4KPj4+Cj4+Pgo+Pj4KPj4+
IFRoZSBvbmx5IHdheSBvdXQgb2YgdGhpcyB3aGlsZSBzdGlsbCBhbGxvd2luZyAoeCsxPngpPD0+
dHJ1ZSBJIGNhbiBzZWUgYXQgdGhlIG1vbWVudCBpcyBkZWZpbmluZyB0aGF0IGFkZCBuc3cgZG9l
cyBwcm9kdWNlIGFjdHVhbCB1bmRlZmluZWQgYmVoYXZpb3IgYWxsb3dpbmcgdXMgdG8g4oCcZnJl
ZWx5IHJld3JpdGUiIHRoZSBmb2xsb3dpbmcgPiB0byB0cnVlIGluIHRoZSBVQiBjYXNlcy4gT2Yg
Y291cnNlIGhhdmluZyBhZGQgcHJvZHVjZSBhY3R1YWwgdW5kZWZpbmVkIGJlaGF2aW91ciBncmVh
dGx5IGxpbWl0cyB1cyBpbiB0aGUgd2F5IHdlIGNhbiBhY3R1YWxseSBtb3ZlIHRoZSBpbnN0cnVj
dGlvbiBhcm91bmQgd2l0aG91dCBjaGFuZ2luZyBwcm9ncmFtIHNlbWFudGljcy4KPj4+Cj4+PiBU
aGUgb25seSB3YXkgYWxsb3dpbmcgbW92aW5nIGluc3RydWN0aW9ucyBhbmQgaGF2aW5nIGFkZCBw
cm9kdWNlIHJlYWwgVUIgSSBjYW4gc2VlIGlzIHRoYXQgYXMgc29vbiBhcyB3ZSBzdGFydCBtb3Zp
bmcgaW5zdHJ1Y3Rpb25zIGFyb3VuZCAoc3BlY2lmaWNhbGx5IG1vdmluZyB0aGUgYWRkIHRvIGEg
cGxhY2UgaXQgZG9lcyBub3QgZG9taW5hdGUgb3IgbW92aW5nIGFueSBvdGhlciBpbnN0cnVjdGlv
biBvdmVyIHRoZSBhZGQpIHdlIGNoYW5nZSB0aGUgYWRkIHRvIGFuIGluc3RydWN0aW9uIHRoYXQg
ZG9lcyBub3QgcHJvZHVjZSByZWFsIFVCIGFueW1vcmU7IHNvbWV0aGluZyBsaWtlIGFkZCBzd3Ug
PSDigJxhZGQgc2lnbmVkIHdyYXAgZ2l2ZXMgdW5kZWbigJ0uLi4KPj4+Cj4+PiAtIE1hdHRoaWFz
Cj4+Pgo+Pj4+PiBPbiBKYW4gMjksIDIwMTUsIGF0IDExOjI5IEFNLCBTYW5qb3kgRGFzIDxzYW5q
b3lAcGxheWluZ3dpdGhwb2ludGVycy5jb20+IHdyb3RlOgo+Pj4+Pgo+Pj4+PiBJJ3ZlIGJlZW4g
ZGlzY3Vzc2luZyBhIG1vZGVsIHdpdGggRGF2aWQgdGhhdCBtaWdodCBzdGVlciBwb2lzb24gYmFj
ayB0b3dhcmRzCj4+Pj4+IHNvbWV0aGluZyB0aGF0IHNpbXBseSBzdXBwb3J0cyBhbGdlYnJhaWMg
c2ltcGxpZmljYXRpb24uIElmIHdlIGhhdmUgYSBtYXRoCj4+Pj4+IG9wZXJhdGlvbiB0aGF0IGNh
bm5vdCB3cmFwLCB0aGVuIGl0IG5vdGlvbmFsbHkgcHJvZHVjZXMgYXMgbWFueSBiaXRzIG9mCj4+
Pj4+IHVuZGVmIGFzIHRoZSBvcGVyYXRpb24gY291bGQgcG9zc2libHkgcHJvZHVjZS4gRm9yIGV4
YW1wbGUsICJhZGQgbnN3IGk4IiBjYW4KPj4+Pj4gcHJvZHVjZSBhbiBpOSB1bmRlZiwgYW5kICJt
dWwgbnN3IGk4IiBjYW4gcHJvZHVjZSBhbiB1bmRlZmluZWQgMTYgYml0Cj4+Pj4+IGJpdHBhdHRl
cm4uIFRoaXMgaXMgc3Ryb25nIGVub3VnaCB0byBkbyB0aGluZ3MgbGlrZSAiYSArIDEgPiBhICAt
LT4gIHRydWUiLAo+Pj4+PiBiZWNhdXNlIG9uIG92ZXJmbG93IG9mICJhICsgMSIgd2UgY2FuIGNo
b29zZSBhbiBwb2lzb24gdmFsdWUgb2YgIk1BWF9JTlQgKwo+Pj4+PiAxIiwgZXZlbiB0aG91Z2gg
dGhhdCBpcyBub3QgYSB2YWxpZCBpOCBiaXQgcGF0dGVybi4KPj4+Pj4KPj4+Pj4gU28sIGEgc2hv
cnQgdmVyc2lvbiB3b3VsZCBiZSB0aGF0IHBvaXNvbiBpcyBsaWtlIHVuZGVmLCBleGNlcHQgeW91
IGdldCB0bwo+Pj4+PiBpbmNsdWRlIHRoZSBvdmVyZmxvdyBiaXRzIG9mIHRoZSBjb21wdXRhdGlv
biBpbiB5b3VyIHVuZGVmIHZhbHVlLgo+Pj4+Cj4+Pj4gSSAgc3VzcGVjdCBpdCB3aWxsIGJlIGhh
cmQgdG8ganVzdGlmeSByZWcybWVtIGlzIG1lYW5pbmcgcHJlc2VydmluZyBpbgo+Pj4+IHRoaXMg
c2NoZW1lLiAgQnV0IGlmIHRoaXMgY2FuIGJlIG1hZGUgdG8gd29yaywgdGhlbiBJIGFncmVlIHRo
YXQgdGhpcwo+Pj4+IGlzIHRoZSByaWdodCB0aGluZyB0byBkbyAtLSBhbiBpMzIgcG9pc29uIGVm
ZmVjdGl2ZWx5IGhhcyB0aGUKPj4+PiBzZW1hbnRpY3Mgb2YgYSB3aWRlciB0eXBlLCBhbmQgaXQg
bWFrZXMgc2Vuc2UgdG8gYmUgZXhwbGljaXQgaW4gdGhhdC4KPj4+Pgo+Pj4+IC0tIFNhbmpveQo+
Pj4+IF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCj4+Pj4g
TExWTSBEZXZlbG9wZXJzIG1haWxpbmcgbGlzdAo+Pj4+IExMVk1kZXZAY3MudWl1Yy5lZHUgICAg
ICAgICBodHRwOi8vbGx2bS5jcy51aXVjLmVkdQo+Pj4+IGh0dHA6Ly9saXN0cy5jcy51aXVjLmVk
dS9tYWlsbWFuL2xpc3RpbmZvL2xsdm1kZXYKPj4KPj4gX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX18KPj4gTExWTSBEZXZlbG9wZXJzIG1haWxpbmcgbGlzdAo+
PiBMTFZNZGV2QGNzLnVpdWMuZWR1ICAgICAgICAgaHR0cDovL2xsdm0uY3MudWl1Yy5lZHUKPj4g
aHR0cDovL2xpc3RzLmNzLnVpdWMuZWR1L21haWxtYW4vbGlzdGluZm8vbGx2bWRldgoKX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KTExWTSBEZXZlbG9wZXJz
IG1haWxpbmcgbGlzdApMTFZNZGV2QGNzLnVpdWMuZWR1ICAgICAgICAgaHR0cDovL2xsdm0uY3Mu
dWl1Yy5lZHUKaHR0cDovL2xpc3RzLmNzLnVpdWMuZWR1L21haWxtYW4vbGlzdGluZm8vbGx2bWRl
dgo=

From llvmdev-bounces@cs.uiuc.edu Thu Jan 29 23:17:59 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.6 required=5.0 tests=HK_RANDOM_ENVFROM autolearn=no
	version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id 1964065019E;
	Thu, 29 Jan 2015 23:17:59 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Thu, 29 Jan 2015 23:17:58 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0U6FLfY010819;
	Fri, 30 Jan 2015 00:15:21 -0600
Received: from engr-mail-prod.engr.illinois.edu
	(engr-mail-prod.engr.illinois.edu [192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0U6FJw8010813
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Fri, 30 Jan 2015 00:15:19 -0600
Received: from pps03.cites.illinois.edu ([192.17.82.70])
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <sanjoy@playingwithpointers.com>)
	id 1YH4rO-0000w1-W3
	for llvmdev@cs.uiuc.edu; Fri, 30 Jan 2015 00:15:19 -0600
Received: from mail-wg0-f50.google.com (mail-wg0-f50.google.com [74.125.82.50])
	by pps03.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0U6F6vU016810
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Fri, 30 Jan 2015 00:15:08 -0600
Received: by mail-wg0-f50.google.com with SMTP id b13so24964173wgh.9
	for <llvmdev@cs.uiuc.edu>; Thu, 29 Jan 2015 22:15:06 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:mime-version:in-reply-to:references:from:date
	:message-id:subject:to:cc:content-type:content-transfer-encoding;
	bh=y2doRRNx21UVaKosed0rJdA580dtWbxCEH7h6AGbPUg=;
	b=F2wUsCtV6s1GprhqdA5ceQqTNBr+00dymjTS/6XdQtzNrgoch94MURjmb6AR87+eWk
	274CxGMwIl+6sBeyUj9bp2JOaK9ooPR8iq2p7EKlHbXieWqnjEn2H6OKOkm7+UwyxAPD
	ozuXAFmKjk9VnM6AcXqDPHX3e60DJhf0+vlDXryDbN4QkhH0MXJjsNZ1aMety/6nzONI
	mdxxylX6Tm22VCKJ5fIQafWM6v+fZOFmrk1bPoMmr2KxYTkAL9BPP1fMYE6LP1Q6vGKM
	xFcp8mUBJKo7LOtckV6Yygut8BJu3So3GK3gm7mhgE04f1RfQGGr8UAZ4XXYj2hi4VkZ
	9c0Q==
X-Gm-Message-State: ALoCoQl1kaVGGR7r6VKW4gkiCsxYX1aXLIuM6T3ZGLblOa+XGwRONZohfRy9X9Z7ZomhMeCwOyzA
X-Received: by 10.180.81.98 with SMTP id z2mr1611034wix.40.1422598506181; Thu,
	29 Jan 2015 22:15:06 -0800 (PST)
MIME-Version: 1.0
Received: by 10.216.76.72 with HTTP; Thu, 29 Jan 2015 22:14:45 -0800 (PST)
X-Originating-IP: [2601:9:4980:b60:d16d:e6cf:17fc:7005]
In-Reply-To: <CAMiUf7f+iUXRr7P1KyQOKVXLNT=y8hevTAh=udVeHBEJV_9Hnw@mail.gmail.com>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>
	<CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmail.com>
	<54C9BCB8.8040904@philipreames.com>
	<CACs=tyJoP9Ht87xWBrW37Tf5__vWcMwB2r3hVhBfdAdntfOhXw@mail.gmail.com>
	<CAMiUf7fzRVfBoKc14pVLv1WvoCqC0=yy983q_xuacyk-sDEJmQ@mail.gmail.com>
	<FF44B6AB-3A49-4774-B807-6073DC04A304@braunis.de>
	<CAMiUf7c1YzBNoScRkPMDzN_juqrZ56vS4DOPMgezBWLLzYRdbQ@mail.gmail.com>
	<F55205AD-CC03-4E2B-96DE-AFE285518CD2@braunis.de>
	<CAMiUf7f+iUXRr7P1KyQOKVXLNT=y8hevTAh=udVeHBEJV_9Hnw@mail.gmail.com>
From: Sanjoy Das <sanjoy@playingwithpointers.com>
Date: Thu, 29 Jan 2015 22:14:45 -0800
Message-ID: <CAMiUf7cD2BS33D_6RGz8eVBzJMD_C_Xgi7TR==PyQUTucCFUeQ@mail.gmail.com>
To: Matthias Braun <matze@braunis.de>
X-MIME-Autoconverted: from quoted-printable to 8bit by
	dcs-maillist2.engr.illinois.edu id t0U6FJw8010813
Cc: Nuno Lopes <nuno.lopes@ist.utl.pt>, John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: O

SGVyZSdzIGFuIGlkZWEgZm9yIGEgc2xpZ2h0bHkgdW51c3VhbCBmcmFtZXdvcmsgZm9yIHBvaXNv
biBzZW1hbnRpY3M6CndlIGRvIGl0IGluIHR3byBzdGVwcyAtLQoKCjEuIGZvciBldmVyeSBiaXQg
aW4gdGhlIHByb2dyYW0sIHdlIGRlZmluZSBhIHNlY29uZCAic2hhZG93IGJpdCIsCmlzLXBvaXNv
bi4gIFdlIGRlZmluZSB0aGUgc2VtYW50aWNzIG9mIExMVk0gSVIgdXNpbmcgdGhpcyBpcy1wb2lz
b24KcmVsYXRpb24uICBTbywgZm9yIGluc3RhbmNlLCB3ZSBjb3VsZCBzYXkgaWYgdGhlcmUgaXMg
YSBiaXQgJ2InaW4KYWRkcmVzcyAnYScgc3VjaCB0aGF0IGlmIGlzLXBvaXNvblsnYiddLCB0aGVu
ICJzdG9yZSBYIHRvICdhJyIgaXMKdW5kZWZpbmVkIGJlaGF2aW9yLgoKMi4gd2UgcHJvdmUgdGhh
dCB0aGVyZSBpcyBubyBuZWVkIHRvIHRyYWNrIGlzLXBvaXNvbiBmb3IgYQp3ZWxsLWRlZmluZWQg
cHJvZ3JhbS4gIElPVywgYW55IHByb2dyYW0gd2hvc2UgZXZhbHVhdGlvbiB3aWxsIGFjdHVhbGx5
CnJlcXVpcmUgdXMgdG8gZG8gdGhlIGJvb2sta2VlcGluZyBmb3IgaXMtcG9pc29uIHdpbGwgZXZl
bnR1YWxseSBydW4KaW50byB1bmRlZmluZWQgYmVoYXZpb3IuCgpJIHRoaW5rIHN1Y2ggYW4gYXBw
cm9hY2ggd2lsbCBleHBsaWNpdGx5IGFkZHJlc3MgdGhlIGlzc3VlIHRoYXQgd2UncmUKdXNpbmcg
YW4gTiBiaXQgdmFsdWUgdG8gdHJhY2sgMl5OKzEgcG9zc2liaWxpdGllcy4gIEFuZCB0aGlzIGlz
IGFsc28gYQpzYW5pdHkgY2hlY2sgLS0gc2luY2UgdGhlIGlzLXBvaXNvbiByZWxhdGlvbiBpcyBj
bGVhcmx5IG1hZGUgdXAgYW5kCmRvZXMgbm90ICpyZWFsbHkgZXhpc3QqLCBpZiB3ZSBjYW5ub3Qg
cHJvdmUgKDIpIHRoZW4gd2UgZGlkIHNvbWV0aGluZwp3cm9uZyBpbiBzcGVjaWZ5aW5nIHN0ZXAg
KDEpLgoKLS0gU2Fuam95CgoKT24gVGh1LCBKYW4gMjksIDIwMTUgYXQgMTA6MDUgUE0sIFNhbmpv
eSBEYXMKPHNhbmpveUBwbGF5aW5nd2l0aHBvaW50ZXJzLmNvbT4gd3JvdGU6Cj4gT24gVGh1LCBK
YW4gMjksIDIwMTUgYXQgMTA6MDEgUE0sIE1hdHRoaWFzIEJyYXVuIDxtYXR6ZUBicmF1bmlzLmRl
PiB3cm90ZToKPj4gQnV0Cj4+IChQb2lzb24gPiBJTlRfTUFYKSA8PT4gcG9pc29uCj4+IGNvbnRy
YWRpY3RzCj4+IChYID4gSU5UX01BWCkgPD0+IGZhbHNlCj4+Cj4+IGFuZCBJIGRvbid0IHRoaW5r
IHlvdSB3YW50IHRvIGFiYW5kb24gdGhlIHNlY29uZCBydWxlIGp1c3QgYmVjYXVzZSB4IG1pZ2h0
IGJlIHBvaXNvbi4KPgo+IE1heWJlIHdlIGNvdWxkIGRlZmluZSBwb2lzb24gaW4gc3VjaCBhIHdh
eSB0aGF0IGl0IGlzIHNhZmUgdG8gcHJldGVuZAo+IGl0ICJpcyIgZmFsc2UsIGFzIHBlciBvdXIg
Y29udmVuaWVuY2UuICBJbiB0aGlzIHNlbnNlLCBjb3VsZCBiZQo+IGRlZmluZWQgdG8gYmUgdmVy
eSBzaW1pbGFyIHRvIHVuZGVmLgo+Cj4gLS0gU2Fuam95Cj4KPj4KPj4gLSBNYXR0aGlhcwo+Pgo+
Pj4gT24gSmFuIDI5LCAyMDE1LCBhdCA5OjQzIFBNLCBTYW5qb3kgRGFzIDxzYW5qb3lAcGxheWlu
Z3dpdGhwb2ludGVycy5jb20+IHdyb3RlOgo+Pj4KPj4+IE9uZSB3YXkgYXJvdW5kIHRoaXMgaXMg
dG8gc2F5IHRoYXQgdGhlcmUgYXJlIHNvbWUgc3BlY2lhbAo+Pj4gaW5zdHJ1Y3Rpb25zLCBpY21w
LCBzZXh0IGFuZCB6ZXh0IHdoaWNoIHByb2R1Y2UgYSB2YWx1ZSBzb2xlbHkKPj4+IGNvbXBvc2Vk
IG9mIHBvaXNvbiBiaXRzIGlmIGFueSBvZiB0aGVpciBpbnB1dCBiaXRzIGlzIHBvaXNvbi4gIFNv
Cj4+PiBgPHBvaXNvbj4gaWNtcCBYYCBpcyBwb2lzb24gZm9yIGFueSB2YWx1ZSBvZiBYLCBpbmNs
dWRpbmcgSU5UX01BWC4KPj4+IFRoaXMgaXMgb25lIHdheSBwb2lzb24gY291bGQgYmUgZnVuZGFt
ZW50YWxseSBkaWZmZXJlbnQgZnJvbSB1bmRlZi4KPj4+Cj4+PiAtLSBTYW5qb3kKPj4+Cj4+Pj4g
T24gVGh1LCBKYW4gMjksIDIwMTUgYXQgODowNSBQTSwgTWF0dGhpYXMgQnJhdW4gPG1hdHplQGJy
YXVuaXMuZGU+IHdyb3RlOgo+Pj4+IEhhdmluZyB0aG91Z2ggYWJvdXQgdGhpcyBzb21lIG1vcmUg
SSB0aGluayBvcHRpbWl6aW5nCj4+Pj4KPj4+PiAoeCsxID4geCkgPD0+IHRydWUKPj4+Pgo+Pj4+
IGFuZCBhdCB0aGUgc2FtZSB0aW1lIG1vZGVsaW5nIHVuZGVmaW5lZCBiZWhhdmlvciBhcyBhIHBv
c2lvbiB2YWx1ZSBpcyBpbXBvc3NpYmxlLiBUaGlzIGlzIGJlY2F1c2Ugd2UgYWxzbyB3YW50IHRo
ZSBmb2xsb3dpbmcgcnVsZToKPj4+Pgo+Pj4+ICh4ID4gSU5UX01BWCkgPD0+IGZhbHNlCj4+Pj4K
Pj4+PiBOb3cgaWYgcG9pc29uIGlzIGEgdmFsdWUsIHRoZW4gdGhlIHNlY29uZCByZXBsYWNlbWVu
dCB0ZWxscyB1cyAocG9pc29uID4gSU5UX01BWCkgPT0gZmFsc2Ugd2hpY2ggY29udHJhZGljdHMg
dGhlIGZpcnN0IHJ1bGUuCj4+Pj4KPj4+Pgo+Pj4+Cj4+Pj4gVGhlIG9ubHkgd2F5IG91dCBvZiB0
aGlzIHdoaWxlIHN0aWxsIGFsbG93aW5nICh4KzE+eCk8PT50cnVlIEkgY2FuIHNlZSBhdCB0aGUg
bW9tZW50IGlzIGRlZmluaW5nIHRoYXQgYWRkIG5zdyBkb2VzIHByb2R1Y2UgYWN0dWFsIHVuZGVm
aW5lZCBiZWhhdmlvciBhbGxvd2luZyB1cyB0byDigJxmcmVlbHkgcmV3cml0ZSIgdGhlIGZvbGxv
d2luZyA+IHRvIHRydWUgaW4gdGhlIFVCIGNhc2VzLiBPZiBjb3Vyc2UgaGF2aW5nIGFkZCBwcm9k
dWNlIGFjdHVhbCB1bmRlZmluZWQgYmVoYXZpb3VyIGdyZWF0bHkgbGltaXRzIHVzIGluIHRoZSB3
YXkgd2UgY2FuIGFjdHVhbGx5IG1vdmUgdGhlIGluc3RydWN0aW9uIGFyb3VuZCB3aXRob3V0IGNo
YW5naW5nIHByb2dyYW0gc2VtYW50aWNzLgo+Pj4+Cj4+Pj4gVGhlIG9ubHkgd2F5IGFsbG93aW5n
IG1vdmluZyBpbnN0cnVjdGlvbnMgYW5kIGhhdmluZyBhZGQgcHJvZHVjZSByZWFsIFVCIEkgY2Fu
IHNlZSBpcyB0aGF0IGFzIHNvb24gYXMgd2Ugc3RhcnQgbW92aW5nIGluc3RydWN0aW9ucyBhcm91
bmQgKHNwZWNpZmljYWxseSBtb3ZpbmcgdGhlIGFkZCB0byBhIHBsYWNlIGl0IGRvZXMgbm90IGRv
bWluYXRlIG9yIG1vdmluZyBhbnkgb3RoZXIgaW5zdHJ1Y3Rpb24gb3ZlciB0aGUgYWRkKSB3ZSBj
aGFuZ2UgdGhlIGFkZCB0byBhbiBpbnN0cnVjdGlvbiB0aGF0IGRvZXMgbm90IHByb2R1Y2UgcmVh
bCBVQiBhbnltb3JlOyBzb21ldGhpbmcgbGlrZSBhZGQgc3d1ID0g4oCcYWRkIHNpZ25lZCB3cmFw
IGdpdmVzIHVuZGVm4oCdLi4uCj4+Pj4KPj4+PiAtIE1hdHRoaWFzCj4+Pj4KPj4+Pj4+IE9uIEph
biAyOSwgMjAxNSwgYXQgMTE6MjkgQU0sIFNhbmpveSBEYXMgPHNhbmpveUBwbGF5aW5nd2l0aHBv
aW50ZXJzLmNvbT4gd3JvdGU6Cj4+Pj4+Pgo+Pj4+Pj4gSSd2ZSBiZWVuIGRpc2N1c3NpbmcgYSBt
b2RlbCB3aXRoIERhdmlkIHRoYXQgbWlnaHQgc3RlZXIgcG9pc29uIGJhY2sgdG93YXJkcwo+Pj4+
Pj4gc29tZXRoaW5nIHRoYXQgc2ltcGx5IHN1cHBvcnRzIGFsZ2VicmFpYyBzaW1wbGlmaWNhdGlv
bi4gSWYgd2UgaGF2ZSBhIG1hdGgKPj4+Pj4+IG9wZXJhdGlvbiB0aGF0IGNhbm5vdCB3cmFwLCB0
aGVuIGl0IG5vdGlvbmFsbHkgcHJvZHVjZXMgYXMgbWFueSBiaXRzIG9mCj4+Pj4+PiB1bmRlZiBh
cyB0aGUgb3BlcmF0aW9uIGNvdWxkIHBvc3NpYmx5IHByb2R1Y2UuIEZvciBleGFtcGxlLCAiYWRk
IG5zdyBpOCIgY2FuCj4+Pj4+PiBwcm9kdWNlIGFuIGk5IHVuZGVmLCBhbmQgIm11bCBuc3cgaTgi
IGNhbiBwcm9kdWNlIGFuIHVuZGVmaW5lZCAxNiBiaXQKPj4+Pj4+IGJpdHBhdHRlcm4uIFRoaXMg
aXMgc3Ryb25nIGVub3VnaCB0byBkbyB0aGluZ3MgbGlrZSAiYSArIDEgPiBhICAtLT4gIHRydWUi
LAo+Pj4+Pj4gYmVjYXVzZSBvbiBvdmVyZmxvdyBvZiAiYSArIDEiIHdlIGNhbiBjaG9vc2UgYW4g
cG9pc29uIHZhbHVlIG9mICJNQVhfSU5UICsKPj4+Pj4+IDEiLCBldmVuIHRob3VnaCB0aGF0IGlz
IG5vdCBhIHZhbGlkIGk4IGJpdCBwYXR0ZXJuLgo+Pj4+Pj4KPj4+Pj4+IFNvLCBhIHNob3J0IHZl
cnNpb24gd291bGQgYmUgdGhhdCBwb2lzb24gaXMgbGlrZSB1bmRlZiwgZXhjZXB0IHlvdSBnZXQg
dG8KPj4+Pj4+IGluY2x1ZGUgdGhlIG92ZXJmbG93IGJpdHMgb2YgdGhlIGNvbXB1dGF0aW9uIGlu
IHlvdXIgdW5kZWYgdmFsdWUuCj4+Pj4+Cj4+Pj4+IEkgIHN1c3BlY3QgaXQgd2lsbCBiZSBoYXJk
IHRvIGp1c3RpZnkgcmVnMm1lbSBpcyBtZWFuaW5nIHByZXNlcnZpbmcgaW4KPj4+Pj4gdGhpcyBz
Y2hlbWUuICBCdXQgaWYgdGhpcyBjYW4gYmUgbWFkZSB0byB3b3JrLCB0aGVuIEkgYWdyZWUgdGhh
dCB0aGlzCj4+Pj4+IGlzIHRoZSByaWdodCB0aGluZyB0byBkbyAtLSBhbiBpMzIgcG9pc29uIGVm
ZmVjdGl2ZWx5IGhhcyB0aGUKPj4+Pj4gc2VtYW50aWNzIG9mIGEgd2lkZXIgdHlwZSwgYW5kIGl0
IG1ha2VzIHNlbnNlIHRvIGJlIGV4cGxpY2l0IGluIHRoYXQuCj4+Pj4+Cj4+Pj4+IC0tIFNhbmpv
eQo+Pj4+PiBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwo+
Pj4+PiBMTFZNIERldmVsb3BlcnMgbWFpbGluZyBsaXN0Cj4+Pj4+IExMVk1kZXZAY3MudWl1Yy5l
ZHUgICAgICAgICBodHRwOi8vbGx2bS5jcy51aXVjLmVkdQo+Pj4+PiBodHRwOi8vbGlzdHMuY3Mu
dWl1Yy5lZHUvbWFpbG1hbi9saXN0aW5mby9sbHZtZGV2Cj4+Pgo+Pj4gX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KPj4+IExMVk0gRGV2ZWxvcGVycyBtYWls
aW5nIGxpc3QKPj4+IExMVk1kZXZAY3MudWl1Yy5lZHUgICAgICAgICBodHRwOi8vbGx2bS5jcy51
aXVjLmVkdQo+Pj4gaHR0cDovL2xpc3RzLmNzLnVpdWMuZWR1L21haWxtYW4vbGlzdGluZm8vbGx2
bWRldgoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KTExW
TSBEZXZlbG9wZXJzIG1haWxpbmcgbGlzdApMTFZNZGV2QGNzLnVpdWMuZWR1ICAgICAgICAgaHR0
cDovL2xsdm0uY3MudWl1Yy5lZHUKaHR0cDovL2xpc3RzLmNzLnVpdWMuZWR1L21haWxtYW4vbGlz
dGluZm8vbGx2bWRldgo=

From llvmdev-bounces@cs.uiuc.edu Thu Jan 29 23:58:52 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.7 required=5.0 tests=DKIM_ADSP_CUSTOM_MED,
	DKIM_SIGNED,HK_RANDOM_ENVFROM,HTML_MESSAGE,T_DKIM_INVALID autolearn=no
	version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id 381EC65019E;
	Thu, 29 Jan 2015 23:58:52 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Thu, 29 Jan 2015 23:58:51 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0U6naqS011887;
	Fri, 30 Jan 2015 00:49:36 -0600
Received: from engr-mail-prod.engr.illinois.edu
	(engr-mail-prod.engr.illinois.edu [192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0U6nYbl011881
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Fri, 30 Jan 2015 00:49:34 -0600
Received: from pps08.cites.illinois.edu ([192.17.82.103])
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <chandlerc@google.com>)
	id 1YH5OY-0002G1-NH
	for llvmdev@cs.uiuc.edu; Fri, 30 Jan 2015 00:49:34 -0600
Received: from mail-vc0-f176.google.com (mail-vc0-f176.google.com
	[209.85.220.176])
	by pps08.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0U6nScV007537
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Fri, 30 Jan 2015 00:49:29 -0600
Received: by mail-vc0-f176.google.com with SMTP id kv7so10332631vcb.7
	for <llvmdev@cs.uiuc.edu>; Thu, 29 Jan 2015 22:49:28 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=20120113;
	h=mime-version:in-reply-to:references:date:message-id:subject:from:to
	:cc:content-type;
	bh=NQ7Afzf/f2CXYoHv4xXvOEMjafeIJlBHI2NPm2GCxgo=;
	b=gIgR98IMvT0Q5Et2WjrbtMAzpNC1mmVvHH641LMpsPwoD1gTGmfddGlFAtadm0PHPr
	kKMSG+2jHzRReQyIHnP1eEL7muCq0h3CxSNCeLJSDkXCQrcy8EHsZCT58gVCXv2NuTAu
	KpBnXnDbTXG1rMjCelNAfFz9DMPPHS7qhDBlkquXtJFeD90304UH4lWtBoO7OS4w9ymi
	XuO9qtrOP1T5Sjsb5cV0BsS4uRPZNYZ1CMWhJM6SqiuTm+CSG60R84AtzDVGTxQQhKuo
	p6SSDKi1V6DdOhDGMNN+wufVhJ2zwcAN0xamOVDd8NOjq9JuLdDls7wJDG7Kq+bLX+bY
	4Slw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:mime-version:in-reply-to:references:date
	:message-id:subject:from:to:cc:content-type;
	bh=NQ7Afzf/f2CXYoHv4xXvOEMjafeIJlBHI2NPm2GCxgo=;
	b=LSP9ZI9mqABUriUylmCvXwEQdpfdpmWlRp14thhwldkr7dwpw0WqUwcLowPGfirVEi
	I8vR4F+OYGAIFSVPivs1+E6idbNCInjZLq8F+ExYjGVf3BRU+cXBQ3airhePIfdXh9g1
	aMSQHt4kTvOQL5stqFIc7yiP0Gv72+U+HeO5/Yih8HS6RsvLxmfuo0lxhsOEI4tKk8tf
	Ea7C91pbvU2MlaO8hnBeC+8jz+UZu0vRN1ThhxKtsOHF8J6g5u+RRzJaFdffCCIfrHyV
	Hp7X4ZBDbQTOjRBOcp3KiZBhr7/W0Fx042SsDkMV2lxqpAXhAaSowDa9taWqnxyjO03C
	q2LA==
X-Gm-Message-State: ALoCoQnCii+xc0+ZUmgzzrpWGIFYj73WcC4ufmyK2El1HjP6tOyhcqHRgX/hEb0N12oBjOIrcWnR
MIME-Version: 1.0
X-Received: by 10.52.146.115 with SMTP id tb19mr2118170vdb.69.1422600568361;
	Thu, 29 Jan 2015 22:49:28 -0800 (PST)
Received: by 10.52.34.230 with HTTP; Thu, 29 Jan 2015 22:49:28 -0800 (PST)
In-Reply-To: <CAMiUf7c1YzBNoScRkPMDzN_juqrZ56vS4DOPMgezBWLLzYRdbQ@mail.gmail.com>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>
	<CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmail.com>
	<54C9BCB8.8040904@philipreames.com>
	<CACs=tyJoP9Ht87xWBrW37Tf5__vWcMwB2r3hVhBfdAdntfOhXw@mail.gmail.com>
	<CAMiUf7fzRVfBoKc14pVLv1WvoCqC0=yy983q_xuacyk-sDEJmQ@mail.gmail.com>
	<FF44B6AB-3A49-4774-B807-6073DC04A304@braunis.de>
	<CAMiUf7c1YzBNoScRkPMDzN_juqrZ56vS4DOPMgezBWLLzYRdbQ@mail.gmail.com>
Date: Thu, 29 Jan 2015 22:49:28 -0800
Message-ID: <CAGCO0KhZjDRHSaiOLhhebQfYvP+wKsnFe_rDNz=s-EtpzU4Y=w@mail.gmail.com>
From: Chandler Carruth <chandlerc@google.com>
To: Sanjoy Das <sanjoy@playingwithpointers.com>
Cc: Nuno Lopes <nuno.lopes@ist.utl.pt>, Matthias Braun <matze@braunis.de>,
        John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: multipart/mixed; boundary="===============0688732343500199059=="
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: O

--===============0688732343500199059==
Content-Type: multipart/alternative; boundary=bcaec52d51bd890501050dd901bd

--bcaec52d51bd890501050dd901bd
Content-Type: text/plain; charset=UTF-8

On Thu, Jan 29, 2015 at 9:43 PM, Sanjoy Das <sanjoy@playingwithpointers.com>
wrote:

> One way around this is to say that there are some special
> instructions, icmp, sext and zext which produce a value solely
> composed of poison bits if any of their input bits is poison.  So
> `<poison> icmp X` is poison for any value of X, including INT_MAX.
> This is one way poison could be fundamentally different from undef.
>

So far, this is the model I like the best, but I do still have some concern.

The primary concern I have is that with this model, zext is no longer 100%
equivalent to anyext + mask. Much like you say, you *could* implement zext
that way, but once you convert them, the poison is lost.

Maybe that's OK though. I'm curious what others think. I haven't really had
enough time to fully explore this in my head.

--bcaec52d51bd890501050dd901bd
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">=
On Thu, Jan 29, 2015 at 9:43 PM, Sanjoy Das <span dir=3D"ltr">&lt;<a href=
=3D"mailto:sanjoy@playingwithpointers.com" target=3D"_blank">sanjoy@playing=
withpointers.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote"=
 style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><d=
iv id=3D":eda" class=3D"a3s" style=3D"overflow:hidden">One way around this =
is to say that there are some special<br>
instructions, icmp, sext and zext which produce a value solely<br>
composed of poison bits if any of their input bits is poison.=C2=A0 So<br>
`&lt;poison&gt; icmp X` is poison for any value of X, including INT_MAX.<br=
>
This is one way poison could be fundamentally different from undef.</div></=
blockquote></div><br>So far, this is the model I like the best, but I do st=
ill have some concern.</div><div class=3D"gmail_extra"><br></div><div class=
=3D"gmail_extra">The primary concern I have is that with this model, zext i=
s no longer 100% equivalent to anyext + mask. Much like you say, you *could=
* implement zext that way, but once you convert them, the poison is lost.</=
div><div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">Maybe t=
hat&#39;s OK though. I&#39;m curious what others think. I haven&#39;t reall=
y had enough time to fully explore this in my head.</div></div>

--bcaec52d51bd890501050dd901bd--

--===============0688732343500199059==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

_______________________________________________
LLVM Developers mailing list
LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev

--===============0688732343500199059==--

From llvmdev-bounces@cs.uiuc.edu Fri Jan 30 00:07:12 2015
Return-Path: <llvmdev-bounces@cs.uiuc.edu>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on rio.cs.utah.edu
X-Spam-Level: 
X-Spam-Status: No, score=0.7 required=5.0 tests=DKIM_ADSP_CUSTOM_MED,
	DKIM_SIGNED,HK_RANDOM_ENVFROM,HTML_MESSAGE,T_DKIM_INVALID autolearn=no
	version=3.3.2
X-Original-To: cas@cs.utah.edu
Delivered-To: cas@cs.utah.edu
Received: from mail-svr1.cs.utah.edu (localhost [127.0.0.1])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTP id EA6EE65019E;
	Fri, 30 Jan 2015 00:07:12 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (dcs-maillist2.engr.illinois.edu [130.126.112.106])
	by mail-svr1.cs.utah.edu (Postfix) with ESMTPS;
	Fri, 30 Jan 2015 00:07:12 -0700 (MST)
Received: from dcs-maillist2.engr.illinois.edu (localhost [127.0.0.1])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id t0U701lk012298;
	Fri, 30 Jan 2015 01:00:01 -0600
Received: from engr-mail-prod.engr.illinois.edu
	(engr-mail-prod.engr.illinois.edu [192.17.58.72])
	by dcs-maillist2.engr.illinois.edu (8.14.4/8.13.1) with ESMTP id
	t0U6xx98012279
	for <llvmdev@dcs-maillist.cs.uiuc.edu>; Fri, 30 Jan 2015 00:59:59 -0600
Received: from pps03.cites.illinois.edu ([192.17.82.70])
	by engr-mail-prod.engr.illinois.edu with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.72) (envelope-from <chandlerc@google.com>)
	id 1YH5Yd-0002UL-Ol
	for llvmdev@cs.uiuc.edu; Fri, 30 Jan 2015 00:59:59 -0600
Received: from mail-vc0-f171.google.com (mail-vc0-f171.google.com
	[209.85.220.171])
	by pps03.cites.illinois.edu (8.14.5/8.14.5) with ESMTP id
	t0U6xrwr031013
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <llvmdev@cs.uiuc.edu>; Fri, 30 Jan 2015 00:59:54 -0600
Received: by mail-vc0-f171.google.com with SMTP id hq11so10281467vcb.2
	for <llvmdev@cs.uiuc.edu>; Thu, 29 Jan 2015 22:59:53 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=20120113;
	h=mime-version:in-reply-to:references:date:message-id:subject:from:to
	:cc:content-type;
	bh=BKcXXdVTwj17I7G5MVNNKd9hDDxm9asB/kAVhcN80j8=;
	b=kp5RMyC7c23q0MXteWLcA/oM3OZdhRsIvEf2pDKjPdQ13Q0BOny4xh2jsITEP0khIi
	QTssEbR3kePud4yKz/wC7wxa2QmjwkP2oz1Q4BIOqoHjSoItm9ZhUyuQQOrArJQ7lqSV
	dvo1EaDyXcEwfmYBSJxbzCsV7M4vR8e6quWDMe9/eTgnPz8z0VzAUJiTRcyKpZYEffID
	IT6PtbHloaWrkAjZJqZzTl08QHsBkVtiaCOC8p7WPIFxvVfzvgbXFolxL8g51BJSXj+x
	E6pSD8Z4TWqmVj1kN3t/GbfVDV6rBfd4Nz7v3aoodMYFSz+X5BcyhbePHRDe4RN4BhpI
	YHiw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:mime-version:in-reply-to:references:date
	:message-id:subject:from:to:cc:content-type;
	bh=BKcXXdVTwj17I7G5MVNNKd9hDDxm9asB/kAVhcN80j8=;
	b=itrW/I6iZYrMxQfVMIr5SR9HgRh0gVLlCCxN8HZMOR5GIGos2VQDDlPgsDHX5sKx2V
	RZ5GTj8CYVbu3Klr62HrbWvvhLHPEiki7tuR2UApDpt6T45XlntMZGvBXwBBDFTYWR3V
	NmBfMNKKGp4Dy6W+G+VMrixzhvYR8+RaDT3W+1F/elx+9gRfJVO4MekqZC1rwiWYDtby
	aNVmmz+8KnRa8XY9yIgpjnAd4nhTnXs2Y8QjceWtKBsAiGTPp++hVc9mt3hr3twGBSTM
	nTtrNMNoAMNQGnbtlScjzW6HRq15tBTtTywfI1npc3eUDtjT5e+sZmPCmLHZQuHW2NB6
	IkWw==
X-Gm-Message-State: ALoCoQkTFMFP4wJM7OH2Z53LsP7m7oDtL/Twi0JmMWd4tqCGI15pirG7NtBDFK9vzZXpCEQkNo+y
MIME-Version: 1.0
X-Received: by 10.221.37.8 with SMTP id tc8mr2626211vcb.25.1422601193263; Thu,
	29 Jan 2015 22:59:53 -0800 (PST)
Received: by 10.52.34.230 with HTTP; Thu, 29 Jan 2015 22:59:53 -0800 (PST)
In-Reply-To: <CAMiUf7cD2BS33D_6RGz8eVBzJMD_C_Xgi7TR==PyQUTucCFUeQ@mail.gmail.com>
References: <CAL7bZ_dbtGC1fUBzoN75DWGnpzp5kmeBDUjWLA=L_X2hx2PKeA@mail.gmail.com>
	<CAHnXoakT0X5f7ova84iLb4Whq8YGF_2KO+6dssbcOp1CXypVMA@mail.gmail.com>
	<54C9BCB8.8040904@philipreames.com>
	<CACs=tyJoP9Ht87xWBrW37Tf5__vWcMwB2r3hVhBfdAdntfOhXw@mail.gmail.com>
	<CAMiUf7fzRVfBoKc14pVLv1WvoCqC0=yy983q_xuacyk-sDEJmQ@mail.gmail.com>
	<FF44B6AB-3A49-4774-B807-6073DC04A304@braunis.de>
	<CAMiUf7c1YzBNoScRkPMDzN_juqrZ56vS4DOPMgezBWLLzYRdbQ@mail.gmail.com>
	<F55205AD-CC03-4E2B-96DE-AFE285518CD2@braunis.de>
	<CAMiUf7f+iUXRr7P1KyQOKVXLNT=y8hevTAh=udVeHBEJV_9Hnw@mail.gmail.com>
	<CAMiUf7cD2BS33D_6RGz8eVBzJMD_C_Xgi7TR==PyQUTucCFUeQ@mail.gmail.com>
Date: Thu, 29 Jan 2015 22:59:53 -0800
Message-ID: <CAGCO0KjfXd=o4kLEMaixQ6sRk0-8v-OKWi0ph+XnqCK1MgJXxw@mail.gmail.com>
From: Chandler Carruth <chandlerc@google.com>
To: Sanjoy Das <sanjoy@playingwithpointers.com>
Cc: Nuno Lopes <nuno.lopes@ist.utl.pt>, Matthias Braun <matze@braunis.de>,
        John Regehr <regehr@cs.utah.edu>,
        "llvmdev@cs.uiuc.edu" <llvmdev@cs.uiuc.edu>
Subject: Re: [LLVMdev] RFC: Proposal for Poison Semantics
X-BeenThere: llvmdev@cs.uiuc.edu
X-Mailman-Version: 2.1.12
Precedence: list
List-Id: LLVM Developers Mailing List <llvmdev.cs.uiuc.edu>
List-Unsubscribe: <http://lists.cs.uiuc.edu/mailman/options/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=unsubscribe>
List-Archive: <http://lists.cs.uiuc.edu/pipermail/llvmdev/>
List-Post: <mailto:llvmdev@cs.uiuc.edu>
List-Help: <mailto:llvmdev-request@cs.uiuc.edu?subject=help>
List-Subscribe: <http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev>,
	<mailto:llvmdev-request@cs.uiuc.edu?subject=subscribe>
Content-Type: multipart/mixed; boundary="===============4832169586416660444=="
Sender: llvmdev-bounces@cs.uiuc.edu
Errors-To: llvmdev-bounces@cs.uiuc.edu
X-CAS-Duplicate-Message: No 
Status: O

--===============4832169586416660444==
Content-Type: multipart/alternative; boundary=001a11337520c84202050dd9268a

--001a11337520c84202050dd9268a
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

This is actually how i tend to think of poison -- it is undef, plus a
shadow bit indicating the bits are poison. I think the important this is
defining how the various operations propagate poison, why, and why not.

On Thu, Jan 29, 2015 at 10:14 PM, Sanjoy Das <sanjoy@playingwithpointers.co=
m
> wrote:

> Here's an idea for a slightly unusual framework for poison semantics:
> we do it in two steps --
>
>
> 1. for every bit in the program, we define a second "shadow bit",
> is-poison.  We define the semantics of LLVM IR using this is-poison
> relation.  So, for instance, we could say if there is a bit 'b'in
> address 'a' such that if is-poison['b'], then "store X to 'a'" is
> undefined behavior.
>
> 2. we prove that there is no need to track is-poison for a
> well-defined program.  IOW, any program whose evaluation will actually
> require us to do the book-keeping for is-poison will eventually run
> into undefined behavior.
>
> I think such an approach will explicitly address the issue that we're
> using an N bit value to track 2^N+1 possibilities.  And this is also a
> sanity check -- since the is-poison relation is clearly made up and
> does not *really exist*, if we cannot prove (2) then we did something
> wrong in specifying step (1).
>
> -- Sanjoy
>
>
> On Thu, Jan 29, 2015 at 10:05 PM, Sanjoy Das
> <sanjoy@playingwithpointers.com> wrote:
> > On Thu, Jan 29, 2015 at 10:01 PM, Matthias Braun <matze@braunis.de>
> wrote:
> >> But
> >> (Poison > INT_MAX) <=3D> poison
> >> contradicts
> >> (X > INT_MAX) <=3D> false
> >>
> >> and I don't think you want to abandon the second rule just because x
> might be poison.
> >
> > Maybe we could define poison in such a way that it is safe to pretend
> > it "is" false, as per our convenience.  In this sense, could be
> > defined to be very similar to undef.
> >
> > -- Sanjoy
> >
> >>
> >> - Matthias
> >>
> >>> On Jan 29, 2015, at 9:43 PM, Sanjoy Das <
> sanjoy@playingwithpointers.com> wrote:
> >>>
> >>> One way around this is to say that there are some special
> >>> instructions, icmp, sext and zext which produce a value solely
> >>> composed of poison bits if any of their input bits is poison.  So
> >>> `<poison> icmp X` is poison for any value of X, including INT_MAX.
> >>> This is one way poison could be fundamentally different from undef.
> >>>
> >>> -- Sanjoy
> >>>
> >>>> On Thu, Jan 29, 2015 at 8:05 PM, Matthias Braun <matze@braunis.de>
> wrote:
> >>>> Having though about this some more I think optimizing
> >>>>
> >>>> (x+1 > x) <=3D> true
> >>>>
> >>>> and at the same time modeling undefined behavior as a posion value i=
s
> impossible. This is because we also want the following rule:
> >>>>
> >>>> (x > INT_MAX) <=3D> false
> >>>>
> >>>> Now if poison is a value, then the second replacement tells us
> (poison > INT_MAX) =3D=3D false which contradicts the first rule.
> >>>>
> >>>>
> >>>>
> >>>> The only way out of this while still allowing (x+1>x)<=3D>true I can
> see at the moment is defining that add nsw does produce actual undefined
> behavior allowing us to =E2=80=9Cfreely rewrite" the following > to true =
in the UB
> cases. Of course having add produce actual undefined behaviour greatly
> limits us in the way we can actually move the instruction around without
> changing program semantics.
> >>>>
> >>>> The only way allowing moving instructions and having add produce rea=
l
> UB I can see is that as soon as we start moving instructions around
> (specifically moving the add to a place it does not dominate or moving an=
y
> other instruction over the add) we change the add to an instruction that
> does not produce real UB anymore; something like add swu =3D =E2=80=9Cadd=
 signed wrap
> gives undef=E2=80=9D...
> >>>>
> >>>> - Matthias
> >>>>
> >>>>>> On Jan 29, 2015, at 11:29 AM, Sanjoy Das <
> sanjoy@playingwithpointers.com> wrote:
> >>>>>>
> >>>>>> I've been discussing a model with David that might steer poison
> back towards
> >>>>>> something that simply supports algebraic simplification. If we hav=
e
> a math
> >>>>>> operation that cannot wrap, then it notionally produces as many
> bits of
> >>>>>> undef as the operation could possibly produce. For example, "add
> nsw i8" can
> >>>>>> produce an i9 undef, and "mul nsw i8" can produce an undefined 16
> bit
> >>>>>> bitpattern. This is strong enough to do things like "a + 1 > a
> -->  true",
> >>>>>> because on overflow of "a + 1" we can choose an poison value of
> "MAX_INT +
> >>>>>> 1", even though that is not a valid i8 bit pattern.
> >>>>>>
> >>>>>> So, a short version would be that poison is like undef, except you
> get to
> >>>>>> include the overflow bits of the computation in your undef value.
> >>>>>
> >>>>> I  suspect it will be hard to justify reg2mem is meaning preserving
> in
> >>>>> this scheme.  But if this can be made to work, then I agree that th=
is
> >>>>> is the right thing to do -- an i32 poison effectively has the
> >>>>> semantics of a wider type, and it makes sense to be explicit in tha=
t.
> >>>>>
> >>>>> -- Sanjoy
> >>>>> _______________________________________________
> >>>>> LLVM Developers mailing list
> >>>>> LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
> >>>>> http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev
> >>>
> >>> _______________________________________________
> >>> LLVM Developers mailing list
> >>> LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
> >>> http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev
>
> _______________________________________________
> LLVM Developers mailing list
> LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
> http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev
>

--001a11337520c84202050dd9268a
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">This is actually how i tend to think of poison -- it is un=
def, plus a shadow bit indicating the bits are poison. I think the importan=
t this is defining how the various operations propagate poison, why, and wh=
y not.</div><div class=3D"gmail_extra"><br><div class=3D"gmail_quote">On Th=
u, Jan 29, 2015 at 10:14 PM, Sanjoy Das <span dir=3D"ltr">&lt;<a href=3D"ma=
ilto:sanjoy@playingwithpointers.com" target=3D"_blank">sanjoy@playingwithpo=
inters.com</a>&gt;</span> wrote:<br><blockquote class=3D"gmail_quote" style=
=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Here&#39=
;s an idea for a slightly unusual framework for poison semantics:<br>
we do it in two steps --<br>
<br>
<br>
1. for every bit in the program, we define a second &quot;shadow bit&quot;,=
<br>
is-poison.=C2=A0 We define the semantics of LLVM IR using this is-poison<br=
>
relation.=C2=A0 So, for instance, we could say if there is a bit &#39;b&#39=
;in<br>
address &#39;a&#39; such that if is-poison[&#39;b&#39;], then &quot;store X=
 to &#39;a&#39;&quot; is<br>
undefined behavior.<br>
<br>
2. we prove that there is no need to track is-poison for a<br>
well-defined program.=C2=A0 IOW, any program whose evaluation will actually=
<br>
require us to do the book-keeping for is-poison will eventually run<br>
into undefined behavior.<br>
<br>
I think such an approach will explicitly address the issue that we&#39;re<b=
r>
using an N bit value to track 2^N+1 possibilities.=C2=A0 And this is also a=
<br>
sanity check -- since the is-poison relation is clearly made up and<br>
does not *really exist*, if we cannot prove (2) then we did something<br>
wrong in specifying step (1).<br>
<br>
-- Sanjoy<br>
<br>
<br>
On Thu, Jan 29, 2015 at 10:05 PM, Sanjoy Das<br>
<div class=3D"HOEnZb"><div class=3D"h5">&lt;<a href=3D"mailto:sanjoy@playin=
gwithpointers.com">sanjoy@playingwithpointers.com</a>&gt; wrote:<br>
&gt; On Thu, Jan 29, 2015 at 10:01 PM, Matthias Braun &lt;<a href=3D"mailto=
:matze@braunis.de">matze@braunis.de</a>&gt; wrote:<br>
&gt;&gt; But<br>
&gt;&gt; (Poison &gt; INT_MAX) &lt;=3D&gt; poison<br>
&gt;&gt; contradicts<br>
&gt;&gt; (X &gt; INT_MAX) &lt;=3D&gt; false<br>
&gt;&gt;<br>
&gt;&gt; and I don&#39;t think you want to abandon the second rule just bec=
ause x might be poison.<br>
&gt;<br>
&gt; Maybe we could define poison in such a way that it is safe to pretend<=
br>
&gt; it &quot;is&quot; false, as per our convenience.=C2=A0 In this sense, =
could be<br>
&gt; defined to be very similar to undef.<br>
&gt;<br>
&gt; -- Sanjoy<br>
&gt;<br>
&gt;&gt;<br>
&gt;&gt; - Matthias<br>
&gt;&gt;<br>
&gt;&gt;&gt; On Jan 29, 2015, at 9:43 PM, Sanjoy Das &lt;<a href=3D"mailto:=
sanjoy@playingwithpointers.com">sanjoy@playingwithpointers.com</a>&gt; wrot=
e:<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; One way around this is to say that there are some special<br>
&gt;&gt;&gt; instructions, icmp, sext and zext which produce a value solely=
<br>
&gt;&gt;&gt; composed of poison bits if any of their input bits is poison.=
=C2=A0 So<br>
&gt;&gt;&gt; `&lt;poison&gt; icmp X` is poison for any value of X, includin=
g INT_MAX.<br>
&gt;&gt;&gt; This is one way poison could be fundamentally different from u=
ndef.<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; -- Sanjoy<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; On Thu, Jan 29, 2015 at 8:05 PM, Matthias Braun &lt;<a hre=
f=3D"mailto:matze@braunis.de">matze@braunis.de</a>&gt; wrote:<br>
&gt;&gt;&gt;&gt; Having though about this some more I think optimizing<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; (x+1 &gt; x) &lt;=3D&gt; true<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; and at the same time modeling undefined behavior as a posi=
on value is impossible. This is because we also want the following rule:<br=
>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; (x &gt; INT_MAX) &lt;=3D&gt; false<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; Now if poison is a value, then the second replacement tell=
s us (poison &gt; INT_MAX) =3D=3D false which contradicts the first rule.<b=
r>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; The only way out of this while still allowing (x+1&gt;x)&l=
t;=3D&gt;true I can see at the moment is defining that add nsw does produce=
 actual undefined behavior allowing us to =E2=80=9Cfreely rewrite&quot; the=
 following &gt; to true in the UB cases. Of course having add produce actua=
l undefined behaviour greatly limits us in the way we can actually move the=
 instruction around without changing program semantics.<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; The only way allowing moving instructions and having add p=
roduce real UB I can see is that as soon as we start moving instructions ar=
ound (specifically moving the add to a place it does not dominate or moving=
 any other instruction over the add) we change the add to an instruction th=
at does not produce real UB anymore; something like add swu =3D =E2=80=9Cad=
d signed wrap gives undef=E2=80=9D...<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; - Matthias<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt;&gt; On Jan 29, 2015, at 11:29 AM, Sanjoy Das &lt;<a hr=
ef=3D"mailto:sanjoy@playingwithpointers.com">sanjoy@playingwithpointers.com=
</a>&gt; wrote:<br>
&gt;&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt;&gt; I&#39;ve been discussing a model with David that m=
ight steer poison back towards<br>
&gt;&gt;&gt;&gt;&gt;&gt; something that simply supports algebraic simplific=
ation. If we have a math<br>
&gt;&gt;&gt;&gt;&gt;&gt; operation that cannot wrap, then it notionally pro=
duces as many bits of<br>
&gt;&gt;&gt;&gt;&gt;&gt; undef as the operation could possibly produce. For=
 example, &quot;add nsw i8&quot; can<br>
&gt;&gt;&gt;&gt;&gt;&gt; produce an i9 undef, and &quot;mul nsw i8&quot; ca=
n produce an undefined 16 bit<br>
&gt;&gt;&gt;&gt;&gt;&gt; bitpattern. This is strong enough to do things lik=
e &quot;a + 1 &gt; a=C2=A0 --&gt;=C2=A0 true&quot;,<br>
&gt;&gt;&gt;&gt;&gt;&gt; because on overflow of &quot;a + 1&quot; we can ch=
oose an poison value of &quot;MAX_INT +<br>
&gt;&gt;&gt;&gt;&gt;&gt; 1&quot;, even though that is not a valid i8 bit pa=
ttern.<br>
&gt;&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt;&gt; So, a short version would be that poison is like u=
ndef, except you get to<br>
&gt;&gt;&gt;&gt;&gt;&gt; include the overflow bits of the computation in yo=
ur undef value.<br>
&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt; I=C2=A0 suspect it will be hard to justify reg2mem is =
meaning preserving in<br>
&gt;&gt;&gt;&gt;&gt; this scheme.=C2=A0 But if this can be made to work, th=
en I agree that this<br>
&gt;&gt;&gt;&gt;&gt; is the right thing to do -- an i32 poison effectively =
has the<br>
&gt;&gt;&gt;&gt;&gt; semantics of a wider type, and it makes sense to be ex=
plicit in that.<br>
&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt; -- Sanjoy<br>
&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>
&gt;&gt;&gt;&gt;&gt; LLVM Developers mailing list<br>
&gt;&gt;&gt;&gt;&gt; <a href=3D"mailto:LLVMdev@cs.uiuc.edu">LLVMdev@cs.uiuc=
.edu</a>=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0<a href=3D"http://llvm.cs.uiuc.ed=
u" target=3D"_blank">http://llvm.cs.uiuc.edu</a><br>
&gt;&gt;&gt;&gt;&gt; <a href=3D"http://lists.cs.uiuc.edu/mailman/listinfo/l=
lvmdev" target=3D"_blank">http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev=
</a><br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; _______________________________________________<br>
&gt;&gt;&gt; LLVM Developers mailing list<br>
&gt;&gt;&gt; <a href=3D"mailto:LLVMdev@cs.uiuc.edu">LLVMdev@cs.uiuc.edu</a>=
=C2=A0 =C2=A0 =C2=A0 =C2=A0 =C2=A0<a href=3D"http://llvm.cs.uiuc.edu" targe=
t=3D"_blank">http://llvm.cs.uiuc.edu</a><br>
&gt;&gt;&gt; <a href=3D"http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev" =
target=3D"_blank">http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev</a><br>
<br>
_______________________________________________<br>
LLVM Developers mailing list<br>
<a href=3D"mailto:LLVMdev@cs.uiuc.edu">LLVMdev@cs.uiuc.edu</a>=C2=A0 =C2=A0=
 =C2=A0 =C2=A0 =C2=A0<a href=3D"http://llvm.cs.uiuc.edu" target=3D"_blank">=
http://llvm.cs.uiuc.edu</a><br>
<a href=3D"http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev" target=3D"_bl=
ank">http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev</a><br>
</div></div></blockquote></div><br></div>

--001a11337520c84202050dd9268a--

--===============4832169586416660444==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

_______________________________________________
LLVM Developers mailing list
LLVMdev@cs.uiuc.edu         http://llvm.cs.uiuc.edu
http://lists.cs.uiuc.edu/mailman/listinfo/llvmdev

--===============4832169586416660444==--

