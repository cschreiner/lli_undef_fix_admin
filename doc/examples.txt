Fragments of llvm code whose behavior should be understood when defining
handling of nsw:

Notes:
These fragments were often used in nsw and poison discussions.


==============================================================================
Fragment 1:
From: http://lists.cs.uiuc.edu/pipermail/llvmdev/2011-December/046152.html

  br i1 %overflow_check, label %no_overflow, label %end

no_overflow:
  %t0 = add nsw i32 %a, %b
  %t1 = sext i32 %t0 to i64
  %t2 = ashr i64 %t1, 31
  %t3 = add i64 %t2, 1
  %t5 = icmp ult %t3, 2
  %t6 = udiv i1 1, %t5

Derived fragment 1a:

  %t0 = add nsw i32 %a, %b
  %t1 = sext i32 %t0 to i64
  %t2 = ashr i64 %t1, 31
  %t3 = add i64 %t2, 1
  %t5 = icmp ult %t3, 2
  %t6 = udiv i1 1, %t5
  br i1 %overflow_check, label %no_overflow, label %end

no_overflow:

---
Derived fragment 1b:

  %s0 = sext i32 %a to i64
  %s1 = sext i32 %b to i64
  %t0 = add nsw i64 %s0, %s1
  %t2 = ashr i64 %t0, 31
  %t3 = add i64 %t2, 1
  %t5 = icmp ult %t3, 2
  %t6 = udiv i1 1, %t5
  br i1 %overflow_check, label %no_overflow, label %end

no_overflow:

==============================================================================
Fragment 2 "Poison and select":
From http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-September/076945.html
and 

define i32 @f(i32 %a) {
  %cmp = icmp sgt i32 %a, 0
  %sub = sub nsw i32 2147483647, %a
  %sel = select i1 %cmp, i32 %sub, i32 0
  ret i32 %sel
}

especially consider if %a=-1

Note: under current rules, %a=-1 yields
      %cmp= false
      %sub= poisoned -INT32_MIN
      %sel= poisoned 0
but if select can only be poisoned by the branch chosen, then %sel= unpoisoned
0, which is ok.


==============================================================================
Fragment 3 "Poison and select":
From http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-September/076945.html

%add = add nsw i32 %a, 1
%cmp1 = icmp eq i32 %a, 0
%cmp2 = icmp slt i32 %add, 0
%sel = select i1 %cmp1, i1 %cmp2, i1 false

consider case where %a=2147483647

---
Derived fragment 3a:

%add = add nsw i32 %a, 1
%cmp1 = icmp eq i32 %a, 0
%cmp2 = icmp slt i32 %add, 0
%and = and i1 %cmp1, %cmp2

Note that %add is poisoned INT32_MIN, %cmp1 is false, %cmp2 is poisoned false,
%sel is unpoisoned false, and %and is poisoned false.  Oops.

CAS: this is resolved if we require short-circuit poison elimination for the
and opcode, in which case %and becomes unpoisoned false.  Phew.

==============================================================================
Fragment 4 "Poison and select":
From http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-September/076592.html

int printf(const char *, ...);
int foo(int x0) {
   int x3 = x0 >> 27;
   int x4 = x3 - 27;
   int x2 = x4 ? x4 : (1 >> x4);
   int x1 = x2 != 0;
   return x1;
}
int arg;
int main (void) {
   int x1 = foo(arg);
   printf("%x\n", x1);
   return 0;
}

this program should print "1", with no undefined behavior.

---
Derived fragment 4a:

define i32 @foo(i32 %x0) #0 {
entry:
   %shr = ashr i32 %x0, 27
   %sub = add nsw i32 %shr, -27
   %tobool = icmp ne i32 %sub, 0
   %shr1 = lshr i32 1, %sub
   %cond = select i1 %tobool, i32 %sub, i32 %shr1
   %cmp = icmp ne i32 %cond, 0
   %conv = zext i1 %cmp to i32
   ret i32 %conv
}

Under current rules, %shr1 gets poisoned, and in turn poisons the return
value.

==============================================================================
Fragment 5 "poison and select":
From http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-September/076749.html

select(a,b,c) should be fully equivalent to (with appropriate bitcasting) 

(sext(a) & b) | (~sext(a) & c)

TODO2: translate this into llvm assembler

==============================================================================
Fragment 6 "poison and select":
From http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-September/076749.html

select should be semantically equivalent to its intuitive translation as a
branch and phi (the current poison concept violates this)

==============================================================================
Fragment 7 "poison and select":
From http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-September/076749.html

Branch should be semantically equivalent to its intuitive translation as a
switch, and as an indirect branch.

CAS TODO: clarify.  I'm confused on this one.  An indirect branch is a jump to
location specified by pointer, right?  What does such a branch have to do with
a switch?

==============================================================================
Fragment 8 "poison and select":
From http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-September/076749.html

Constant folding, mem2reg, and reg2mem should always be safe _and_
optimization-opportunity-preserving.

CAS TODO: clarify.  These seem to be optimization passes, right?  How to
convert these into clear properties that can be tested?

==============================================================================
Fragment 9:
From http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-September/076942.html
and https://llvm.org/bugs/show_bug.cgi?id=20997

Basically, SimplifyCFG wants to take

   expr1 && expr2

and flatten it into

   x = expr1
   y = expr2
   x&y

Specific example:
TODO: simpify it.

@x0 = global i32 -1, align 4
@x1 = common global i32 0, align 4

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
entry:
  %0 = load i32* @x0, align 4, !tbaa !1
  %cmp = icmp sgt i32 %0, 0
  %sub = sub nsw i32 2147483647, %0
  %cmp1 = icmp slt i32 %sub, 1
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %lor.end.thread, label %lor.end

lor.end.thread:                                   ; preds = %entry
  store i32 1, i32* @x1, align 4, !tbaa !1
  br label %if.then

lor.end:                                          ; preds = %entry
  %tobool = icmp ne i32 %0, -1
  %lor.ext = zext i1 %tobool to i32
  store i32 %lor.ext, i32* @x1, align 4, !tbaa !1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.end.thread, %lor.end
  %putchar = tail call i32 @putchar(i32 120) #1
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.end
  ret i32 0
}

CAS results under current rules:
%0= -1
%cmp= false
%sub= poisoned INT32_MIN
%cmp1= poisoned true
%or.cond= poisoned false 
	# note that this goes away under short-circuit poison elimination
branch to lor.end
%tobool= true
%lor.ext= 1
branch to if.then
branch to if.end

==============================================================================
Fragment 10:
From Sanjoy Das's 11/14/14 comments at
https://groups.google.com/forum/#!topic/llvm-dev/eQ7Fw2C_O9Q

CAS note: there is an interesting description there.

  %a = maybe poison
  br i1 %a, label %left, label %right
left:
  %l = 42
  br label %merge
right:
  %r = < unknown load > can be speculated
  br label %merge
merge:
  %m = phi %l %r
  store %m to heap 

CAS run results:
if %a then
   %1= 42
else
   %r= anything
fi
   %m= 42 or anything

---
Derived fragment 10a:

   %m= select %a, %l, %r

Sanjoy claims that iff %l==%r, then %m does not depend on %a, and therefore
can not inherit poison from it.


==============================================================================
Other sources of possible fragments:

http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-September/076391.html
	and its replies

see also
http://lists.cs.uiuc.edu/pipermail/llvmdev/2011-December/
and November and September, also for 2014.  Look for all instances of these
keywords:
	poison	nsw	nuw
