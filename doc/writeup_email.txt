Writeup of Poison Research in project lli_undef_fix
----------------------------------------------------

\TODO{make sure I'm using "poison specification" and "poison rules"
consistently.}

The LLVM compiler suite has for many years now been using a concept called
"poison values" to track which computational results have been tainted by
illegal overflows.  David Majnemer gave an excellent overview of the subject
in his 27jan2015 post to the LLVMdev mailing list.

The current specification of poison handling is in the LLVM Language Reference
Manual, section "Constants" subsection "Poison Values"
\cite{http://llvm.org/docs/LangRef.html#poison-values}.  This specification
has holes, which implementers have sometimes ignored, and sometimes patched
by human intuition and dilligent debugging efforts.  Unfortunately,
different people have different intuitive understandings of how poison
should work. \TODO{cite the discusssions of poison on LLVM mailing list,
27jan2015 to 5feb2015.} This situation makes a precise formal definition of
poison handling impossible, allows occasional miscompilation in corner
cases, and prevents the compiler from applying many next generation compiler
optimizations.

We (the authors of this paper) have been examining the effects of different
poison handling rules on thousands of C programs to see the practical
effects of different rules.  To do this, we created an LLVM IR interpreter
capable of applying different poison handling rules, and set it to halt with
an error message when a poison value was being output, written to a volatile
memory location, or passed to a function call running outside the interpreter.
The C programs were generated by CSmith, a tool that has proven useful in the
past for finding compiler bugs by generating programs that vigorously exercise
a compiler.  Other C programs were obtained from \TODO{add sources}.

The key findings from these experiments are:

1. Under the current specification, once a poison value is generated, it is
unconditionally propogated to all subsequent values that depend in any sense
on the poison value. In other words, if value %a is poisoned, then 

	%2= add %a, %anything1

is always poisoned, as is

	%3= and %2, %anything2

as well as all computations on either branch following 

	branch i1 %a, label %destIfTrue, label %destIfFalse

and all other values depending in any sense on a.  This guarantees
that a program created by a fully conforming compiler must either
perform expensive checks before each computation to guarantee that
poison will never be generated, or that eventually a poisoned value
will be output, and it will probably be wrong.  The expensive checks
to prevent this prohibit the optimizer from simplifying the control
flow graph, and all of the miscompilations found in our experiments
went wrong at the "Simplify the Control Flow Graph" optimization step.
Note that control flow graph simplification is an important means of
speeding up exection on many modern processors.

2. The problem in finding #1 can be circumvented by applying a
conceptually simple rule: poison does not propogate through a
computation whose result can be computed without using any poisoned
operand. For example, if value %a is poisoned, then `and %a, 0` is not
poisoned.  Similarly, `or %a, <all_1s_value>` is not poisoned, nor
`mul %a, 0` \footnote{ Note that (0 / a) is still poison, as the
"correct" value for a might be 0.}, nor the result of a select
statement that returns an unpoisoned argument (e.g. `select 1, 45,
%a`).  These examples of this rule were sufficient to eliminate most
\TODO{all?}  poisoned outputs that would otherwise be generated by the
programs we tested.

3. There are less common cases where our empirical experiments have
"gotten away with" propogating poison, despite the rule proposed in
finding #2.  For example, if %a is a 16-bit poison value, `icmp sle
i16 %a, 32767` would be uniquely unpoisoned under finding #2, but our
experiments were able to generate correct results without it.
\TODO{are there other examples?} While we are reluctant to modify the
rule in finding #2 to mandate exceptions like this, they do appear to
be "higher hanging fruit" that an LLVM implementation can implement
later, if needed.

\TODO{add conclusion}


