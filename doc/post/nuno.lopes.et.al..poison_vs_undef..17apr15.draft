To:  TBD
Tentative-To: John Regehr <regehr@cs.utah.edu> 
Subject: Re:  Fwd: Fixing LLVM's IR

Nuno, David:

I am one of John's graduate students who has been working on this
problem.  In particular, I have created a LLVM IR interpreter that
tracks poison, and is capable of applying different poison handling
rules and reporting the effects, and I've been studying their effects
on different C programs.  The proposal in your 16apr2015 email brings
up some interesting ideas, and I believe John's and my findings can
help refine them.  With your permission, I'd like to join this
conversation by sharing the following initial thoughts:

I have been moving towards the conclusion that whatever changes happen
to the spec will need to have the property that David brought up in
his 27 Jan email to the LLVM Developer list, January, namely that a
value tainted by overflow (whether the taint is named poison, undef,
or whatever) must not propagate the taint when used in an operation
whose result can be determined without using the tainted operand.  I
think of this as the "antidote if poison operand isn't used"
rule. John and I have found this concept is not implemented in the
current LLVM optimizer (at least not consistently), and, yes, its
absence causes grief.

To give an example, consider:

	%icmp50= icmp sgt %arg1, %int_min
	br %icmp50 label %a, label %b
a:
	%51= sub nsw %arg1, 1  ; produces poison iff %arg1==%int_min
	%br label %c
b:
	%52= add %arg1, %arg2
c:
	%53= phi [ label a, %51 ], [ label b, %52 ]

The "Simplify the Control Flow Graph" optimization pass reduces this to:

	%51= sub nsw %arg1, 1  ; produces poison iff %arg1==%int_min
	%52= add %arg1, %arg2
	%icmp50= icmp sgt %arg1, %int_min
	%53= select %icmp50, %51, %52

Under the current poison handling implementation, if %arg1==%int_min,
then the result, %53, is unpoisoned in the original code, but is
poisoned in the optimized code.  But if we apply David's "antidote if
poison operand isn't used" rule, then %53 is fine.

There are more opportunities for the optimizer to introduce poison
when there are multiple icmp instructions.  Consider this example,
which is from an actual C program that had bugs John couldn't
explain until he and I looked for poison handling issues:

define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %6, label %3

; <label>:3                                       ; preds = %0
  %4 = sub nsw i64 9223372036854775807, %x4
  %5 = icmp sgt i64 %1, %4
  br i1 %5, label %7, label %6

; <label>:6                                       ; preds = %0, %3
  br label %7

; <label>:7                                       ; preds = %6, %3
  %8 = phi i32 [ 1, %3 ], [ 0, %6 ]
  ret i32 %8
}

The "Simplify the Control Flow Graph" optimization pass reduced this to:

define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = select i1 %or.cond, i32 1, i32 0
  ret i32 %5
}

Assuming that the subtraction generates poison in both the raw and
optimized cases, the raw case only returns with poison if %1 != 0,
while the optimized case ends with poison unconditionally.  However,
applying David's "antidote if poison operand isn't used" rule at the and
instruction would make %or.cond (and the return value) only be
poisoned if %1 != 0, which is the same behavior as the raw case.

When I mentally run these cases following the proposal that unwanted
overflow produces the undef value (the "poison==undef" proposal), I
get the same results that poison with the "antidote if poison operand
isn't used" rule produces.  (David, Nuno: do you concur?)  This
observation has led to the following thoughts:

1. I agree that the combination of undefined behavior, undef value,
poison, and normal values is rather complicated.  So maybe David's and
Nuno's poison==undef proposal can help the LLVM community find a
simpler, more general solution than a mere tweak of the poison rules.

2. I would like to better understand your thinking behind the proposed rule:

 >   - All operations, except and+or return undef if any of the operands is
 > undef (and+or are an exception because we want to be able to replace
 > branches with speculative execution)

If the result of an operation can be determined without using an undef
operand (e.g. `mul 0, undef` is always 0), why should the operation
return undef?  Might this idea be better stated, "An operation with an
undef operand always returns undef unless the result can be determined
without using the undef operand."?

3. Are there _any_ advantages that poison offers over undef, or was it
an oversight to create poison and undef as separate concepts?

As a side note, the "poison" concept is reminiscent of the behavior of
many processors-- when wraparound happens, the processor loads a
result assuming a carry/borrow was done into the destination register,
but set a separate overflow flag.  Of course, that flag is not
propagated as poison is.  

 > Now, how do we know this is what we want?  There are two angles to answer
 > this questions:
 >   - Correctness: is this IR semantics consistent?
 >   - Performance: can we do all (most?) the transformations we care about?

I agree with these criteria.

I have tools that might be be useful for studing this, namely a
customized interpreter that can track wraparound taint (under whatever
name) and an LLVM fuzzer.  They may be able to help refine ideas
before going through the effort to make a formal proof, and help
understand the effects on optimizing real code.

Of course, I reserve the result to change my mind as we discuss this
further.  :-)

Best wishes,

-- Christian

-----------------------------------------------------------------------------
Christian Schreiner
cas@cs.utah.edu

