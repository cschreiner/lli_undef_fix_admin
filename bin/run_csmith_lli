#!/bin/bash
# Description:
# Creates programs via csmith, compiles them at -O0 and -O3 levels, runs them,
# and compares the results.  If the results are identical, deletes that
# program.  Continues running until a file named STOP is found in its work
# directory (causing clean exit), or Ctl-C is pressed (causing sloppy exit).
#
# Correct Use:
#    run_csmith_lli <no_arguments>
# 
# Details:
# Creates a directory based on today's date and time in the current directory,
# cds to that directory, and creates the following files there:
# 
#    runXXX.c
#    runXXX_o0.ll
#    runXXX_o0.ll.stdout
#    runXXX_o0.ll.stderr
#    runXXX_o3.ll
#    runXXX_o3.ll.stdout
#    runXXX_o3.ll.stderr
#    runXXX.report
# 
# where XXX is the number of the Csmith generated program.
# 

scriptname=run_csmith_lli

# ============================================================================
function test_one_round()
# ============================================================================
{
   arg_round=$1

   file_stem=run${arg_round}
   report_file=${file_stem}.report
   cfile=${file_stem}.c
   opt0_ll=${file_stem}_o0.ll
   opt3_ll=${file_stem}_o3.ll

   # prepare report
   (
     echo report for source file ${cfile}: 
     echo date=`date`
     echo LLI_LUF_OPTS=\"$LLI_LUF_OPTS\"
   ) | tee $report_file

   csmith > $cfile
   clang -I$TUUT/all/include/csmith-2.2.0 -S -O0 -emit-llvm $cfile
   clang_status=$?
   if [ "$clang_status" -ne 0 ]; then
      echo clang exited with status \"$clang_status\" at -O0 >> $report_file
      return 1
   fi
   mv $file_stem.ll $opt0_ll
   clang -I$TUUT/all/include/csmith-2.2.0 -S -O3 -emit-llvm $cfile
   if [ "$clang_status" -ne 0 ]; then
      echo clang exited with status \"$clang_status\" at -O3 >> $report_file
      return 1
   fi
   mv $file_stem.ll $opt3_ll

   # run
   ( ulimit -t 60; stdbuf -o 0 -e 0 llifi $opt0_ll ) > \
         $opt0_ll.stdout 2> $opt0_ll.stderr
   opt0_status=$?
   ( ulimit -t 60; stdbuf -o 0 -e 0 llifi $opt3_ll ) > \
         $opt3_ll.stdout 2> $opt3_ll.stderr
   opt3_status=$?

   # compute differences
   diff -q $opt0_ll.stdout $opt3_ll.stdout
   stdout_diff_status=$?

   opt0_checksum=`grep '^checksum = ' $opt0_ll.stdout` 
   opt3_checksum=`grep '^checksum = ' $opt3_ll.stdout` 
   
   # print the meat of the report
   cleanup_flag="true"
   if [ $opt0_status -eq $opt3_status ]; then
      echo statuses agree: $opt0_status  >> $report_file
   else
      (
	 echo statuses differ for opt0 and opt3  
	 echo "  " opt0 status=$opt0_status
	 echo "  " opt3 status=$opt3_status
      ) | tee -a $report_file
      cleanup_flag="false"
   fi
   if [ -z "$opt0_checksum" -a -z "$opt3_checksum" ]; then
      echo checksums agree '(actually, both are missing)' >> $report_file
   elif [ -n "$opt0_checksum" -a -z "$opt3_checksum" ]; then
      (
	 echo checksums differ '(O3 had no checksum)' 
	 echo "  " O0 sum=\"$opt0_checksum\" 
      ) >> $report_file
   elif [ -z "$opt0_checksum" -a -n "$opt3_checksum" ]; then
      (
	 echo checksums differ '(O0 had no checksum)' 
	 echo "  " O3 sum=\"$opt3_checksum\" 
      ) >> $report_file
   elif [ "$opt0_checksum" = "$opt3_checksum" ]; then
      echo checksums agree >> $report_file
   else
      (
	 echo checksums differ 
	 echo "  " O0 sum=\"$opt0_checksum\" 
	 echo "  " O3 sum=\"$opt3_checksum\" 
      ) >> $report_file
   fi

   if [ $stdout_diff_status -eq 0 ]; then
      (
	 echo outputs agree:
	 echo ==========
	 echo opt0 and opt3: 
	 cat $opt0_ll.stdout
	 echo ==========
	 echo " "
      ) | tee -a $report_file
   else
      (
	 echo output differs 
	 echo ==========
	 echo opt0: 
	 cat $opt0_ll.stdout
	 echo ==========
	 echo opt3: 
	 cat $opt3_ll.stdout
	 echo ==========
	 echo " "
      ) | tee -a $report_file
      cleanup_flag="false"
   fi
   if [ -s $opt0_ll.stderr ]; then
      (
         echo stderr appeared for o0
      ) | tee -a $report_file
      cleanup_flag="false"
   fi
   if [ -s $opt3_ll.stderr ]; then
      (
         echo stderr appeared for o3
      ) | tee -a $report_file
      cleanup_flag="false"
   fi
      
   # clean up runs that were consistently killed
   if grep -qEi '\bkilled\b' $opt0_ll.stderr && \
	 grep -qEi '\bkilled\b' $opt3_ll.stderr; then 
      # The program was killed , presumably because it had an infinite loop
      # and exceeded its time limit.
      mv $cfile $report_file KILLED
      for ii in $opt0_ll $opt3_ll; do
         mv $ii $ii.stdout $ii.stderr KILLED
      done
   fi
   echo cleanup_flag=$cleanup_flag
   # clean up runs that passed
   if [ "$cleanup_flag" = "true" ]; then 
      if [ ! -d PASSED ]; then
         echo ${scriptname}: ERROR: can not find PASSED directory
         exit 255
      fi
      mv $cfile $report_file PASSED
      for ii in $opt0_ll $opt3_ll; do
         rm $ii $ii.stdout $ii.stderr
      done
   fi
   return 0
} 

# ============================================================================
# main program

# process command-line args
arg_max_rounds=$1
if [ -z "$arg_max_rounds" ]; then
   arg_max_rounds=0
fi

# set up
start_time=`date +%Y%b%d_%H%M%S`
date_dir=$start_time
if [ -d "$date_dir" ]; then
   echo ${scriptname}: ERROR: the dir for the current date+time stamp exists.
   echo date_dir=\"$date_dir\"
   exit 255
fi   
for ii in INTERESTING UNINTERESTING TOOL_ISSUE PASSED KILLED; do
   mkdir -p $date_dir/$ii 
done
mkdir -p $date_dir/TOOL_ISSUE/DUP
cd $date_dir

# start logfile
logfile=`pwd`/LOG_${$scriptname}
(
   echo logfile for \"$scriptname\"
   echo started $start_time
   echo LLI_LUF_OPTS=\"$LLI_LUF_OPTS\"
   echo ---
   echo clang=`which clang`
   clang --version
   echo ---
   echo llifi=`which llifi`
   llifi --version
   echo ---
   echo csmith=`which csmith`
   csmith --version
   echo ---
) >> $logfile

# verify settings
echo Settings are:
cat $logfile
echo " "
echo If any of this is incorrect, press Ctl-C NOW and fix it.
sleep 3
echo Proceeding.
echo " "

# run
round=0
while true; do
   echo @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   echo round ${round}:
   test_one_round $round
   echo @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  
   # prepare for next round
   round=$(( $round + 1 ))

   # see if it is time to stop
   if [ $round -ge $arg_max_rounds -a $arg_max_rounds -gt 0 ]; then
      echo completed $arg_max_rounds rounds.   
      exit 0
   fi
   if [ -e STOP ]; then
      # A STOP file allows one to stop this script cleanly at the end of a
      # round, as opposed to pressing CTL-C, which stops the script in the
      # middle of a round.
      stop_time=`date +%Y%b%d_%H%M%S`
      echo stopped running at $stop_time >> $logfile
      round=$(( $round - 1 ))
      echo completed $round rounds before finding a STOP file.
      echo completed $round rounds before finding a STOP file. >> $logfile
      if [ -s STOP ]; then
	 echo ${scriptname}: stop file has contents, and so must be removed 
	 echo manually.
      else 
         rm STOP
      fi
      exit 0
   fi
done

# ============================================================================
# end of file 
