#!/bin/bash

scriptname=run_csmith_lli

# ============================================================================
function test_one_round()
# ============================================================================
{
   arg_round=$1

   file_stem=run${arg_round}
   report_file=${file_stem}.report
   cfile=${file_stem}.c
   opt0_ll=${file_stem}_o0.ll
   opt3_ll=${file_stem}_o3.ll

   # prepare report
   (
     echo report for source file ${cfile}: 
     echo date=`date`
   ) | tee $report_file

   csmith > $cfile
   clang -I$TUUT/all/include/csmith-2.2.0 -S -O0 -emit-llvm $cfile
   clang_status=$?
   if [ "$clang_status" -ne 0 ]; then
      echo clang exited with status \"$clang_status\" at -O0 >> $report_file
      return 1
   fi
   mv $file_stem.ll $opt0_ll
   clang -I$TUUT/all/include/csmith-2.2.0 -S -O3 -emit-llvm $cfile
   if [ "$clang_status" -ne 0 ]; then
      echo clang exited with status \"$clang_status\" at -O3 >> $report_file
      return 1
   fi
   mv $file_stem.ll $opt3_ll

   # run
   ( ulimit -t 60; stdbuf -o 0 -e 0 llifi $opt0_ll ) > \
         $opt0_ll.stdout 2> $opt0_ll.stderr
   opt0_status=$?
   ( ulimit -t 60; stdbuf -o 0 -e 0 llifi $opt3_ll ) > \
         $opt3_ll.stdout 2> $opt3_ll.stderr
   opt3_status=$?

   # compute differences
   diff -q $opt0_ll.stdout $opt3_ll.stdout
   diff_status=$?

   grep '^checksum = ' $opt0_ll.stdout > $opt0_ll.checksum
   grep '^checksum = ' $opt3_ll.stdout > $opt3_ll.checksum
   diff -q $opt0_ll.checksum $opt3_ll.checksum
   checksum_diff_status=$?  
   
   # print the meat of the report
   cleanup_flag="true"
   if [ $opt0_status -eq $opt3_status ]; then
      echo statuses agree: $opt0_status  >> $report_file
   else
      (
	 echo statuses differ for opt0 and opt3  
	 echo "  " opt0 status=$opt0_status
	 echo "  " opt3 status=$opt3_status
      ) | tee -a $report_file
      cleanup_flag="false"
   fi
   if [ $checksum_diff_status -eq 0 ]; then
      echo checksums agree >> $report_file
      rm $opt0_ll.checksum $opt3_ll.checksum
   else
      echo checksums differ >> $report_file
      # TODO2: consider removing the checksum files in this case, too.
   fi
   if [ $diff_status -eq 0 ]; then
      (
	 echo outputs agree:
	 echo ==========
	 echo opt0 and opt3: 
	 cat $opt0_ll.stdout
	 echo ==========
	 echo " "
      ) | tee -a $report_file
   else
      (
	 echo output differs 
	 echo ==========
	 echo opt0: 
	 cat $opt0_ll.stdout
	 echo ==========
	 echo opt3: 
	 cat $opt3_ll.stdout
	 echo ==========
	 echo " "
      ) | tee -a $report_file
      cleanup_flag="false"
   fi
   if [ -s $opt0_ll.stderr ]; then
      (
         echo stderr appeared for o0
      ) | tee -a $report_file
      cleanup_flag="false"
   fi
   if [ -s $opt3_ll.stderr ]; then
      (
         echo stderr appeared for o3
      ) | tee -a $report_file
      cleanup_flag="false"
   fi
      
   # clean up runs that were consistently killed
   if grep -qEi '\bkilled\b' $opt0_ll.stderr && \
	 grep -qEi '\bkilled\b' $opt3_ll.stderr; then 
      # The program was killed , presumably because it had an infinite loop
      # and exceeded its time limit.
      mv $cfile $report_file KILLED
      for ii in $opt0_ll $opt3_ll; do
         mv $ii $ii.stdout $ii.stderr KILLED
      done
   fi
   echo cleanup_flag=$cleanup_flag
   # clean up runs that passed
   if [ "$cleanup_flag" = "true" ]; then 
      if [ ! -d PASSED ]; then
         echo ${scriptname}: ERROR: can not find PASSED directory
         exit 255
      fi
      mv $cfile $report_file PASSED
      for ii in $opt0_ll $opt3_ll; do
         rm $ii $ii.stdout $ii.stderr
      done
   fi
   return 0
} 

# ============================================================================
# main program

# process command-line args
arg_max_rounds=$1
if [ -z "$arg_max_rounds" ]; then
   arg_max_rounds=0
fi

# set up
date_dir=`date +%Y%b%d_%H%M%S`
if [ -d "$date_dir" ]; then
   echo ${scriptname}: ERROR: the dir for the current date+time stamp exists.
   echo date_dir=\"$date_dir\"
   exit 255
fi   
mkdir -p $date_dir/PASSED 
mkdir -p $date_dir/KILLED
cd $date_dir

# run
round=0
while true; do
   echo @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   echo round ${round}:
   test_one_round $round
   echo @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   round=$(( $round + 1 ))
  
   if [ $round -ge $arg_max_rounds -a $arg_max_rounds -gt 0 ]; then
      echo completed $arg_max_rounds rounds.   
      exit 0
   fi
done


# ============================================================================
# end of file 
