#!/bin/bash

# ============================================================================
function test_one_round()
# ============================================================================
{
   arg_round=$1

   file_stem=src_${arg_round}
   report_file=${file_stem}.report
   cfile=${file_stem}.c
   opt0_ll=${file_stem}_0.ll
   opt3_ll=${file_stem}_3.ll

   csmith > $cfile
   clang -I$TUUT/all/include/csmith-2.2.0 -S -O0 -emit-llvm $cfile
   mv $file_stem.ll $opt0_ll
   clang -I$TUUT/all/include/csmith-2.2.0 -S -O3 -emit-llvm $cfile
   mv $file_stem.ll $opt3_ll

   lli -force-interpreter $opt0_ll > $opt0_ll.out
   $opt0_status=$?
   lli -force-interpreter $opt3_ll > $opt3_ll.out
   $opt3_status=$?
   diff -q $opt0_ll.out $opt3_ll.out
   $diff_status=$?
   
   # prepare report
   cleanup_flag="true"
   (
     echo report for source file ${cfile}: 
     if [ $opt0_status -eq $opt3_status ]; then
        echo status agree: $opt0_status 
     else
	echo statuses differ for opt0 and opt3 
	echo "  " opt0 status=$opt0_status
	echo "  " opt3 status=$opt3_status
	cleanup_flag="false"
     fi
     if [ $diff_status -eq 0 ]; then
        echo outputs agree:
	echo ==========
	echo opt0: 
        cat $opt0_ll.out
	echo ==========
        echo " "
     else
	echo output differs 
	echo ==========
	echo opt0: 
        cat $opt0_ll.out
	echo ==========
	echo opt3: 
        cat $opt3_ll.out
	echo ==========
        echo " "
	cleanup_flag="false"
     fi
   ) > $output_file

   echo cleanup_flag=$cleanup_flag
   if [ "$cleanup_flag" = "true" -a "true" = "false" ]; then #;;
      if [ ! -d ROUTINE ]; then
         mkdir ROUTINE
      fi
      mv $cfile $report_file ROUTINE
      rm $opt0_ll $opt3_ll $opt0_ll.out $opt3_ll.out
   fi
   return 0
} 

# ============================================================================
# main program

test_one_round 1 # TODO: expand this into a loop


# ============================================================================
# end of file 
