#!/bin/bash
# script to install llvm compiler suite, and its clang C-compiler utility

scriptname=tuut-install-llvm
workdir=/tmp/${scriptname}_`date +%Y%b%d_%H%M%S`_$$
mkdir -p $workdir
start_time=`date +%s`

# ===========================================================================
# read command line arguments

# TODO: add some kind of a --continue option to continue a previously
# 	aborted build.

# set defaults
arg_dry_run=false

# parse arguments
if [ "$1" = "--dry-run" ]; then
   arg_dry_run=true
fi

# ===========================================================================
# query build host capabilities

# normally we want `make` to run a job for each processor, leaving
# processor #0 free for other tasks.
NUM_JOBS=`cat /proc/cpuinfo | grep -E '^processor\s*:' | tail -n 1 | \
      awk '{print $3;}'`
if [ -z "$NUM_JOBS" ]; then
   NUM_JOBS=1
fi
echo ${scriptname}: will try to run make with \"$NUM_JOBS\" jobs.

# ===========================================================================
# basic TUUT setup

export TUUT=/uusoc/scratch/dyson/cas/tuut/once

# make sure all of the TUUT directories exist
if [ ! -d "$TUUT" ]; then
   echo ${scriptname}: error: \$TUUT directory does not exist.
   echo "  " TUUT=\"$TUUT\"
   exit -1
fi

BASE_DIR=$TUUT/llvm~r236558
if [ "$arg_dry_run" = "true" ]; then
   BASE_DIR=${BASE_DIR}~dry_run
fi

separator='===================================='

if [ -e $BASE_DIR ]; then
   echo ${scriptname}: error: BASE_DIR appears to already exist.
   echo Please clean up its contents and rerun this script.
   echo BASE_DIR=\"$BASE_DIR\"
   exit -1
fi
mkdir -p $BASE_DIR
cd $BASE_DIR/

# ===========================================================================
# check prerequisites

need_to_exit="false"

PROCESSOR=`uname -m`
case "$PROCESSOR" in
   amd64|x86_64|i386)
      # good
      ;;
   *)
      echo ${scriptname}: Error: do not recognize processor type \"$PROCESSOR\".
      need_to_exit="true"
esac


if [ -f /etc/lsb-release ]; then
   (
      source /etc/lsb-release
      if [ "$DISTRIB_ID" != "Ubuntu" ]; then
	 echo ${scriptname}: Error: \
	       do not recognize OS distribution \"$DISTRIB_ID\".
	 need_to_exit="true"
      fi
      case "$DISTRIB_CODENAME" in
         precise|trusty)
            # good
            ;;
         *)
	    echo ${scriptname}: Error: \
		  do not recognize OS codename \"$DISTRIB_CODENAME\".
	    need_to_exit="true"
            ;;
      esac
   )
else
   echo ${scriptname}: Error: file /etc/lsb-release does not exist.
   need_to_exit="true"
fi

if [ "$need_to_exit" = "true" ]; then
   echo ${scriptname}: too many errors.  Exiting.
   exit -1
fi

# ===========================================================================
# get source distribution

download_file=n/a
svn_flags=-r236558 # latest version as of 5may2015 18:29 MDT
 
# llvm GettingStarted webpage: http://www.llvm.org/docs/GettingStarted.html
# see also: 
#   Building LLVM with CMAKE: http://llvm.org/docs/CMake.html
#   Clang - Getting Started: http://clang.llvm.org/get_started.html

# download
#pushd $TUUT/admin/download
#wget $download_url
#chmod ug+x $download_file
#popd

cd $workdir

# . . . . . . . . . . . . . . . . . . . .
# checkout llvm
svn co $svn_flags http://llvm.org/svn/llvm-project/llvm/trunk llvm
status=$?
if [ "$status" != 0 ]; then
   echo ${scriptname}: Error: something went wrong checking out Llvm\'s svn 
   echo "  " repository, exit status=\"$status\".
   exit -1
fi

# . . . . . . . . . . . . . . . . . . . .
# checkout clang
cd llvm/tools
svn co $svn_flags http://llvm.org/svn/llvm-project/cfe/trunk clang
cd ../..

# . . . . . . . . . . . . . . . . . . . .
# checkout clang extra tools

if false; then
   cd llvm/tools/clang/tools
   svn co $svn_flags http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra
   cd ../../../..
fi

# . . . . . . . . . . . . . . . . . . . .
# checkout compiler-rt
cd llvm/projects
svn co $svn_flags http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt
cd ../..

# ===========================================================================
# build
mkdir $workdir/build
cd $workdir/build

# . . . . . . . . . . . . . . . . . . . .
# configure the build
cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=$BASE_DIR ../llvm
# under gnu tools: ../llvm/configure --prefix=$BASE_DIR

# . . . . . . . . . . . . . . . . . . . .
# do the actual build:
make -j $NUM_JOBS
make check-all
make install

# ===========================================================================
# clean up

stop_time=`date +%s`
run_time_s=$(($stop_time-$start_time))
run_time_min=$(($run_time_s / 60))
run_time_remainder_s=$(($run_time_s % 60))
echo build+install took ${run_time_min}:${run_time_remainder_s} \
      \($run_time_s s\)

if [ "$arg_dry_run" = "true" -o 1=1 ]; then #;;
   echo ${scriptname}: need to manually delete temporary work dir:
   echo "  " $workdir
else
   #;;rm -rf $workdir
   echo exectuion of rm -rf \$workdir is disabled for debugging
   echo "  " workdir=\"$workdir\"
fi

# ===========================================================================
# end of file
