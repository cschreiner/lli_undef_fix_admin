#!/bin/bash
# Re-run csmith-generated test cases to see if a fix to the source
# code fixes them, too.
# 
# Another way to put it:
# script to re-run lli on csmith test cases and see if recent changes to 
# code-under-test make them pass or fail

scriptname=redo_csmith_checks
timestamp=`date +%Y%b%d_%H%M%S | awk '{print tolower($0);}'`

# ============================================================================
run_one_case()
{
   ll_file1="$1"
   ll_file2=`echo $ll_file1 | awk '{sub(/o0/, "o3"); print;}'`
   echo " "
   echo ==========
   echo first file="$ll_file1"
   # debugging code:
   #echo second file="$ll_file2"

   lli_outfile1=${lli_file1}.$timestamp.stdout
   lli_outfile2=${lli_file2}.$timestamp.stdout
   lli_errfile1=${lli_file1}.$timestamp.stderr
   lli_errfile2=${lli_file2}.$timestamp.stderr

   (ulimit -t 60; llifi $ll_file1) 1> $lli_outfile1 2> $lli_errfile1
   status1=$?
   if [ $status -ne 0 ]; then
      echo ${scriptname}: \
	    $ll_file1 now fails due to exit status=$status on file1
      continue
   fi   
   (ulimit -t 60; llifi $ll_file2) 1> $lli_outfile2 2> $lli_errfile2
   status2=$?
   if [ $status -ne 0 ]; then
      echo ${scriptname}: \
	    $ll_file1 now fails due to exit status=$status on file2
      continue
   fi

   # main checks
   if [ -s $lli_errfile1 -o -s $lli_errfile2 ]; then
      echo ${scriptname}: $ll_file1 now fails due to stderr
      echo "$lli_out1" > $lli_outfile1
      echo "$lli_out2" > $lli_outfile2
      continue
   fi
   if diff -q $lli_outfile1 $lli_outfile2; then
      # stdouts are the same
      echo ${scriptname}: $ll_file1 now passes
   else
      echo ${scriptname}: $ll_file1 now fails due to stdout
      echo "$lli_out1" > $lli_outfile1
      echo "$lli_out2" > $lli_outfile2
   fi
}


# ============================================================================

for ll_file in $*; do
   run_one_case $ll_file
done


# ============================================================================


