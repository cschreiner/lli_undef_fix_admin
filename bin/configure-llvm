#!/bin/bash
# Run llvm's configure script with customizations necessary for the current
# development host.

scriptname=lli_undef_fix3/admin/bin/configure-llvm
if [ -z "$PROJ_ROOT" ]; then
   echo ${scriptname}: environment variable PROJ_ROOT not set.
   exit 255
fi

# TODO2: consider running `gcc --version`, and if version is 4.6, then
# setting --disable-compiler-version-checks. 

# Note: configure's --disable-compiler-version-checks flag doesn't work with
# gcc4.6 because the build process requires compiler support for C++2011.

BUILD_DIR=`pwd`

# ----------------------------------------------------------------------------
# check the build directory

# is the current directory the intended build directory?
echo configuring to build in this directory:
echo "  " \"$BUILD_DIR\"
echo -n "Is that correct? (Y/n) "
read input
case $input in
   y*|Y*)
      echo continuing...
      ;;
   *)
      echo Please cd to the intended build directory and rerun this script.
      exit 255
      ;;
esac

# is the current directory empty?
if find | grep -vEq -e '^\\s*$'; then
   # all appears to be ok
   echo setting up build directory in $BUILD_DIR.
else
   echo ${scriptname}: current directory would be used 
   echo "  " as the build dir, but it does not appear to be empty.
   exit 255
fi

# ----------------------------------------------------------------------------
# configure the build

# note: configure requires --disable-bindings to avoid these warnings:
#    configure: WARNING: --enable-bindings=ocaml specified, but ctypes is not
#	installed
#    configure: WARNING: --enable-bindings=ocaml specified, but OUnit 2 is not
#	installed. Tests will not run
#    configure: error: Prequisites for bindings not satisfied. Fix them or use
#	configure --disable-bindings.
#
# Note: the OUnit2 warning can be resolved on Ubuntu 14.04 by installing:
#	libounit-ocaml-dev
# Note: fixing the ctypes warning can be resolved on Ubuntu 14.04 by
# 	installing:
#	libctypes-ocaml		libctypes-ocaml-dev
echo TODO: try using --enable-libffi to allow lli to load the standard
echo C library.
echo ======================================================================
$PROJ_ROOT/git/configure --prefix $PROJ_ROOT/live \
      --enable-optimized --disable-bindings \
      $host_specific_options "$@"

# ----------------------------------------------------------------------------
# set up stuff derived from the configuration

# lit needs a config-generated file in its test dir hierarchy
LIT_SITE_CFG=$PROJ_ROOT/git/test/lit.site.cfg 
if [ -e $LIT_SITE_CFG -o -L $LIT_SITE_CFG ]; then
   echo cleaning up old lit.site.cfg file at:
   echo "  " \"$LIT_SITE_CFG\"
   pushd `dirname $LIT_SITE_CFG`
   cleandir `basename $LIT_SITE_CFG`
   popd
fi
ln -s $BUILD_DIR/test/lit.site.cfg $LIT_SITE_CFG

# ----------------------------------------------------------------------------
# end of script

