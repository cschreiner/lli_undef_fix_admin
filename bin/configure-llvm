#!/bin/bash
# Run llvm's configure script with customizations necessary for the current
# development host.

# ----------------------------------------------------------------------------
# most basic setup

scriptname=lli_undef_fix3/admin/bin/configure-llvm

if [ -z "$PROJ_ROOT" ]; then
   echo ${scriptname}: environment variable PROJ_ROOT not set.
   exit 255
fi

# TODO2: consider running `gcc --version`, and if version is 4.6, then
# setting --disable-compiler-version-checks. 

# Note: configure's --disable-compiler-version-checks flag doesn't work with
# gcc4.6 because the build process requires compiler support for C++2011.

BUILD_DIR=`pwd`

# ----------------------------------------------------------------------------
# read command line arguments

need_to_exit="false"

arg_distcc="false"
arg_batch="false"
arg_prefix=""
arg_src=$PROJ_ROOT/git

while [ $# -gt 0 ]; do
   case "$1" in
      --distcc)
         arg_distcc="true"
         shift
         ;;
      --batch)
         arg_batch="true"
         shift
         ;;
      --src)
         shift
         if [ $# -gt 0 ]; then
	    arg_src="$1"
	    shift
         else
            echo ${scriptname}: error: --src must be followed by a directory.
            need_to_exit=true
         fi
         ;;
      --prefix)
         shift
         if [ $# -gt 0 ]; then
	    arg_prefix="$1"
	    shift
         else
            echo ${scriptname}: error: --prefix must be followed by a directory.
            need_to_exit=true
         fi
         ;;
      --config)
         # Args after this one need to be passed directly to the 
	 # <src_tree>/configure script.  Note that --prefix will be
	 # specified later, based on the --prefix option to this script.
         shift
         break
         ;;
      *)
         echo ${scriptname}: do not recognize argument "$1".
         need_to_exit="true"
         ;;
   esac
done

# . . . . . . . . . .
# check
if [ ! -d $arg_src ]; then
   echo ${scriptname}: error: --src dir does not appear to be a dir.
   echo "  " dir=\"$arg_src\"
   need_to_exit=true
fi
if [ ! -d $arg_prefix ]; then
   echo ${scriptname}: error: --prefix dir does not appear to be a dir.
   echo "  " dir=\"$arg_prefix\"
   need_to_exit=true
fi

# . . . . . . . . . .
# and exit if things are wrong
if [ $need_to_exit = "true" ]; then
   echo ${scriptname}: too many errors.  Unable to continue.
   exit 255
fi

# ----------------------------------------------------------------------------
# check the build directory and parameters

# is the current directory the intended build directory?
echo configuring to build in this directory:
echo "  " \"$BUILD_DIR\"
echo with src dir=\"$arg_src\"
echo with distcc=\"$arg_distcc\"
echo configure args=\""$@"\"
echo config tool: cmake
echo " "
if [ "$arg_batch" = "false" ]; then
   echo -n "Is that correct? (Y/n) "
   read input
   case $input in
      y*|Y*)
	 echo continuing...
	 ;;
      *)
	 echo Please cd to the intended build directory and rerun this script.
	 exit 255
	 ;;
   esac
else
   echo running in batch mode with no user interaction.
   echo " "
fi

# is the current directory empty?
if find | grep -vEq -e '^\\s*$'; then
   # all appears to be ok
   echo setting up build directory in $BUILD_DIR.
else
   echo ${scriptname}: current directory would be used 
   echo "  " as the build dir, but it does not appear to be empty.
   exit 255
fi

# ----------------------------------------------------------------------------
# setup based on above parameters

CMAKE_DISTCC_OPTS=""
if [ $arg_distcc = "true" ]; then
   export CC="distcc ${CC:-gcc}"
   export CXX="distcc ${CXX:-g++}"
   CMAKE_DISTCC_OPTS="-DCMAKE_C_COMPILER=\"$CC\" -DCMAKE_CXX_COMPILER=\"$CXX\""
fi

# ----------------------------------------------------------------------------
# print our setup and exit (only when debugging this script)

if false; then 
   echo " "
   echo would proceed with:
   echo arg_distcc=\"$arg_distcc\"
   echo extra args to configure=\< "$@" \>
   echo CC=\"$CC\"
   echo CXX=\"$CXX\"
   echo " "
   exit 0
fi

# ----------------------------------------------------------------------------
# configure the build

# note: configure requires --disable-bindings to avoid these warnings:
#    configure: WARNING: --enable-bindings=ocaml specified, but ctypes is not
#	installed
#    configure: WARNING: --enable-bindings=ocaml specified, but OUnit 2 is not
#	installed. Tests will not run
#    configure: error: Prequisites for bindings not satisfied. Fix them or use
#	configure --disable-bindings.
#
# Note: the OUnit2 warning can be resolved on Ubuntu 14.04 by installing:
#	libounit-ocaml-dev
# Note: fixing the ctypes warning can be resolved on Ubuntu 14.04 by
# 	installing:
#	libctypes-ocaml		libctypes-ocaml-dev
# TODO: see how --enable-libffi works.  This is supposed to allow the
# 	newly build lli use the standard C library.

if [ -z "$arg_prefix" ]; then
   prefix=$PROJ_ROOT/live
else
   prefix="$arg_prefix"
fi

echo ======================================================================

# configure with gnu autotools, which stopped working about May 2015.
#$PROJ_ROOT/git/configure --prefix $prefix \
#      --enable-optimized --disable-bindings --enable-libffi \
#      $host_specific_options "$@"

echo running cmake:
cmake -G Ninja -DCMAKE_INSTALL_PREFIX=$prefix $CMAKE_DISTCC_OPTS \
      $arg_src 
cmake_status=$?
echo " "
if [ $cmake_status -ne 0 ]; then
   echo cmake exited with status \"$cmake_status\".
   exit $cmake_status
fi

# ----------------------------------------------------------------------------
# set up stuff derived from the configuration

# lit needs a config-generated file in its test dir hierarchy
LIT_SITE_CFG=$PROJ_ROOT/git/test/lit.site.cfg 
if [ -e $LIT_SITE_CFG -o -L $LIT_SITE_CFG ]; then
   echo cleaning up old lit.site.cfg file at:
   echo "  " \"$LIT_SITE_CFG\"
   pushd `dirname $LIT_SITE_CFG`
   cleandir `basename $LIT_SITE_CFG`
   popd
fi
ln -s $BUILD_DIR/test/lit.site.cfg $LIT_SITE_CFG

# ----------------------------------------------------------------------------
# end of script

