#!/bin/sh
# This is an "is it interesting" test script for creduce.  Usually one runs
# creduce in a special work directory only containing the .c file to reduce,
# and a very short script that invokes this one with the name of the .c file
# given as an argument.

scriptname=creduce_interest_o0vso3

# ---------------------------------------------------------------------------
# process command line args
arg_cfile="$1"
if [ ! -f "$arg_cfile" ]; then
   echo ${scriptname}: error: no .c file on command line
   exit 127
fi

# ---------------------------------------------------------------------------
# check for required programs and environment 

# Yes, it is arguably computationally expensive to do these checks
# every time when creduce runs this script thousands of times in quick
# succession, but when these checks fail, the whole script fails in
# mysterious ways, and it is too easy to waste hours and hours of
# human debugging time.  Besides, the time to do these checks is probably
# much less than the time to run clang, gcc, or frama-c.

if [ -z "$PROJ_ROOT" ]; then
   echo ${scriptname}: error: environment variable PROJ_ROOT not set.
   exit 127
fi

if ! (echo $PATH | grep -q -e $PROJ_ROOT/admin/bin -e $PROJ_ROOT/dbin); then
   echo ${scriptname}: error: can not find PROJ_ROOT/admin/bin on PATH
   exit 127
fi

if ! which clang >> /dev/null ; then
   echo ${scriptname}: error: can not find clang
   exit 127
fi
if ! which gcc >> /dev/null ; then
   echo ${scriptname}: error: can not find gcc
   exit 127
fi
if ! which frama-c >> /dev/null; then
   echo ${scriptname}: error: can not find frama-c
   exit 127
fi
if ! which llifi >> /dev/null; then
   echo ${scriptname}: error: can not find llifi
   exit 127
fi

# ---------------------------------------------------------------------------
# set up
CFILE=`basename $arg_cfile .c`

BASENAME=$CFILE
if [ -z "$BASENAME" ]; then
   echo ${scriptname}: error: BASENAME is a null string, output files
   echo "  " would have very strange names.
   exit 127
fi

# TODO: explain the purpose of this variable.  Should its -I argument
# (i.e. the include directory) be the same as the environment variable
# $INCLUDE_DIR?
#
# command to run clang to produce an .ll file as output
CLANG_ll="clang -emit-llvm -c -I$TUUT/all/include/csmith-2.3.0 -S" 

# INCLUDE_DIR is an environment variable specifying the directory where the
# csmith header files are.
if [ -z "$INCLUDE_DIR" ]; then
   # set to needed include dir on my machine
   INCLUDE_DIR=$TUUT/all/include/csmith-2.3.0 
fi
if [ ! -d "$INCLUDE_DIR" ]; then
   echo ${scriptname}: error: include directory does not seem to exist.
   echo "  " dir=\"$INCLUDE_DIR\"
   exit 127
fi


# ---------------------------------------------------------------------------
regehr_test()
{
   rm -f out*.txt
   if 
     (
	clang -I$INCLUDE_DIR -pedantic -Wall -O0 \
	      -fsanitize=undefined,integer,signed-integer-overflow \
	      $CFILE.c -o $CFILE.fsanitize.bin >$BASENAME.fsanitize.out 2>&1 
     ) && \
     ! grep 'conversions than data arguments' $BASENAME.fsanitize.out &&\
     ! grep 'incompatible redeclaration' $BASENAME.fsanitize.out &&\
     ! grep 'ordered comparison between pointer' $BASENAME.fsanitize.out &&\
     ! grep 'eliding middle term' $BASENAME.fsanitize.out &&\
     ! grep 'end of non-void function' $BASENAME.fsanitize.out &&\
     ! grep 'invalid in C99' $BASENAME.fsanitize.out &&\
     ! grep 'specifies type' $BASENAME.fsanitize.out &&\
     ! grep 'should return a value' $BASENAME.fsanitize.out &&\
     ! grep 'uninitialized' $BASENAME.fsanitize.out &&\
     ! grep 'incompatible pointer to' $BASENAME.fsanitize.out &&\
     ! grep 'incompatible integer to' $BASENAME.fsanitize.out &&\
     ! grep 'type specifier missing' $BASENAME.fsanitize.out &&\
     gcc -I$INCLUDE_DIR -Wall -Wextra -O2 $CFILE.c -o $CFILE.gcc.bin \
         >$BASENAME.gcc.out 2>&1 &&\
     ! grep uninitialized $BASENAME.gcc.out &&\
     ! grep 'without a cast' $BASENAME.gcc.out &&\
     ! grep 'control reaches end' $BASENAME.gcc.out &&\
     ! grep 'return type defaults' $BASENAME.gcc.out &&\
     ! grep 'cast from pointer to integer' $BASENAME.gcc.out &&\
     ! grep 'useless type name in empty declaration' $BASENAME.gcc.out &&\
     ! grep 'no semicolon at end' $BASENAME.gcc.out &&\
     ! grep 'type defaults to' $BASENAME.gcc.out &&\
     ! grep 'too few arguments for format' $BASENAME.gcc.out &&\
     ! grep 'incompatible pointer' $BASENAME.gcc.out &&\
     ! grep 'ordered comparison of pointer with integer' $BASENAME.gcc.out &&\
     ! grep 'declaration does not declare anything' $BASENAME.gcc.out &&\
     ! grep 'expects type' $BASENAME.gcc.out &&\
     ! grep 'pointer from integer' $BASENAME.gcc.out &&\
     ! grep 'incompatible implicit' $BASENAME.gcc.out &&\
     ! grep 'excess elements in struct initializer' $BASENAME.gcc.out &&\
     ! grep 'comparison between pointer and integer' $BASENAME.gcc.out &&\
     # Disable gcc-- we aren't looking for execution differences between
     # different gcc optimization levels:
     #gcc -I$INCLUDE_DIR -O1 $CFILE.c -o small1 > cc_out1.txt 2>&1 &&\
     #./small1 >out1.txt 2>&1 &&\
     #gcc -I$INCLUDE_DIR -O2 $CFILE.c -o small2 > cc_out2.txt 2>&1 &&\
     #./small2 >out2.txt 2>&1 &&\
     #! diff out1.txt out2.txt &&\
     cp $CFILE.c $BASENAME-framac.c &&
     perl -pi.bak -e 's/int main \(int argc, char\* argv\[\]\)/int argc; char **argv; int main (void)/' $BASENAME-framac.c &&\
     (ulimit -t 5; frama-c -cpp-command "gcc -C -Dvolatile= -E -I.  -I$INCLUDE_DIR" -no-val-show-progress -machdep x86_64 -obviously-terminates $BASENAME-framac.c >${BASENAME}_framac.out 2>&1; status=$?; echo frama_c exit status=$status; exit $status) &&\
     ! egrep -i '(user error|assert)' ${BASENAME}_framac.out >/dev/null 2>&1
   then
     echo regehr_test returning 0
     return 0
   else
     echo regehr_test returning 1
     return 1
   fi
   status=$?
   echo regehr_test had an internal error, code=\"$status\" 
   exit $status
}

# Note: frama-c command used to be:
#
# frama-c -cpp-command "gcc -C -Dvolatile= -E -I. -I$INCLUDE_DIR"
#      -val-signed-overflow-alarms -val -stop-at-first-alarm 
#      -no-val-show-progress -machdep x86_64 -obviously-terminates 
#      -precise-unions $BASENAME-framac.c 


# ---------------------------------------------------------------------------
# clean up after the last run

if ls ${CFILE}_* 1>>/dev/null 2>> /dev/null; then
   rm ${CFILE}_*
fi

# ---------------------------------------------------------------------------
# check with John's test
regehr_test
status=$?
if [ $status -ne 0 ]; then 
   echo regehr_test failed
   exit 1 # not interesting
fi

# ---------------------------------------------------------------------------
# sanity check with clang's -fsanitize=undefined

# it is already built; run it
(ulimit -t 5; ./$CFILE.fsanitize.bin 1> $CFILE.fsanitize.stdout 2> \
      $CFILE.fsanitize.stderr )   
status=$?
if [ $status -eq 0 ]; then
   # exit 0 means success, 
   echo all ok >> /dev/null
elif [ $status -eq 137 ]; then
   # exit 137 is 128 (exited due to signal)+ 9 (signal=sigkill)
   echo fsanitize=undefined version exited due to sigkill, suspect infinite loop
   exit 1
else 
   echo fsanitize=undefined version failed, status=\"$status\"
   exit 1
fi
if [ ! -e $CFILE.fsanitize.stderr ]; then
   echo fsanitize=undef version could not produce a stderr file \(it should
   echo "  " produce one with 0 length\)
   exit 127 
elif [ -s $CFILE.fsanitize.stderr ]; then
   grep -v "unsigned integer overflow" $CFILE.fsanitize.stderr > \
	 $CFILE.fsanitize_filtered.stderr
   # we are trying to catch errors like these:
   #run7324.c:1004:18: runtime error: unsigned integer overflow: 0 - 1 cannot be represented in type 'uint64_t' (aka 'unsigned long')
   #/uusoc/res/embed/users/cas/tuut/x86_64/all/include/csmith-2.3.0/safe_math.h:760:14: runtime error: unsigned integer overflow: 8 - 4294967295 cannot be represented in type 'unsigned int'
   #run7324.c:245:15: runtime error: unsigned integer overflow: 4294967295 + 1 cannot be represented in type 'uint32_t' (aka 'unsigned int')
   if [ -s $CFILE.fsanitize_filtered.stderr ]; then
      echo fsanitize=undefined version wrote unexpectly to stderr
      exit 127 # program emitted error messages
   fi
fi

# ---------------------------------------------------------------------------
# compile
$CLANG_ll -O0 $CFILE.c > ${CFILE}.clang_ll_o0.out 2>&1 
status=$?
if [ $status -ne 0 ]; then 
   echo clang o0 failed
   exit 1
fi
mv $CFILE.ll ${CFILE}_o0.ll

$CLANG_ll -O3 $CFILE.c > ${CFILE}.clang_ll_o0.out 2>&1 
status=$?
if [ $status -ne 0 ]; then 
   echo clang o3 failed
   exit 1
fi
mv $CFILE.ll ${CFILE}_o3.ll

# ---------------------------------------------------------------------------
# run
echo running... #;;

(ulimit -t 15; llifi ${CFILE}_o0.ll > \
      ${CFILE}_o0.ll.stdout 2> ${CFILE}_o0.ll.stderr )
o0_status=$?
echo o0_status=\"$o0_status\"

(ulimit -t 15; llifi ${CFILE}_o3.ll > \
      ${CFILE}_o3.ll.stdout 2> ${CFILE}_o3.ll.stderr )
o3_status=$?
echo o3_status=\"$o3_status\"

# ---------------------------------------------------------------------------
# compare output
echo comparing output #;;
echo pwd=`pwd` #;;

# Both o0 and o3 can't exit due to infinite loops. If they both fail
# with the same exit status, the infinite loop is probably in the
# original .c code, which is bad.  
#
# TODO: rewrite this as 
# if [ o0 == TIMEOUT_EXIT_STATUS and o3 == TIMEOUT_EXIT_STATUS ]; then ...
if [ $o0_status -ne 0 -a $o3_status -ne 0 -a $o0_status -eq $o3_status ]; then
   # case1
   echo both o0 and o3 failed: \
	 o0_status=\"$o0_status\", o3_status=\"$o3_status\"
   exit 1
fi

# compare the exit statuses
if [ $o0_status -ne $o3_status ]; then
   # case2
   echo exit statuses differ #;;
   exit 0 # they are different, therefore interesting
else
   echo o0 and o3 had the same exit status of \"$o0_status\"
fi

# make sure that only the intended logic cases get this far
#
# for $o0_status and $o3_status:
#
#             o3-----------------------------------------
#              zero                  nonzero
#              o0==03     o0!=o3     o0==03     o0!=o3
#            ...........................................
# o0 zero    : case3      impossible impossible case2
#    nonzero : impossible case2      case1      case2
#
if [ $o0_status -eq 0 -a $o3_status -eq 0 ]; then
   # case3
   echo assertion succeeded >> /dev/null
else
   echo assertion failed at 2015nov05_182350, 
   echo "  " o0_status=\"$o0_status\", o3_status=\"$o3_status\"
   exit 1
fi

# make sure both stdout files are present
if [ ! -s ${CFILE}_o0.ll.stdout -a -s ${CFILE}_o3.ll.stdout ]; then 
   # one file has contents, but not the other, therefore interesting
   exit 0
fi
if [ -s ${CFILE}_o0.ll.stdout -a ! -s ${CFILE}_o3.ll.stdout ]; then 
   # one file has contents, but not the other, therefore interesting
   exit 0
fi

# compare the stdout files
if [ -e ${CFILE}_o0.ll.stdout -a -e ${CFILE}_o3.ll.stdout ]; then 
   diff ${CFILE}_o0.ll.stdout ${CFILE}_o3.ll.stdout 
   status=$?
   if [ $status -ne 0 ]; then 
      exit 0 # they are different, therefore interesting
   else
      echo o0 and o3 produce the same stdout
      exit 1
   fi
fi

# make sure both stderr files are present
if [ ! -s ${CFILE}_o0.ll.stderr -a -s ${CFILE}_o3.ll.stderr ]; then 
   # one file has contents, but not the other, therefore interesting
   exit 0
fi
if [ -s ${CFILE}_o0.ll.stderr -a ! -s ${CFILE}_o3.ll.stderr ]; then 
   # one file has contents, but not the other, therefore interesting
   exit 0
fi

# compare the stderr files
if [ -e ${CFILE}_o0.ll.stderr -a -e ${CFILE}_o3.ll.stderr ]; then 
   diff ${CFILE}_o0.ll.stderr ${CFILE}_o3.ll.stderr 
   status=$?
   if [ $status -ne 0 ]; then 
      exit 0 # they are different, therefore interesting
   else
      echo o0 and o3 produce the same stderr
   fi
fi

# ---------------------------------------------------------------------------
# clean up and exit

echo everything appears the same, therefore not interesting
exit 1

# ---------------------------------------------------------------------------
# end of script

