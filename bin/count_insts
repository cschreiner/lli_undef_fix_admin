#!/usr/bin/perl
# counts the number of times an LLVM IR instruction is used in a set of files

@terminator_insts=qw (ret br switch indirectbr invoke resume unreachable);
@binary_insts=qw(add sub mul udiv sdiv urem srem);
      # excluding floating-point: fadd fsub fmul fdiv frem
@bitwise_insts=qw(shl lshr ashr and or xor);
@vector_insts=qw(extractelement insertelement shufflevector);
@aggregate_insts=qw(extractvalue insertvalue);
@mem_insts=qw(alloca load store fence cmpxchg atomicrmw getelementptr);
@conversion_insts=qw(trunc zext sext ptrtoint inttoptr bitcast addrspacecast);
      # excluding floating point: fptrunc fpext fptoui fptosi uitofp sitofp
@other_insts=qw(icmp phi select call va_arg landingpad);
      # excluding floating point: fcmp
@bit_manip_insts=qw(llvm.bswap llvm.ctpop llvm.ctlz llvm.cttz);
@arith_w_oflow_insts=qw(llvm.sadd.with.overflow llvm.uadd.with.overflow
      llvm.ssub.with.overflow llvm.usub.with.overflow
      llvm.smul.with.overflow llvm.umul.with.overflow );

@all_insts= ( @terminator_insts, @binary_insts, @bitwise_insts, @vector_insts, 
      @aggregate_insts, @mem_insts, @conversion_insts, @other_insts,
      @bit_manip_insts, @arith_w_oflow_insts, );

our( %count_hash );
foreach my $inst ( @all_insts )  {
   $count_hash{$inst}= 0;
}

our( @arg_files )= @ARGV;
foreach my $file ( @arg_files )  {
   foreach my $inst ( @all_insts )  {

      my $cmd="grep -E \"\\b$inst\\b\"";
      if ( 0 )  {
	 print "cmd=<$cmd>\n";
      }
      
      $count=`$cmd $args | grep -c ^`;
      chomp $count;
      $count_hash{$inst}+= $count;
   }
}

foreach my $inst ( @all_insts )  {
   print "$count $inst \n";
}


