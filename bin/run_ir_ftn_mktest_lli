#!/bin/bash
# script to run ir_ftn_mktest + lli and look for definedness issues
# between optimized and unoptimized code.

scriptname=run_ir_ftn_mktest_lli

# TODO: tweak ir_ftn_mktest so it warns about functions that have no arguments
# that get used.

# ===========================================================================
# set up constants
POUND32='################################'
DOUBLE_DASH_32="================================"

# ============================================================================
echo_run_time()  
# ============================================================================
{
   local arg_start_time=$1
   local arg_stop_time=$1
   local arg_label="$@"

   local duration_s=$(( $arg_stop_time - $arg_start_time ))
   local duration_min=$(( $duration_s / 60 ))
   local duration_rem_s=$(( $duration_s % 60 ))
   local duration_hrs=$(( $duration_min / 60 ))
   local duration_rem_min=$(( $duration_min % 60 ))
   echo $arg_label \
	 run time= ${duration_hrs}:${duration_rem_min}:${duration_rem_s} \
	 \($duration_s s\)
   return 0
}


# ============================================================================
run_one_file()  
# ============================================================================
{
   local ftn_name="run_one_file"
   local arg_irfile="$1" # read the functions to test from this file
   if [ -z "$arg_irfile" ]; then
      echo ${scriptname}: no IR file specified, nothing to do.
      exit 127
   fi

   echo got to venus line 46 #;;
   local workdir=$workdir_parent/`basename $arg_irfile`
   if [ -e $workdir ]; then
      workdir=${workdir}_$script_id
      if [ -e $workdir ]; then
         (
	    echo ERROR: workdir exists:
	    echo "  " dir=\"$workdir\"
            echo "  " skipping \"$arg_irfile\".
	 ) >> $workdir_parent/log
         return 126
      fi
   fi

   echo workdir=\"$workdir\"
   mkdir -p $workdir
   for ii in INTERESTING UNINTERESTING TOOL_ISSUE/DUP PASSED KILLED \
	 NOT_YET_DONE; do
      mkdir -p $workdir/$ii
   done

   local current_ftn_num=0;
   local start_time=`date +%s`
   local total_ftns=0 # a value must be computed later
   local metric_num_passed=0
   local metric_num_needs_attention=0

   echo running ir_ftn_mktest on \"$arg_irfile\"
   echo running $PROJ_ROOT/admin/bin/ir_ftn_mktest -n 300 $arg_irfile $workdir #;;
   $PROJ_ROOT/admin/bin/ir_ftn_mktest -n 300 $arg_irfile $workdir/NOT_YET_DONE
   local ir_ftn_mktest_status=$?
   if [ $ir_ftn_mktest_status -ne 0 ]; then
      echo ir_ftn_mktest exited with status \"$ir_ftn_mktest_status\"
      return $ir_ftn_mktest_status
   fi

   cd $workdir
   total_ftns=`ls -1 NOT_YET_DONE/*.ll | grep -c ^`

   (
      echo invocation: $scriptname $ftn_name'()' "$@" 
      echo start time=`date +%Y%b%d_%H%M%S` \($start_time s\)
      echo host=`hostname` "  " pid=$$
      echo " "
   ) >> $workdir/log

   if [ $total_ftns -eq 0 ]; then
      echo No functions found, nothing to do. >> $workdir/log
      echo No functions found, nothing to do. 
      return 126
   fi

   for raw_llfile in NOT_YET_DONE/*.ll; do
      echo got to earth line 98 #;;
      local llfile_basename=`basename $raw_llfile .ll`
      local llfile_o0=${llfile_basename}_o0.ll
      local llfile_o3=${llfile_basename}_o3.ll

      local report_file=$llfile_basename.report 
      touch $report_file
      (
	 echo report for basename $llfile_basename 
	 echo " " 
      ) >> $report_file

      # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
      # report progress
      current_ftn_num=$(( $current_ftn_num+ 1 ))
      local percent=$(( 100 * $current_ftn_num / $total_ftns ))

      local current_time=`date +%s`
      # formula development:
      # time_remaining = total_time * percent_remaining
      # 
      # time_remaining = total_time * (100-percent_so_far)
      # 
      #                      time_so_far
      # time_remaining = (----------------) * (100-percent_so_far)
      #                    percent_so_far
      # 
      #                   current_time - start_time
      # time_remaining = (-------------------------) * (100-percent_so_far)
      #                    percent_so_far
      if [ $percent -eq 0 ]; then
	 local time_remaining=2147418112
	 local time_remaining_min=2147418112
      else 
	 local time_remaining=$(( ($current_time-$start_time)*(100-$percent)/ \
	       ($percent) ))
	 local time_remaining_min=$(( $time_remaining / 60 + 1 ))
      fi

      echo examining $llfile_basename \
	    \($current_ftn_num of $total_ftns \(${percent}%\)\) \
	    \(~$time_remaining_min min left\) 

      mv $raw_llfile $llfile_o0

      # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
      # run opt
      if [ -a $arg_o3_ll ]; then
	 opt -O3 -S $llfile_o0 > $llfile_o3 2> $llfile_basename.opt.stderr
      else
         # simulate running opt during while testing this script
	 cat $arg_o3_ll > $llfile_o3
         touch $llfile_basename.opt.stderr
      fi

      # TODO: add test here to insure program catches an undefined
      # optimization behavior.

      local opt_status=$?
      if [ $opt_status -ne 0 -o -s $llfile_basename.opt.stderr ]; then
	 (
	    echo opt failed with status \"$opt_status\", 
	    echo see its stderr in $llfile_basename.opt.stderr 
	 ) >> $report_file
	 continue
      fi

      # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
      # run the unoptimized and optimized versions
      llifi $llfile_o0 > $llfile_o0.stdout 2> $llfile_o0.stderr
      local o0_status=$?
      echo o0_status=$o0_status >> $report_file

      if [ -z $arg_o3_script ]; then
	 llifi $llfile_o3 > $llfile_o3.stdout 2> $llfile_o3.stderr
      else
         # simulate running $llfile_o3 while testing this script
         $arg_o3_script > $llfile_o3.stdout 2> $llfile_o3.stderr
      fi
      local o3_status=$?
      echo o3_status=$o3_status >> $report_file

      # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
      # tests for less definedness
      local needs_attention=false
      if [ "$o0_status" -eq 0 -a "$o3_status" -ne 0 ]; then
	 echo o3 is less defined by exit status >> $report_file
	 needs_attention=true
      fi

      grep -q poison $llfile_o0.stdout 
      local o0_poison=$?
      echo o0_poison=$o0_poison '(1 means no poison)' >> $report_file
      grep -q poison $llfile_o3.stdout 
      local o3_poison=$?
      echo o3_poison=$o3_poison '(1 means no poison)' >> $report_file
      if [ "$o0_poison" -eq 1 -a "$o3_poison" -ne 1 ]; then
	 echo o3 is less defined by poison >> $report_file
	 needs_attention=true
      fi

      diff -q $llfile_o0.stdout $llfile_o3.stdout >> /dev/null
      local diff_status=$?
      if [ $diff_status -ne 0 ]; then
	 if [ "$needs_attention" = "false" -a \
	       $o0_status -eq 0 -a $o0_poison -eq 1 ]; then
	    echo stdout differs yet everything else seems in order \
		  >> $report_file
	    needs_attention=true
	 else 
	    echo stdout differs, as expected given other problems \
		  >> $report_file
	 fi
      fi

      # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
      # finish the report
      echo needs_attention=\"$needs_attention\" >> $report_file
      if [ "$needs_attention" = "true" ]; then
	 echo $llfile_basename needs_attention
	 metric_num_needs_attention=$(( $metric_num_needs_attention + 1 ))
      fi

      # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
      # copy the report into the log for later analysis
      echo got to mars line 223 #;;
      (
	 echo ${POUND32}${POUND32} 
         echo `basename $report_file`:
         echo " "
         cat $report_file
         echo " "
	 echo ${POUND32}${POUND32} 
      ) >> $workdir/log

      # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
      # move stuff not needing attention into another directory
      if [ "$needs_attention" != "true" ]; then
         tar -cjf PASSED/${llfile_basename}.tar.bz2 \
	       ${llfile_basename}.* ${llfile_basename}_*
         rm ${llfile_basename}.* ${llfile_basename}_*
	 metric_num_passed=$(( $metric_num_passed + 1 ))
      fi
   done

   # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
   # log summary metrics
   (
      echo " "
      echo ${DOUBLE_DASH_32}${DOUBLE_DASH_32}
      stop_time=`date +%s`
      echo stop time=`date +%Y%b%d_%H%M%S` \($stop_time s\)
      echo_run_time $start_time $stop_time file
      echo " "

      echo "number of ftns passing= ......... \"$metric_num_passed\"
      echo "number of ftns needing attention= \"$metric_num_needs_attention\"
      echo total number of ftns= ............ \"$total_ftns\"
      echo " "
      echo '(end of log)'
      echo " "
   ) >> $workdir/log

   # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
   # log summary metrics
   return 0
}

# ==========================================================================
# read command line args
arg_master_dir=""
arg_verbose="false"
arg_o3_script=""
arg_o3_ll=""
declare -a arg_files_array

# ----------------------------------------------------------------------
# parse args
need_to_exit=false
while [ $# -ge 1 ]; do
   case "$1" in
      -v|--verbose)
         arg_verbose=true
         shift
         ;;
      -d)
         shift
         if [ $# -ge 1 ]; then
	    arg_master_dir="$1"
	    shift
	 else
            echo ${scriptname}: error: directory name must follow \"-d\".
            need_to_exit=true
         fi
	 ;;
      --o3-script)
         shift
         if [ $# -ge 1 ]; then
	    arg_o3_script="$1"
	    shift
	 else
            echo ${scriptname}: error: a script name must follow \"--o3-script\".
            need_to_exit=true
         fi
	 ;;
      --o3-ll)
         shift
         if [ $# -ge 1 ]; then
	    arg_o3_ll="$1"
	    shift
	 else
            echo ${scriptname}: error: an .ll file must follow \"--o3-ll\".
            need_to_exit=true
         fi
	 ;;
      -*)
         echo ${scriptname}: error: do not understand option \"$1\"
	 need_to_exit=true
	 shift
	 ;;
      *)
         arg_files_array=( "${arg_files_array[@]}" "$1" )
         shift
   esac
done

if [ "$arg_verbose" = "true" ]; then 
   # print arguments for debugging
   echo arg_master_dir=\"$arg_master_dir\"
   echo arg_verbose=\"$arg_verbose\"
   for ii in "${arg_files_array[@]}"; do
      echo arg=\"$ii\"
   done
fi

# ----------------------------------------------------------------------
# check args

if [ -n "$arg_master_dir" -a ! -d "$arg_master_dir" ]; then
   echo ${scriptname}: error: workdir parent does not appear to be an existing
   echo	"  " directory.  Please create the directory and rerun.
   echo "  " dir=\"$arg_master_dir\"
   need_to_exit=true
fi

if [ "$need_to_exit" = "true" ]; then
   echo ${scriptname}: too many errors, exiting.
   exit 255
fi

# ===========================================================================
# set up 

script_id=`hostname -s`_`date +%Y%b%d_%H%M%S`_$$

# Concept definitions:
# master_dir: all hosts running related jobs write their script_logfiles here.
#	This is typically on a networked hard drive.
# workdir_parent: a dir on a local hard drive where per-input-file workdirs 
#	are created, along with the per-input-file logs.  This distributes
#	disk accesses across many hard drives, so no one hard drive is as 
#	likely to get thrashed.
# Often, the master_dir is also the workdir_parent for one host.

if [ -z "$arg_master_dir" ]; then
   master_dir=$PROJ_ROOT/`hostname -s`/test/${scriptname}..${script_id}
   workdir_parent="$master_dir"
   mkdir -p $master_dir
else 
   master_dir="$arg_master_dir"
   echo got to mercury line 360 #;;
   workdir_parent=$PROJ_ROOT/`hostname -s`/test/`basename $master_dir`
fi
echo Using master dir=
echo "  " \"$master_dir\"
echo Using workdir parent=
echo "  " \"$workdir_parent\"

script_logfile=$master_dir/logfile_${script_id}

global_start_time=`date +%s`
(
   echo `hostname -s` start time=`date +%Y%b%d_%H%M%S` \($start_time s\)
   echo "  " will attempt to process these files:
   for ii in "${arg_files_array[@]}"; do
      echo "  " \"$ii\"
   done
   echo " "
) >> $script_logfile


# ===========================================================================
# main program

for file in "${arg_files_array[@]}"; do
   run_one_file "$file"
done

# ===========================================================================
# clean up
global_stop_time=`date +%s`
(
   echo " "
   echo `hostname -s` stop time=`date +%Y%b%d_%H%M%S` \($global_stop_time s\)
   echo_run_time $global_start_time $global_stop_time "`hostname -s` global"
   echo " "
) >> $script_logfile

# ===========================================================================
# end of script
