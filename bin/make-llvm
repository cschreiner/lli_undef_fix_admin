#!/bin/bash
# build llvm and install it
scriptname=llvm_undef_fix3/admin/bin/make-llvm

if [ -z "$PROJ_ROOT" ]; then
   echo ${scriptname}: environment variable PROJ_ROOT not set.
   exit 255
fi

# ---------------------------------------------------------------------------
# set things up

separator="===================================================================="

if [ -z "$BUILD_ROOT" ]; then
   BUILD_ROOT=$PROJ_ROOT/llvm.build
fi
cd $BUILD_ROOT
echo building in directory:
echo "  " \"`pwd`\"
if [ -f BUILD.out ]; then
   cleandir BUILD.out
fi

# test for distcc
distcc=false
if [ -n "$DISTCC_HOSTS" ]; then
   grep -Eq -e '^CC=.*\bdistcc\b' config.log
   cc_uses_distcc=$?
   grep -Eq -e '^CXX=.*\bdistcc\b' config.log
   cxx_uses_distcc=$?
   if [ $cc_uses_distcc==0 -o $cxx_uses_distcc==0 ]; then
      distcc=true
   else
      echo FYI: config file ignores distcc, despite DISTCC_HOSTS being set.
   fi
fi

# ---------------------------------------------------------------------------
# start logging the output
(
   start_time_hms="`date`"
   start_time=`date +%s`
   echo FYI: using distcc=$distcc.
   echo "  " DISTCC_HOSTS=\"$DISTCC_HOSTS\"
   echo " "

   # ------------------------------------------------------------------------
   # do the core build

   # Note: Ubuntu 12's 4.8.? compiler (built from a ppa) was optimal on host
   # dyson (4 cores) with 4 processes  Ubuntu 14's 4.8.2 compiler is just
   # using 50% cpu (per vmstat) with 4 processes, so we will try 8.

   # TODO: find some way to automatically adjust num_procs for massive
   # parallel builds.
   if [ $distcc == "true" ]; then
      num_procs=15
   else
      num_procs=8
   fi
   echo FYI: using $num_procs processes.

   make -j $num_procs "$@"
   make_status=$?

   if [ $make_status -eq 0 ]; then
      echo " "
      echo $separator
      echo Installing...
      echo " "
      make install
      make_status=$?
   fi

   # ------------------------------------------------------------------------
   # report build statistics

   # compute build time
   stop_time_hms="`date`"
   stop_time=`date +%s`

   elapsed_s=$(( $stop_time - $start_time ))
   elapsed_min=$(( $elapsed_s / 60 ))
   elapsed_min_rem_s=$(( $elapsed_s % 60 ))

   echo " "
   (
      echo $separator
      echo build status=$make_status \(should be 0\)
      printf "build time %d:%2.2d (%d s)\n" \
	    $elapsed_min $elapsed_min_rem_s $elapsed_s 
      echo "  " start time=$start_time_hms
      echo "  " stop time=$stop_time_hms
   ) | tee -a $PROJ_ROOT/admin/log/BUILD_time.log
   (cd $PROJ_ROOT/admin/log; \
	 git ci -m"recorded another build time" BUILD_time.log )

# ---------------------------------------------------------------------------
# stop logging output
) 2>&1 | tee BUILD.out

# ---------------------------------------------------------------------------
# end of script

