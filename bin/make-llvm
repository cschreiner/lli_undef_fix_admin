#!/bin/bash
# build llvm and install it
scriptname=llvm_undef_fix3/admin/bin/make-llvm

if [ -z "$PROJ_ROOT" ]; then
   echo ${scriptname}: environment variable PROJ_ROOT not set.
   exit 255
fi

# ---------------------------------------------------------------------------
# parse command-line parameters

while [ $# -gt 0 ]; do
   case "$1" in
      --cwd)
         BUILD_ROOT=`pwd`
         echo FYI: '<<<' building in current directory '>>>'
         shift
         ;;
      --make)
         # further options will be passed to make verbatim
         shift
         break
         ;;
      *)
         echo ${scriptname}: error: do not understand argument \"$1\"
         exit 127
         ;;
   esac
done


# ---------------------------------------------------------------------------
# set things up

separator="===================================================================="

if [ -z "$BUILD_ROOT" ]; then
   BUILD_ROOT=$PROJ_ROOT/llvm.build
fi
cd $BUILD_ROOT
echo building in directory:
echo "  " \"`pwd`\"
if [ -f BUILD.out ]; then
   cleandir BUILD.out
fi


# ---------------------------------------------------------------------------
# set up distcc-related stuff

# test for distcc
distcc=false
if [ -n "$DISTCC_HOSTS" ]; then
   grep -Eq -e '^CC=.*\bdistcc\b' config.log
   cc_uses_distcc=$?
   grep -Eq -e '^CXX=.*\bdistcc\b' config.log
   cxx_uses_distcc=$?
   if [ $cc_uses_distcc==0 -o $cxx_uses_distcc==0 ]; then
      distcc=true
   else
      echo FYI: config file ignores distcc, despite DISTCC_HOSTS being set.
   fi
fi

# figure out how many processes make should run
if [ $distcc == "true" ]; then
   # parse the total number of processes out of the DISTCC_HOSTS env var
   # which has form hostname/num_procs hostname2/num_procs...
   # e.g.   "localhost/8 babel/4 bethe 6"
   # awk program with debugging:
   #  awk 'BEGIN {RS=" "; FS="/"; total=0;} {total= total+$2; print $2, total;} END { print "total=", total;}'
   total_distcc_procs=`echo $DISTCC_HOSTS | \
	 awk 'BEGIN {RS=" "; FS="/"; total=0;} {total= total+$2; } END { print total;}' `
else
   total_distcc_procs=0
fi

# ---------------------------------------------------------------------------
# start logging the output
(
   start_time_hms="`date`"
   start_time=`date +%s`
   echo FYI: using distcc=$distcc.
   echo "  " DISTCC_HOSTS=\"$DISTCC_HOSTS\"
   echo " "

   # ------------------------------------------------------------------------
   # do the core build

   # Note: Ubuntu 12's 4.8.? compiler (built from a ppa) was optimal on host
   # dyson (4 cores) with 4 processes  Ubuntu 14's 4.8.2 compiler is just
   # using 50% cpu (per vmstat) with 4 processes, so we will try 8.

   num_procs=0
   if [ $total_distcc_procs -eq 0 ]; then
      # count the number of cores on localhost
      num_procs=`cat /proc/cpuinfo | awk -F : 'BEGIN { tt=0; } /^processor/
{ tt++; } END { print tt;}'`
      if [ $num_procs -lt 1 ]; then
	 num_procs=8
	 # TODO2: find a good default
      fi
   else
      num_procs=$total_distcc_procs;
   fi
   echo FYI: using $num_procs processes.

   make -j $num_procs "$@"
   make_status=$?

   if [ $make_status -eq 0 ]; then
      echo " "
      echo $separator
      echo Installing...
      echo " "
      make install
      make_status=$?
   fi

   # ------------------------------------------------------------------------
   # report build statistics

   # compute build time
   stop_time_hms="`date`"
   stop_time=`date +%s`

   elapsed_s=$(( $stop_time - $start_time ))
   elapsed_min=$(( $elapsed_s / 60 ))
   elapsed_min_rem_s=$(( $elapsed_s % 60 ))

   echo " "
   (
      echo $separator
      echo build status=$make_status \(should be 0\)
      printf "build time %d:%2.2d (%d s)\n" \
	    $elapsed_min $elapsed_min_rem_s $elapsed_s 
      echo "  " start time=$start_time_hms
      echo "  " stop time=$stop_time_hms
   ) | tee -a $PROJ_ROOT/admin/log/BUILD_time.log
   (cd $PROJ_ROOT/admin/log; \
	 git ci -m"recorded another build time" BUILD_time.log )

# ---------------------------------------------------------------------------
# stop logging output
) 2>&1 | tee BUILD.out

# ---------------------------------------------------------------------------
# end of script

