#!/usr/bin/perl
#
# ****************************************************************************
# Project Name: lli_undef_fix
# Script Name: optllreduce 
#
# For a copyright information, see the statement in the POD documentation at
# the end of this file.  
#
# Description: 
#	
#
# ****************************************************************************

# ****************************************************************************
# Revision Control Information (customized for RCS)
#
# $Revision: 1.2 $
# $Date: 2014/01/23 21:23:34 $
# $Author: cas $
#
# ****************************************************************************


# ****************************************************************************
# Compiler Directives (use's)
# make sure we are using this Perl version or later
use 5.10.0;

use strict;
use Getopt::Long;
use Config;
use File::Spec;
use FileHandle;

# ****************************************************************************
# package identification

#package optllreduce;


# ****************************************************************************
# package BEGIN and END functions

   # =========================================================================
   # subroutine BEGIN
   # =========================================================================
   sub BEGIN
   {{
      # set basic constants, which should be defined in all scripts
      use vars qw ( *TRUE *FALSE *PERL_SUCCESS *PERL_FAILURE
            *EXIT_SUCCESS *EXIT_FAILURE );
      *TRUE= \1;
      *FALSE= \0;
      *PERL_SUCCESS= \1;
      *PERL_FAILURE= \0;
      *EXIT_SUCCESS= \0;
      *EXIT_FAILURE= \-1;

      use vars qw ( *HELP_TYPE_EMERGENCY *HELP_TYPE_FULL
            *HELP_TYPE_MAN  *HELP_TYPE_REVISION );
      *HELP_TYPE_EMERGENCY= \2960; # number chosen at random
      *HELP_TYPE_FULL= \2961; # one more than the above
      *HELP_TYPE_MAN= \2962; # one more than the above
      *HELP_TYPE_REVISION= \2963; # one more than the above

      # ----------------------------------------------------------------------
      # script-specific constants
      use vars qw ( *scriptname $revision *SCRIPT_COPYRIGHT_YEAR 
	    $debug_flag );
      *scriptname= \"optllreduce";
      {
         my ($null);
         ($null, $revision)= split / /, '$Revision $';
         $revision=~ tr/$/ /s;
      }
      *SCRIPT_COPYRIGHT_YEAR= \2015;
      $debug_flag= $FALSE;

      # ----------------------------------------------------------------------
      # set library search paths

      use FindBin;
      use lib "$FindBin::Bin/../lib";

      if ( exists($ENV{'USR_CAS_LIB'}) )  {
         push @INC, File::Spec->catdir( $ENV{'USR_CAS_LIB'} . 'perl' );
      }

      # ----------------------------------------------------------------------
      # require's and use's needed in the BEGIN block

      require cas_timestamp;

      # ----------------------------------------------------------------------
      # script-wide config options

      # use synchronous I/O
      $|= $main::TRUE;


      # ----------------------------------------------------------------------
      # other stuff

   }}

   # =========================================================================
   # require's and use's needed by the rest of the program
   # =========================================================================

   # =========================================================================
   # subroutine END
   # =========================================================================
   sub END
   {{
      
   }}

# ****************************************************************************
# start the script

## ===========================================================================
##   set debug mode

if ( scalar(@ARGV) > 0 )  {
   if ( $#ARGV >= $[ )  { 
      if ( $ARGV[$[] eq "debug"  )  { 
	 $debug_flag= $TRUE;
	 shift @ARGV; print "$scriptname running in debug mode \n";
      } 
   } 
}

## ===========================================================================
##   get command line args

use vars qw( $need_to_exit );
$need_to_exit= $FALSE;

our( @ORIG_ARGV )= @ARGV; # a pristine copy of @ARGV for use later.

## -----------------------------------------------------------------------
##   set up defaults

our $arg_infile= "";
our @arg_opt_options_list= "";
our $arg_print_opt_passes= $main::FALSE;
our $arg_verbosity= 0;
our $arg_optlevel= undef;

## -----------------------------------------------------------------------
##   parse arguments that GetOpt can't handle

if ( scalar(@ARGV) > 0 )  {
   if ( $ARGV[ $[ ] eq "help" ||
	 $ARGV[ $[ ] eq "-help" )  {
      shift @ARGV;
      &give_help ( $HELP_TYPE_FULL );
   }
}

## -----------------------------------------------------------------------
##   run GetOpt

{
   my ( $arg_help, $arg_man, $arg_revision );

   eval {
      Getopt::Long::Configure ( 'no_auto_abbrev', 'no_getopt_compat',
            'permute', 'bundling', 'no_ignore_case', 'no_pass_through' );
   };
   if ( $@ ne "" )  {
      eval {
         # try again, using the older Getopt::Long call
         &Getopt::Long::config ( 'no_auto_abbrev', 'no_getopt_compat',
               'permute', 'bundling', 'no_ignore_case', 'no_pass_through' );
      };
      if ( $@ ne "" ) { die; }
   }

   GetOptions ( "help|h" => \$arg_help, 
	 "man" => \$arg_man,
	 "revision" => \$arg_revision,
         "opt=s" => \@arg_opt_options_list,
         "print-opt-passes" => \$arg_print_opt_passes,
         "v|verbose+" => \$arg_verbosity,
         "O=s" => \$arg_optlevel,
	 );

   if ( $arg_help )  {
      &give_help ( $HELP_TYPE_FULL );
      $need_to_exit= $main::TRUE;
   } elsif ( $arg_man )  {
      &give_help ( $HELP_TYPE_MAN );
      $need_to_exit= $main::TRUE;
   } elsif ( $arg_revision )  {
      &give_help ( $HELP_TYPE_REVISION );
      $need_to_exit= $main::TRUE;
   }
      
}

if ( $need_to_exit )  { print "\n"; exit $EXIT_FAILURE; }


## -----------------------------------------------------------------------
##   parse arguments that GetOptions left behind

$arg_infile= shift @ARGV;

## -----------------------------------------------------------------------
##   check arguments

if ( $arg_infile eq "" )  {
   warn $scriptname . ": no input file found on command line. \n";
   $need_to_exit= $main::TRUE;
}

if ( $need_to_exit )  { print "\n"; exit $EXIT_FAILURE; }

## -----------------------------------------------------------------------
##   print out arguments
if ( $debug_flag )  {


}


## ===========================================================================
##   set up

our $workdir= $main::scriptname . "_" . cas_timestamp::get() . "_" . $$;
mkdir $workdir;
our $logfile= "$workdir/log";

# write out a copy of the command line args
{
   my $fh= new FileHandle;
   $fh->open( ">$logfile" ) or
      die $main::scriptname . 
	    ": can't open command-line argument file for writing, \n" .
            "file=\"$logfile\", \n" .
            "$!. \n";
   $fh->print( "command line arguments: \n" );
   foreach my $aa ( @ORIG_ARGV )  {
      $fh->print( "   \"$aa\"\n" );
   }
   $fh->close() or
      die $main::scriptname . 
	    ": can't close command-line argument file after writing, \n" .
            "file=\"$logfile\", \n" .
            "$!. \n";
}

## ===========================================================================
##   run opt

# the opt command line should look something like this:
#   opt -S <other options from the optllreduce command line> \
#         --print-after-all file.ll
our $opt_out; 
our @opt_err_list; # list of the lines from opt's stderr
our $opt_errfile= "$workdir/opt.stderr";
{
   my $optlevel= "";
   if ( $arg_optlevel ne "" )  {
      $optlevel= "-O$arg_optlevel";
   }
   my $opt_cmd="opt -S $optlevel " . join( " ", @arg_opt_options_list ) . 
	 " --print-after-all $arg_infile 2> $opt_errfile";
   if ( $debug_flag or $arg_verbosity >= 1 )  { 
      print "opt cmd= \"$opt_cmd\"\n";
   }

   # record the command passed to opt:
   my $fh= new FileHandle;
   $fh->open( ">>$logfile" ) or
      die $main::scriptname . 
	    ": can't open command-line argument file for writing, \n" .
            "file=\"$logfile\", \n" .
            "$!. \n";
   $fh->print( "opt command: \"$opt_cmd\" \n" );
   $fh->close() or
      die $main::scriptname . 
	    ": can't close command-line argument file after writing, \n" .
            "file=\"$logfile\", \n" .
            "$!. \n";

   # and run opt
   $opt_out= `$opt_cmd`;
}

## ===========================================================================
##   parse opt's output

{
   my $fh= new FileHandle;
   $fh->open( "<$opt_errfile" ) or
     die $main::scriptname . ": can't open opt stderr file for reading, \n" .
           "\t" . "file=\"$opt_errfile\", \n" .
           "\t" . "$!. \n";
   # ideally, we'd like to: $fh->input_record_separator(undef);
   local $/;
   @opt_err_list= $fh->getlines(); # slurp in the whole file
   $fh->close() or
     die $main::scriptname . ": can't close opt stderr file after reading, \n" .
           "\t" . "file=\"$opt_errfile\", \n" .
           "\t" . "$!. \n";
}

our $arg_opt_pass_listref= opt_output_to_list( \@opt_err_list );


## ===========================================================================
##   make a RAM copy of the original .ll file

our $ir_prog_listref= undef;
{
   my $fh= new FileHandle;
   $fh->open( "<$arg_infile" ) or
     die $main::scriptname . ": can't open original ll file for reading, \n" .
           "\t" . "file=\"$arg_infile\", \n" .
           "\t" . "$!. \n";
   # ideally, we'd like to: $fh->input_record_separator(undef);
   my @line_list= $fh->getlines(); # slurp in the whole file
   $fh->close() or
      die $main::scriptname . 
	    ": can't close original ll file after reading, \n" .
            "\t" . "file=\"$arg_infile\", \n" .
            "\t" . "$!. \n";
   $ir_prog_listref= \@line_list;
}


## ===========================================================================
##   print out what we got out of opt

print "opt yielded " . scalar(@$arg_opt_pass_listref) . " passes. \n";
if ( $arg_print_opt_passes )  {
   foreach my $pass_ref ( @$arg_opt_pass_listref )  {
      print "="x 70 . "\n";
      if ( ref($pass_ref) ne "HASH" )  {
         print "this is not a hash ref, but a \"" . ref($pass_ref) . "\". \n";
         next;
      }
      print $pass_ref->{'num'} . ': "' . $pass_ref->{'title'} . ": \n";
      print "text: \n\n";
      print $pass_ref->{'txt'};
      print "="x 70 . "\n";
   } 
   exit $main::PERL_SUCCESS;
}

## ===========================================================================
##   feed through lli

foreach my $pass_ref ( @$arg_opt_pass_listref )  {
   if ( $pass_ref->{'title'} eq "" )  {
      print "skipping pass " . $pass_ref->{'num'} . ", it has no title. \n";
      if ( $pass_ref->{'txt'} ne "" )  {
         print "   Note: however, the pass did have text. \n";
      }
      next;
   }
   print "running lli on " . $pass_ref->{'num'} . 
	 ":\"" . $pass_ref->{'title'} . "\": \n"; 
   print "   " . "from opt output line " . $pass_ref->{'line_num'} . ":\n";;
   my $result= feed_pass_to_lli( $pass_ref, $ir_prog_listref );
   if ( $result eq 'poison' )  {
      print "found poison at pass \"" . $pass_ref->{'title'} . "\". \n";
      exit $main::PERL_SUCCESS;
   } elsif ( $result ne "" )  {
      warn $main::scriptname . ": something went wrong running lli, \n" . 
	    "\t" . "pass= \"" . $pass_ref->{'title'} . "\"\n" .
	    "\t" . "msg: <<EOF\n" . $result . "\nEOF\n";
      exit $main::PERL_FAILURE;
   }
}


## ===========================================================================
##   TODO2: see if there is anything else to do

## ===========================================================================
##   clean up and return

print "No poison found on any pass. \n";
exit $main::PERL_SUCCESS;

## ===========================================================================
##   

## ===========================================================================
##   

## ===========================================================================
## Subroutine feed_pass_to_lli()
## ===========================================================================
# Description: runs the code output from a compiler pass through lli
#
# Method: 
#
# Notes: 
#
# Warnings: 
#
# Inputs: 
#   $pass_ref: a hashref from the list returned by opt_output_to_list()
#   $ir_prog_listref: a list of the lines in the original IR program
# 
# Outputs: none
#   
# Return Value: if everything ran successfully, undef.
#   If lli detected poison, "poison".
#   If an error happened, a string describing the error.  The string will
#	probably be several lines long.
#
# ============================================================================
sub feed_pass_to_lli
{{
   my( $pass_ref, $ir_program_listref )= @_;

   # . . . . . . . . . . . . . . . . . . . .
   # determine filenames
   my( $fileable_title )= $pass_ref->{'title'};
   $fileable_title=~ s/^\W+//;
   $fileable_title=~ s/\W+$//;
   $fileable_title=~ s/\W/_/g;
   $fileable_title=~ s/\s/_/g;
   # show where chars were modified, without long strings of underscores.
   $fileable_title=~ s/___+/__/g; 

   my( $num )= sprintf ("%3.3d", $pass_ref->{'num'} );

   my( $stdout_file )= "$workdir/$num.$fileable_title.lli.stdout";
   my( $stderr_file )= "$workdir/$num.$fileable_title.lli.stderr";
   my( $ll_file )= "$workdir/$num.$fileable_title.ll";
   my( $ll_part_file )= "$workdir/$num.$fileable_title.llpart";

   # . . . . . . . . . . . . . . . . . . . .
   # write out the optimized code, for reference
   {
      my $fh= new FileHandle;
      $fh->open( ">$ll_part_file" ) or
	die $main::scriptname . ": can't open llpart file for writing, \n" .
	      "\t" . "file=\"$ll_part_file\", \n" .
	      "\t" . "$!. \n";
      $fh->print( $pass_ref->{'txt'} );
      $fh->close() or
	die $main::scriptname . ": can't close llpart file after writing, \n" .
	      "\t" . "file=\"$ll_part_file\", \n" .
	      "\t" . "$!. \n";
   }

   # . . . . . . . . . . . . . . . . . . . .
   # write out the IR program
   my( $opt_ir_program )= insert_opt_txt_into_ir_program( 
	 $ir_prog_listref, $pass_ref->{'txt'} );
   {
      my $fh= new FileHandle;
      $fh->open( ">$ll_file" ) or
	die $main::scriptname . ": can't open pass ll file for writing, \n" .
	      "\t" . "file=\"$ll_file\", \n" .
	      "\t" . "$!. \n";
      $fh->print( $opt_ir_program );
      $fh->close() or
	die $main::scriptname . ": can't close pass ll file after writing, \n" .
	      "\t" . "file=\"$ll_file\", \n" .
	      "\t" . "$!. \n";
   }

   # . . . . . . . . . . . . . . . . . . . .
   # run lli
   my $lli_status= undef;
   my $lli_cmd= 
	 "lli -force-interpreter $ll_file 1> $stdout_file 2> $stderr_file";
   ( $lli_status, undef, undef )= system_wrapper( $lli_cmd, "" );
   # check $lli_status after the poison check-- it may explain a failure.

   # . . . . . . . . . . . . . . . . . . . .
   # look at its results, did it find poison?
   my $grep_cmd= "grep -qi \"exiting due to external poison propogation\" " . 
         "$stdout_file $stderr_file";
   my $grep_status= undef;
   ( $grep_status, undef, undef )= system_wrapper( $grep_cmd, "" );
   if ( $grep_status == 0 )  {
      return "poison";
   }
   if ( $grep_status != 1 )  {
      return "grep (for poison) exited with error status \"$grep_status\". \n";
   }

   # . . . . . . . . . . . . . . . . . . . .
   # clean up and return
   if ( $lli_status != 0 )  {
      return "lli exited with status \"$lli_status\", " . 
	    "see this file for details: \n" .
            "\t" . "\"$stderr_file\". \n" .
            "\t" . "The extracted text starts on line " . 
	    $pass_ref->{'line_num'} . " of the lli output, \n" .
            "\t" . "lli out file=\"$opt_errfile\". \n";
   }
   return "";
}}

## ===========================================================================
## Subroutine insert_opt_txt_into_ir_program()
## ===========================================================================
# Description: 
#	The output from each opt pass seen (to date) shows either the
#	one function of the IR program that got changed, or a whole
#	program that replaces the original one.  This function here
#	removes the original function/program from the IR program file
#	and replaces it with its optimized version.
#
# Method: 
#
# Notes: 
#
# Warnings: Despite this ftn's internal sanity checks, the algorithm used 
#	here for determining what text to replace is rather
#	simplistic, and could occasionally give some surprising
#	results.  Keep an eye out to see if a more sophisticated
#	algorithm is necessary.
#
#	One slightly more sophisticated algorithm might, instead of
#	checking that the first 2 lines of the outgoing and incoming
#	text exactly agree, check the first n non-blank lines agree.
#	(n is probably 2 or 3.)  This might be extended to ignore
#	differences due to comments, or amount of whitespace.  Maybe
#	even identifier name (but not type) differences should be
#	ignored, so `ret i32 %45` and `ret i32 %38` compare the same.
#
# Inputs: 
#   $ir_prog_listref: a list of each line in the original IR program.
#   $opt_txt: the optimization text to insert into the IR program
# 
# Outputs: none
#   
# Return Value: 
#   a single string containing the resulting IR program
#
# ============================================================================
sub insert_opt_txt_into_ir_program
{{
   my( $ir_prog_listref, $opt_txt )= @_;

   # . . . . . . . . . . . . . . . . . . . .
   # set up
   my @opt_txt_list= split( /^/m, $opt_txt );
   my $match= $main::FALSE;

   # . . . . . . . . . . . . . . . . . . . .
   # handle special cases that can be handled early

   # case where opt pass just produces "Printing <null> Function"
   if ( $opt_txt =~ m/^\s*Printing <null> Function\s*$/ )  {
      # return the original IR program verbatim
      return join ( "", @$ir_prog_listref );
   }

   # . . . . . . . . . . . . . . . . . . . .
   # find the first non-comment line of @opt_txt_list
   my $o_start= $[;
   while ( $o_start <= $#opt_txt_list )  {
      if ( $opt_txt_list[$o_start] !~ m/^\s*;/ and
	    $opt_txt_list[$o_start] !~ m/^\s*$/ )  { last; }
      $o_start++;
   }
   #assert ( $o_start < $#opt_txt_list );

   # . . . . . . . . . . . . . . . . . . . .
   # find the corresponding line in @$ir_prog_listref
   my $i_start= $[;
   $match= $main::FALSE;
   while ( $i_start <= $#$ir_prog_listref )  {
      # Note: instead of straight eq, we may need to call an equivalency 
      # function that ignores beginning & ending whitespace, internal 
      # whitespace changes, "#nn" attribute group changes, and perhaps other 
      # less important parts of the IR syntax.
      # TODO2: may be needed.
      if ( are_lines_equal_enough( $$ir_prog_listref[$i_start],
				   $opt_txt_list[$o_start] ) )  {
	 $match= $main::TRUE;
	 last; 
      }
      $i_start++;
   }
   if ( ! $match )  {
      warn $main::scriptname . ": no matching start line found, proceeding \n" .
	    "\t" . "as well as possible.  Note that this may lead to \n" . 
	    "\t" . "invalid outputs. \n";
   }

   # . . . . . . . . . . . . . . . . . . . .
   # find the last non-comment line of @opt_txt_list
   my $o_stop= $#opt_txt_list;
   while ( $o_stop > $o_start )  {
      if ( $opt_txt_list[$o_stop] !~ m/^\s*;/ and
	    $opt_txt_list[$o_stop] !~ m/^\s*$/ )  { last; }
      $o_stop--;
   }

   # . . . . . . . . . . . . . . . . . . . .
   # find a corresponding line in $ir_prog_listref
   my $i_stop= $i_start+ 1;
   $match= $main::FALSE;
   while ( $i_stop < $#$ir_prog_listref )  {
      if ( are_lines_equal_enough( $$ir_prog_listref[$i_stop] eq 
				   $opt_txt_list[$o_stop] ) )  { 
	 $match= $main::TRUE;
	 last; 
      }
      $i_stop++;
   }
   if ( ! $match )  {
      warn $main::scriptname . ": no matching stop line found, proceeding \n" . 
	    "\t" . "as well as possible.  Note that this may lead to \n" . 
	    "\t" . "invalid outputs. \n";
   }

   # . . . . . . . . . . . . . . . . . . . .
   # check that the number of lines is meaningful
   my $return_wo_modification= $main::FALSE;
   if ( ($o_stop - $o_start) == 0 )  {
      # the pass just produced comments
      print $main::scriptname . ": FYI: pass just produced comments. \n"; 
      $return_wo_modification= $main::TRUE;
   } elsif ( ($o_stop - $o_start) == 1 )  {
      # case where opt_pass consists of a single line function declaration

      # see if this is a single line function declaration
      # e.g.: declare i32 @printf(i8* nocapture readonly, ...) #2
      if ( @opt_txt_list[ $o_start ] =~ 
            # TODO: fix this
	    #m/^ \s* declare \s+ i[0-9]+ \s+ \@\w+ \s* \( .* \) / )  {
	    m/^ \s* declare \s+ i[0-9]+ \s+ / )  {
         # Do nothing, every case like this it appears that the declaration
         # repeats something already in the program.
	 $return_wo_modification= $main::TRUE;
      }
      
      my $opt_txt_no_newline= $opt_txt;
      chomp $opt_txt_no_newline;
      warn $main::scriptname . 
	    ": warning: can't understand one line opt pass result: \n" .
	    "   " . "line=\"$opt_txt_no_newline\", \n" .
	    "   " . "skipping. (message 2015mar13_183607) \n";
      $return_wo_modification= $main::TRUE;
      return join( "", @$ir_prog_listref );
   }
   if ( $return_wo_modification )  {
      return join( "", @$ir_prog_listref );
   }

   # . . . . . . . . . . . . . . . . . . . .
   # sanity check that the lines to be exchanged have the form we expect:
   my $problem= "";
   if ( $$ir_prog_listref[$i_start] ne $opt_txt_list[$o_start] or 
	 $$ir_prog_listref[$i_start+1] ne $opt_txt_list[$o_start+1] )  {
      # the two starting lines to not agree exactly
      if ( $$ir_prog_listref[$i_start] !~ m/^\s* define \b .*{/x )   {
	 # this line does not begin a function
	 $problem.= "a";
      }
      if ( $opt_txt_list[$o_start] !~ m/^\s* define \b .*{/x )   {
	 # this line does not begin a function
	 $problem.= "c";
      }
   }
   
   if ( $$ir_prog_listref[$i_stop] ne $opt_txt_list[$o_stop] or
	 $$ir_prog_listref[$i_stop-1] ne $opt_txt_list[$o_stop-1] )  {
      # the two ending lines to not agree exactly
      if ( $$ir_prog_listref[$i_stop] !~ m/^\s* } \s* $/x and
	    $$ir_prog_listref[$i_stop] !~ m/^\s* } \s* ;/x )  {
	 # this line does not end a function
	 $problem.= "b";
      }
      if ( $opt_txt_list[$o_stop] !~ m/^\s* } \s* $/x and
	    $opt_txt_list[$o_stop] !~ m/^\s* } \s* ;/x )  {
	 # this line does not end a function
	 $problem.= "d";
      }
   }

   if ( $problem ne "" )  {
      print $main::scriptname . ": WARNING: the program text specified by \n" . 
	    "\t" . "the current optimization pass does not seem to \n" .
	    "\t" . "correspond to the expected whole function or whole \n" . 
	    "\t" . "program.  This may make lli fail, or, worse, \n" . 
	    "\t" . "cause this program to emit incorrect results.  \n" . 
	    "\t" . "code=\"$problem\" (message 2015mar6_181115) \n";
      print "\t" . "first and last lines of text to be removed: \n";
      print "\t" . "first: \"" . $$ir_prog_listref[$i_start] . "\"\n";
      print "\t" . "last: \"" . $$ir_prog_listref[$i_stop] . "\"\n";
      print "\t" . "first and last lines of text to be inserted: \n";
      print "\t" . "first: \"" . $opt_txt_list[$o_start] . "\"\n";
      print "\t" . "last: \"" . $opt_txt_list[$o_stop] . "\"\n";
   }

   # . . . . . . . . . . . . . . . . . . . .
   # and substitute $opt_txt into @$ir_prog_listref
   my $ret_val="";
   for ( my $ii= $[; $ii < $i_start; $ii++ )  {
      $ret_val.= $$ir_prog_listref[$ii];
   }
   for ( my $oo= $o_start; $oo <= $o_stop; $oo++ )  {
      $ret_val.= $opt_txt_list[$oo];
   }
   for ( my $ii= $i_stop+1; $ii <= $#$ir_prog_listref; $ii++ )  {
      $ret_val.= $$ir_prog_listref[$ii];
   }

   if ( $arg_verbosity >= 1 or $problem ne "" )  {
      print "lines substituted: \n";
      print "   original IR program start=" . ($i_start+1) . 
	    "\t stop=" . ($i_stop+1) . " \n";
      print "   optimized fragment start=" . ($o_start+1) . 
	    "\t stop=" . ($o_stop+1) . " \n";
   }
   
   # . . . . . . . . . . . . . . . . . . . .
   # clean up and return
   return $ret_val;
}}

## ===========================================================================
## Subroutine opt_output_to_list()
## ===========================================================================
# Description: takes the output of opt and converts it into a list of 
#	optimization passes, useful for later processing.
#
# Method: 
#
# Notes: 
#
# Warnings: 
#
# Inputs: 
#   $in_listref: a list of the lines from opt's per-pass diagnostics
#	In practice, each element of this list is a chunk of lines merged
#	into one string, and this function can handle that.
# 
# Outputs: none
#   
# Return Value: a reference to a list of hash references.
#   Each hash has these fields:
#   title: the title of the pass that produced the output
#   txt: the program text from the pass output
#   num: the sequence number of this optimization pass, starting at 1
#   line_num: the number of the line in the opt output where the program 
#	text starts.
#
# ============================================================================
sub opt_output_to_list
{{
   my( $in_listref )= @_;

   my ( @ret_list );

   my $line_num= 0;
   my $instance_ref= { 'title'=>"", 'txt'=>"", 'num'=>0, 'line_num'=>0 };
   #print "ref(\$instance_ref)= \"" . ref($instance_ref) . "\" \n";;
   print "*** reading opt pass 0      \r";
   foreach my $line_chunk ( @$in_listref )  {
      my @line_list= split( /^/m, $line_chunk );
      foreach my $line ( @line_list )  {
	 $line_num++;
	 #print "line is " . length($line) . " characters long. \n";;
	 if ( $line=~ m/^\*\*\* / )  {
	    push @ret_list, $instance_ref;
	    $instance_ref= { 
		  'title'=>"", 'txt'=>"", 'num'=> $instance_ref->{'num'}+1,
                  'line_num' => $line_num };
	    #print "ref(\$instance_ref)= \"" . ref($instance_ref) . "\" \n";;
            # TODO2: only print this in verbose mode:
	    print "*** reading opt pass " . $instance_ref->{'num'} . " "x 5 . 
		  "\r";
	    my $tmp= $line;
	    chomp $tmp;
	    $tmp=~ s/^\s*\*\*\*\s*//;
	    $tmp=~ s/\s*\*\*\*\s*$//;
	    $instance_ref->{'title'}= $tmp;
	 } else {
	    $instance_ref->{'txt'}.= $line;
	 }
      }
   }
   # Make sure there is a newline after the 'reading opt pass' active 
   # display.
   print "\n"; 
   push @ret_list, $instance_ref;
   return \@ret_list;
}}

## ===========================================================================
## Subroutine are_lines_equal_enough()
## ===========================================================================
# Description: compares two lines from an IR program.  Determines if they 
#	are similar enough to delineate where text should be inserted or 
#	deleted.
#
# Method: 
#
# Notes: 
#
# Warnings: 
#
# Inputs: 
#   $aa, $bb: strings containing the lines
# 
# Outputs: none
#   
# Return Value: TRUE or FALSE
#   
# ============================================================================
sub are_lines_equal_enough
{{
   my( $aa, $bb )= @_;

   # if it is a simple decision, decide now.
   if ( $aa eq $bb )  { return $main::TRUE; }

   # .  . . . . . . . . . . . . . . . . . .
   # do basic cleanup
   my $clean_aa= $aa;
   $clean_aa=~ s/;.*$//; # eliminate comments at the end of the line
   $clean_aa=~ s/^\s+//;
   $clean_aa=~ s/\s+$//;

   my $clean_bb= $bb;
   $clean_bb=~ s/;.*$//; # eliminate comments at the end of the line
   $clean_bb=~ s/^\s+//;
   $clean_bb=~ s/\s+$//;

   my @aa_list= split( /\s+/, $aa );
   my @bb_list= split( /\s+/, $bb );

   if ( $aa_list[$[] eq "" )  { shift @aa_list; }
   if ( $bb_list[$[] eq "" )  { shift @bb_list; }
   
   # .  . . . . . . . . . . . . . . . . . .
   # eliminate irrelevant syntactic elements

   # attribute group tags (e.g. #2 or #34 embedded somewhere in the line)
   for ( my $ii= $[; $ii <= $#aa_list; $ii++ )  {
      if ( $aa_list[$ii] =~ m/^#\d+$/ )  {
         $aa_list[$ii]= undef;
      }
   }
   for ( my $ii= $[; $ii <= $#bb_list; $ii++ )  {
      if ( $bb_list[$ii] =~ m/^#\d+$/ )  {
         $bb_list[$ii]= undef;
      }
   }

   # plug the elements we just eliminated
   for ( my $ii= $[; $ii <= $#aa_list; $ii++ )  {
      if ( !defined($aa_list[$ii]) ) {
         $aa_list[$ii..($#aa_list-1)]= $aa_list[($ii+1)..$#aa_list];
         $#aa_list= $#aa_list- 1;
      }
   }
   for ( my $ii= $[; $ii <= $#bb_list; $ii++ )  {
      if ( !defined($bb_list[$ii]) ) {
         $bb_list[$ii..($#bb_list-1)]= $bb_list[($ii+1)..$#bb_list];
         $#bb_list= $#bb_list- 1;
      }
   }

   # .  . . . . . . . . . . . . . . . . . .
   # do an actual comparison and return
   if ( $#aa_list != $#bb_list )  {
      return $main::FALSE;
   }
   for ( my $ii= $[; $ii <= $#aa_list; $ii++ )  {
      if ( $aa_list[$ii] ne $bb_list[$ii] )  { return $main::FALSE; }
   }

   return $main::TRUE;
}}



# template 25 lines long
## ===========================================================================
## Subroutine name()
## ===========================================================================
# Description: 
#
# Method: 
#
# Notes: 
#
# Warnings: 
#
# Inputs: 
#   
# 
# Outputs: 
#   
#
# Return Value: 
#   
#
# ============================================================================
#sub name
#{{
#   my( )= @_;
#}}



## ===========================================================================
## Subroutine system_wrapper()
## ===========================================================================
# Description:
#	Call the first argument the command, and the 2nd argument the 
#	alternate command.
#
#	If not running in debug mode, executes the command via a
#	system() call.
#
#	If running in debug mode, prints the command, and executes 
#	the alternate command.  If the alternate command is not present, 
#	assumes it is the same as the command.	If the alternate command is
#	a null string, does nothing and returns as if the command had 
#	succeeded.
#
# Method:
#
# Notes:
#
# Warnings:
#
# Inputs:
#	$cmd: the command described above
#	$alt_cmd: the alternate command described above
# 
# Outputs:
#	none
#
# Return Value:
#   a list, giving the following:
#   * the command's exit code 
#   * a boolean flag that is true iff the command's process dumped core
#   * the signal that caused the command's to exit (if it exited due to 
#	a signal)
#
# ============================================================================
sub system_wrapper
{{
   my ( $raw_exit_code )= 0;
   my ( $ftn_name )= "system_wrapper()";

   # parse args
   my( $cmd, $alt_cmd );
   {
      my ($cmd_index)= $[;
      my ($alt_cmd_index)= $[+ 1;
      if ( $#_ == $cmd_index)  {
	 $cmd= $_[$cmd_index];
	 $alt_cmd= $cmd;
      } elsif ( $#_ == $alt_cmd_index )  {
	 $cmd= $_[$cmd_index];
	 $alt_cmd= $_[ $alt_cmd_index ];
      } else {
	 die "$scriptname:$ftn_name: " . 
	       "internal error 202.11dec1999, code= $#_ \n";
      }
   }

   # run the command
   if ( $debug_flag )  {
      print "$scriptname:$ftn_name: would execute \"$cmd\" \n";
      if ( $alt_cmd eq "" )  {
	 $raw_exit_code= 0;
      } else {
	 $raw_exit_code= system( $alt_cmd );
      }    
   } else {
      $raw_exit_code= system( $cmd );
   }

   # divide up the exit code 
   return ( $raw_exit_code >> 8, 
	 ($raw_exit_code & 128) == 0 ? $FALSE : $TRUE,
	   $raw_exit_code & 127 );
}}



## ===========================================================================
## Subroutine give_help()
## ===========================================================================
# Description:
#	Gives a help message or a man page.
#
# Method:
#
# Notes:
#
# Warnings:
#
# Inputs:
# 
# Outputs:
#
# Return Value:
#
# ============================================================================
sub give_help
{{
   my( $help_type )= @_;
   my ($H)= "   ";

   # ----------------------------------------------------------------------
   # print revision information
   if ( $help_type == $HELP_TYPE_REVISION )  {
      print "$scriptname: revision $revision \n\n";
      exit $EXIT_SUCCESS;
   }

   # ----------------------------------------------------------------------
   # print manual page
   if ( $help_type == $HELP_TYPE_MAN )  {
      my ($cmd);
      my ( $needs_to_run )= $main::TRUE;

      # CAS todo: Need to improve ability to find the perldoc program if 
      # it isn't on the current path.  Ideally, we should look for the
      # perldoc program where the operating system found the perl 
      # executable, and if the perl executable is a symbolic link, 
      # look for the perldoc executable in the directory of the file 
      # the symbolic link points to.

      # repeatedly look for the perldoc program until it runs successfully
      foreach my $dir ( "", $Config{'bin'}, $Config{'binexp'}, 
	    $Config{'installbin'}, $Config{'installsitebin'}, 
	    $Config{'installvendorbin'}, $Config{'sitebin'}, 
	    $Config{'sitebinexp'}, $Config{'vendorbin'}, 
	    $Config{'vendorbinexp'} )  {
	 $cmd= File::Spec->catfile ( $dir, "perldoc" ) . " $0";
	 my ( $exit_status, $core_dump, $exit_signal )=
	       &system_wrapper ( $cmd, "" );
	 if ( $exit_status == 0 )  {
	    $needs_to_run= $main::FALSE;
	    last;
	 }
      }
      if ( $needs_to_run )  {
	 print "$scriptname: problem running `perldoc` to format the manual
	page.  Is perldoc in a directory on your program search PATH?  
	Use `$scriptname --help` for more information on $scriptname. \n\n";
         exit $main::EXIT_FAILURE; 
      }
      exit $main::EXIT_SUCCESS; 
   }
   

   # ----------------------------------------------------------------------
   # print header
   if ( $help_type == $HELP_TYPE_FULL )  {
      print "$scriptname: no description available \n";
      if ( $help_type == $HELP_TYPE_FULL )  {
	 print "revision $revision \n";
      }
      print "\n";
   }

   
   # ----------------------------------------------------------------------
   # print synopsis
   
   if ( $help_type == $HELP_TYPE_EMERGENCY || $help_type == $HELP_TYPE_FULL )  {
      print "Correct use: \n";
   }


   print $H . 
	 "$scriptname [debug] [-h|help|-help|--help] [--man] [--revision] \n";
   print $H . "$scriptname [debug] ? \n";
   print "\n\n";

   # ----------------------------------------------------------------------
   # exit unless we're print a man page
   if ( $help_type == $HELP_TYPE_EMERGENCY )  {
      #print "\n\n";
      exit $EXIT_FAILURE;
   }
   if ( $help_type == $HELP_TYPE_FULL )  {
      #print "\n\n";
      exit $EXIT_SUCCESS;
   }

   die "$scriptname: internal error 372.4nov2000. \n";
   
}}




# ****************************************************************************
# end this package 
package main;

__END__

=pod

=head1 NAME - optllreduce

=cut

#put a short (one line) description here

=pod

=head1 SYNOPSIS determine which llvm optimization pass introduces poison.

=cut

# this needs to be a verbatim paragraph, but not be intented too far.
# Therefore begin each line with a space.

=pod

optllreduce [debug] [-h|help|-help|--help] [--man] [--revision] 

optllreduce [debug] B<opt_options> F<llvm_file>


=head1 DESCRIPTION

I<optllreduce> determines which llvm optimization pass introduces the 
code that first generates poison.

=head2 Algorithm

=over

=item

I<optllreduce> first runs the .ll file through poison-aware lli, to
see if the code generates any poison.  If it does, I<optllreduce>
prints a message to that effect and exits.

=item

I<optllreduce> runs opt on an llvm .ll file.  (Recall that opt is the
llvm optimizer executeable.)  A typical opt command line loks like this:

    opt -S <other options from the optllreduce command line> --print-after-all file.ll

Often one specifies -O1 or similar on the I<optllreduce> command line
if one knows that the poison first appeared when optimizing from -O0
to -O1.

Recall that opt writes the cumulative result of all optimization passes to
stdout, but writes notes on the result of each pass (due to --print-after-all)
to stderr.

opt typicall prefixes the output of each optimization pass with a line like
this:

*** IR Dump After Module Verifier ***

where "Module Verifier" is the name of the optimization pass just completed.  What follows is one function out of the input .ll file.  After this is another '***' line indicating the start of the next pass.  Finally, one gets a line like this:

*** IR Dump After Print module to stderr ***; ModuleID = '4-O0.ll'  

followed by the sum of the different optimization passes inserted into
the whole .ll file.

=item

I<optllreduce> takes the function spelled out after each pass, inserts
it into a copy of the original .ll file, and runs it through
poison-aware lli.  If lli reports the resulting code generates poison,
I<optllredue> stops.  If not, I<optllreduce> continues with the code
from the next pass.  If no poison is found by the end, I<optllreduce>
prints a message to that effect and exits.

=back

=head1 EXTERNAL INFLUENCES

=cut

# consider adding: NOTES, EXAMPLES, RETURN VALUES & ERROR MESSAGES

#=head1 NEW SECTION

=pod

=head1 FILES

=head1 WARNINGS AND CAVEATS

=head1 BUGS AND DEFICIENCIES

=head1 AUTHOR AND COPYRIGHT

optllreduce was written by Christian A. Schreiner.  Copyright (C) 
2015-2015 by University of Utah.  You may use, examine, or modify
this software only in accordance with the GNU Public License, or, alternately, 
by special arrangement with the author.  optllreduce is released without 
any warranties; if you use it and something breaks, you are responsible for 
cleaning up afterwards.  This notice is precautionary only and does not 
inherently imply publication or release for public use.  

=head1 SEE ALSO

perl(1), perldoc(1)

=cut

