#!/bin/sh
# script to work backwards along llvm releases, looking for a release that
# builds ok and optionally passes `make check`

scriptname=find_working_llvm_ver

# =============================================================================
# constants
MIN_SVN_REV=100000


# =============================================================================
# parse args

arg_make_check=false
arg_start_ver=""
arg_use_existing_workdir=false

need_to_exit=false
while [ $# -gt 0 ]; do
   case "$1" in
      --make-check)
         arg_make_check=true
         shift
         ;;
      --use-existing-workdir)
         arg_use_existing_workdir=true
         shift
         ;;
      -*)
         echo ${scriptname}: Error: do not recognize option \"$1\"
         need_to_exit=true
         shift
	 ;;
      [0-9][0-9]*)
         if echo "$1" | grep '^[0-9]*$'; then
            if [ -z "$arg_start_ver" ]; then
               arg_start_ver=$1
            else
               echo ${scriptname}: Error: found an extra start version on
	       echo "  " the command line: \"$1\".
	       need_to_exit=true
            fi
         else 
	    echo ${scriptname}: Error: specified start version appears to
	    echo "  " be partially non-numeric: \"$1\".
	    need_to_exit=true
	 fi
	 shift
	 ;;
      *) 
         echo ${scriptname}: Error: do not recognize command line word \"$1\"
         need_to_exit=true
         shift
	 ;;
   esac
done

if [ "$need_to_exit" != "false" ]; then
   echo ${scriptname}: too many errors, exiting.
   exit 127
fi

# make sure critical args are present
if [ -z "$arg_start_ver" ]; then
   echo ${scriptname}: Error: no start version found on command line.
   exit 127
fi

# =============================================================================
# set up

# TODO: find a permanent place for the llvm version de-jure
export PATH=/usr/local/bin:/usr/bin:/bin:/uusoc/bin:/uusoc/opt/bin:/usr/bin:/usr/lib/jvm/java-7-oracle/bin:/usr/lib/jvm/java-7-oracle/db/bin:/usr/lib/jvm/java-7-oracle/jre/bin:$HOME/s/dyson/edu/uut/lli_undef_fix3/3.6.1/bin
echo PATH=\"$PATH\"

workdir=`pwd`/${scriptname}_workdir
if [ -e $workdir -a "$arg_use_existing_workdir" = "false" ]; then
   echo ${scriptname}: error: workdir seems to already exist
   echo "  " dir=\"$workdir\"
   exit 127
fi

logfile=`pwd`/${scriptname}_`date +%Y%b%d_%H%M%S`_$$.log
echo logfile=\"$logfile\"
if [ -e $logfile ]; then
   echo ${scriptname}: error: logfile seems to already exist
   echo "  " dir=\"$logfile\"
   exit 127
fi

echo "using workdir=" \"$workdir\"
if [ ! -d "$workdir" ]; then
   mkdir $workdir
fi
cd $workdir

echo getting svn log...
svn log -rHEAD:$MIN_SVN_REV http://llvm.org/svn/llvm-project/llvm/trunk > $workdir/svn_log
status=$?
echo ... svn log received with status \"$status\".
if [ $status -ne 0 ]; then
   echo ${scriptname}: error receiving svn log.
   exit 127
fi

svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
cd llvm/projects
svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt
cd ../..
cd llvm/projects
svn co http://llvm.org/svn/llvm-project/test-suite/trunk test-suite
cd ../..

ver=$arg_start_ver

# =============================================================================
# make initial log entries

(
   echo start ver=\"$arg_start_ver\"
   echo minimum svn version=\"$MIN_SVN_REV\"
   echo workdir=\"$workdir\" 
   echo PATH=\"$PATH\" 
) >> $logfile

# =============================================================================
test_one_version()
{
   local ver status status0 status1 status2 status3 
   ver="$1"
   status=0

   echo \-\-\-
   echo \-\-\- >> $logfile
   echo "starting version $ver at" `date` 
   echo "starting version $ver at" `date` >> $logfile
   cd $workdir

   cd llvm
   svn update -r$ver 
   status0=$?
   cd ..
   cd llvm/projects/compiler-rt
   svn update -r$ver 
   status1=$?
   cd ../../..
   cd llvm/projects/test-suite
   svn update -r$ver 
   status2=$?
   cd ../../..

   if [ $status0 != 0 -o $status1 != 0 -o $status2 != 0 ]; then
      echo ${scriptname}: error checking out version \"$ver\", \
	    statii=\"$status0\",\"$status1\",\"$status2\".
      echo ${scriptname}: error checking out version \"$ver\", \
	    statii=\"$status0\",\"$status1\",\"$status2\". >> $logfile
      return 1
   fi

   rm -rf build live
   mkdir -p build live OLD

   cd build
   ln -s ../OLD OLD

   cmake -G Ninja -DCMAKE_INSTALL_PREFIX=`pwd`/../live ../llvm \
	 -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
   status=$?
   if [ $status != 0 ]; then
      echo ${scriptname}: error configuring version \"$ver\", \
	    status=\"$status\".
      echo ${scriptname}: error configuring version \"$ver\", \
	    status=\"$status\". >> $logfile
      cd ..
      return $status
   fi

   ninja > BUILD.out 2>&1 
   status=$?
   if [ $status != 0 ]; then
      echo ${scriptname}: error building \"$ver\", \
	    status=\"$status\".
      echo ${scriptname}: error building \"$ver\", \
	    status=\"$status\". >> $logfile
      cd ..
      return $status
   fi

   ninja install >> BUILD.out 2>&1 
   status=$?
   if [ $status != 0 ]; then
      echo ${scriptname}: error installing \"$ver\", \
	    status=\"$status\".
      echo ${scriptname}: error installing \"$ver\", \
	    status=\"$status\". >> $logfile
      cd ..
      return $status
   fi

   if [ "$arg_make_check" = "true" ]; then
      ninja check-all
      status=$?
      echo make check status=\"$status\" #;;
      if [ $status != 0 ]; then
	 echo ${scriptname}: error runing \'make check\' on \"$ver\", \
	       status=\"$status\".
	 echo ${scriptname}: error runing \'make check\' on \"$ver\", \
	       status=\"$status\". >> $logfile
         mv BUILD.out BUILD.$ver.out
         bzip2 BUILD.$ver.out
         # TODO2: find a way to save the bzip2 file in a directory
         # specific to this run.  It would probably need to be named
         # after the timestamp in the logfile name, or similar.
         cleandir BUILD.$ver.out.bz2
	 cd ..
	 return $status
      fi
   fi

   cd ..
   return 0
}


# =============================================================================
# run the test

ver=$arg_start_ver
while [ $ver -gt 0 ]; do
   grep -q ^r$ver $workdir/svn_log
   svn_status=$?
   if [ $svn_status = 0 ]; then
      test_one_version $ver 
      status=$?
      if [ $status -eq 0 ]; then
	 echo ${scriptname}: SUCCESS: version $ver passes.
	 echo ${scriptname}: SUCCESS: version $ver passes. >> $logfile
	 exit 0
      fi
   else 
      echo version $ver does not appear in the svn log.
      echo version $ver does not appear in the svn log. >> $logfile
  
   fi
   ver=$(( $ver - 1 ))
done

echo ${scriptname}: error: got to version \"$ver\" without anything passing.
exit 1

# =============================================================================
# end of script
