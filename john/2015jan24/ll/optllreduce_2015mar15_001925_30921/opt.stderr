*** IR Dump After Module Verifier ***
; Function Attrs: nounwind uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = alloca i64, align 8
  store i64 %x4, i64* %1, align 8
  %2 = load i64* @x0, align 8
  %3 = icmp ne i64 %2, 0
  br i1 %3, label %4, label %9

; <label>:4                                       ; preds = %0
  %5 = load i64* @x0, align 8
  %6 = load i64* %1, align 8
  %7 = sub nsw i64 9223372036854775807, %6
  %8 = icmp sgt i64 %5, %7
  br i1 %8, label %10, label %9

; <label>:9                                       ; preds = %4, %0
  br label %10

; <label>:10                                      ; preds = %9, %4
  %11 = phi i1 [ true, %4 ], [ false, %9 ]
  %12 = zext i1 %11 to i32
  ret i32 %12
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = alloca i64, align 8
  store i64 %x4, i64* %1, align 8
  %2 = load i64* @x0, align 8
  %3 = icmp ne i64 %2, 0
  br i1 %3, label %4, label %9

; <label>:4                                       ; preds = %0
  %5 = load i64* @x0, align 8
  %6 = load i64* %1, align 8
  %7 = sub nsw i64 9223372036854775807, %6
  %8 = icmp sgt i64 %5, %7
  br i1 %8, label %10, label %9

; <label>:9                                       ; preds = %4, %0
  br label %10

; <label>:10                                      ; preds = %9, %4
  %11 = phi i1 [ true, %4 ], [ false, %9 ]
  %12 = zext i1 %11 to i32
  ret i32 %12
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  br i1 %2, label %3, label %7

; <label>:3                                       ; preds = %0
  %4 = load i64* @x0, align 8
  %5 = sub nsw i64 9223372036854775807, %x4
  %6 = icmp sgt i64 %4, %5
  br i1 %6, label %8, label %7

; <label>:7                                       ; preds = %3, %0
  br label %8

; <label>:8                                       ; preds = %7, %3
  %9 = phi i1 [ true, %3 ], [ false, %7 ]
  %10 = zext i1 %9 to i32
  ret i32 %10
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = sub nsw i64 9223372036854775807, %x4
  %5 = icmp sgt i64 %1, %4
  br i1 %5, label %7, label %6

; <label>:6                                       ; preds = %3, %0
  br label %7

; <label>:7                                       ; preds = %6, %3
  %8 = phi i1 [ true, %3 ], [ false, %6 ]
  %9 = zext i1 %8 to i32
  ret i32 %9
}
*** IR Dump After Lower 'expect' Intrinsics ***
; Function Attrs: nounwind uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = sub nsw i64 9223372036854775807, %x4
  %5 = icmp sgt i64 %1, %4
  br i1 %5, label %7, label %6

; <label>:6                                       ; preds = %3, %0
  br label %7

; <label>:7                                       ; preds = %6, %3
  %8 = phi i1 [ true, %3 ], [ false, %6 ]
  %9 = zext i1 %8 to i32
  ret i32 %9
}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1
  %2 = load i32* @x1, align 4
  %3 = and i32 1, %2
  %4 = sext i32 %3 to i64
  %5 = xor i64 %4, -4
  %6 = call i32 @x3(i64 %5)
  store i32 %6, i32* @x2, align 4
  %7 = load i32* @x2, align 4
  %8 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %7)
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1
  %2 = load i32* @x1, align 4
  %3 = and i32 1, %2
  %4 = sext i32 %3 to i64
  %5 = xor i64 %4, -4
  %6 = call i32 @x3(i64 %5)
  store i32 %6, i32* @x2, align 4
  %7 = load i32* @x2, align 4
  %8 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %7)
  ret i32 0
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32* @x1, align 4
  %2 = and i32 1, %1
  %3 = sext i32 %2 to i64
  %4 = xor i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = load i32* @x2, align 4
  %7 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %6)
  ret i32 0
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32* @x1, align 4
  %2 = and i32 1, %1
  %3 = sext i32 %2 to i64
  %4 = xor i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %5)
  ret i32 0
}
*** IR Dump After Lower 'expect' Intrinsics ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32* @x1, align 4
  %2 = and i32 1, %1
  %3 = sext i32 %2 to i64
  %4 = xor i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %5)
  ret i32 0
}
*** IR Dump After Debug Info Verifier ***; ModuleID = '4-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x0 = common global i64 0, align 8
@x1 = common global i32 0, align 4
@x2 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = sub nsw i64 9223372036854775807, %x4
  %5 = icmp sgt i64 %1, %4
  br i1 %5, label %7, label %6

; <label>:6                                       ; preds = %3, %0
  br label %7

; <label>:7                                       ; preds = %6, %3
  %8 = phi i1 [ true, %3 ], [ false, %6 ]
  %9 = zext i1 %8 to i32
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32* @x1, align 4
  %2 = and i32 1, %1
  %3 = sext i32 %2 to i64
  %4 = xor i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %5)
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
*** IR Dump After Interprocedural Sparse Conditional Constant Propagation ***; ModuleID = '4-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x0 = common global i64 0, align 8
@x1 = common global i32 0, align 4
@x2 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = sub nsw i64 9223372036854775807, %x4
  %5 = icmp sgt i64 %1, %4
  br i1 %5, label %7, label %6

; <label>:6                                       ; preds = %3, %0
  br label %7

; <label>:7                                       ; preds = %6, %3
  %8 = phi i1 [ true, %3 ], [ false, %6 ]
  %9 = zext i1 %8 to i32
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32* @x1, align 4
  %2 = and i32 1, %1
  %3 = sext i32 %2 to i64
  %4 = xor i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %5)
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
*** IR Dump After Global Variable Optimizer ***; ModuleID = '4-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x0 = common global i64 0, align 8
@x1 = common global i32 0, align 4
@x2 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = sub nsw i64 9223372036854775807, %x4
  %5 = icmp sgt i64 %1, %4
  br i1 %5, label %7, label %6

; <label>:6                                       ; preds = %3, %0
  br label %7

; <label>:7                                       ; preds = %6, %3
  %8 = phi i1 [ true, %3 ], [ false, %6 ]
  %9 = zext i1 %8 to i32
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32* @x1, align 4
  %2 = and i32 1, %1
  %3 = sext i32 %2 to i64
  %4 = xor i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %5)
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
*** IR Dump After Dead Argument Elimination ***; ModuleID = '4-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x0 = common global i64 0, align 8
@x1 = common global i32 0, align 4
@x2 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  br i1 %2, label %3, label %6

; <label>:3                                       ; preds = %0
  %4 = sub nsw i64 9223372036854775807, %x4
  %5 = icmp sgt i64 %1, %4
  br i1 %5, label %7, label %6

; <label>:6                                       ; preds = %3, %0
  br label %7

; <label>:7                                       ; preds = %6, %3
  %8 = phi i1 [ true, %3 ], [ false, %6 ]
  %9 = zext i1 %8 to i32
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32* @x1, align 4
  %2 = and i32 1, %1
  %3 = sext i32 %2 to i64
  %4 = xor i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %5)
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %6, label %3

; <label>:3                                       ; preds = %0
  %4 = sub nsw i64 9223372036854775807, %x4
  %5 = icmp sgt i64 %1, %4
  br i1 %5, label %7, label %6

; <label>:6                                       ; preds = %0, %3
  br label %7

; <label>:7                                       ; preds = %6, %3
  %8 = phi i32 [ 1, %3 ], [ 0, %6 ]
  ret i32 %8
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = select i1 %or.cond, i32 1, i32 0
  ret i32 %5
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #2
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #2
  ret i32 0
}
*** IR Dump After Remove unused exception handling info ***
; Function Attrs: nounwind uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = select i1 %or.cond, i32 1, i32 0
  ret i32 %5
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = select i1 %or.cond, i32 1, i32 0
  ret i32 %5
}
*** IR Dump After Deduce function attributes ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = select i1 %or.cond, i32 1, i32 0
  ret i32 %5
}
*** IR Dump After SROA ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = select i1 %or.cond, i32 1, i32 0
  ret i32 %5
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = select i1 %or.cond, i32 1, i32 0
  ret i32 %5
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = select i1 %or.cond, i32 1, i32 0
  ret i32 %5
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = select i1 %or.cond, i32 1, i32 0
  ret i32 %5
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = select i1 %or.cond, i32 1, i32 0
  ret i32 %5
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Tail Call Elimination ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Reassociate expressions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After MemCpy Optimization ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Sparse Conditional Constant Propagation ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Dead Store Elimination ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Aggressive Dead Code Elimination ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Remove unused exception handling info ***
Printing <null> Function
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After Deduce function attributes ***
Printing <null> Function
*** IR Dump After Remove unused exception handling info ***
declare i32 @printf(i8*, ...) #2
*** IR Dump After Inliner for always_inline functions ***
declare i32 @printf(i8*, ...) #2
*** IR Dump After Deduce function attributes ***
; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #2
*** IR Dump After Remove unused exception handling info ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Deduce function attributes ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Tail Call Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Reassociate expressions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After MemCpy Optimization ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Sparse Conditional Constant Propagation ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Dead Store Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Aggressive Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Remove unused exception handling info ***
Printing <null> Function
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After Deduce function attributes ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***; ModuleID = '4-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x0 = common global i64 0, align 8
@x1 = common global i32 0, align 4
@x2 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #2

attributes #0 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Loop Vectorization ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Alignment from assumptions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Loop Vectorization ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Alignment from assumptions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Strip Unused Function Prototypes ***; ModuleID = '4-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x0 = common global i64 0, align 8
@x1 = common global i32 0, align 4
@x2 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #2

attributes #0 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}
*** IR Dump After Debug Info Verifier ***; ModuleID = '4-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x0 = common global i64 0, align 8
@x1 = common global i32 0, align 4
@x2 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #2

attributes #0 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
*** IR Dump After Print module to stderr ***; ModuleID = '4-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x0 = common global i64 0, align 8
@x1 = common global i32 0, align 4
@x2 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind readonly uwtable
define i32 @x3(i64 %x4) #0 {
  %1 = load i64* @x0, align 8
  %2 = icmp ne i64 %1, 0
  %3 = sub nsw i64 9223372036854775807, %x4
  %4 = icmp sgt i64 %1, %3
  %or.cond = and i1 %2, %4
  %5 = zext i1 %or.cond to i32
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = load i32* @x1, align 4
  %2 = and i32 %1, 1
  %3 = zext i32 %2 to i64
  %4 = or i64 %3, -4
  %5 = tail call i32 @x3(i64 %4)
  store i32 %5, i32* @x2, align 4
  %6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %5) #3
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #2

attributes #0 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
