*** IR Dump After Module Verifier ***
; Function Attrs: nounwind uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Lower 'expect' Intrinsics ***
; Function Attrs: nounwind uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %x7 = alloca i32, align 4
  %x8 = alloca i64, align 8
  store i32 0, i32* %1
  %2 = call i32 @x6()
  store i32 %2, i32* %x7, align 4
  %3 = load i32* %x7, align 4
  %4 = sdiv i32 227, %3
  %5 = trunc i32 %4 to i8
  store i8 %5, i8* @x5, align 1
  %6 = load i8* @x5, align 1
  %7 = sext i8 %6 to i64
  store i64 %7, i64* %x8, align 8
  %8 = load i64* @x0, align 8
  %9 = icmp ne i64 %8, 0
  br i1 %9, label %10, label %15

; <label>:10                                      ; preds = %0
  %11 = load i64* @x0, align 8
  %12 = load i64* %x8, align 8
  %13 = sub nsw i64 9223372036854775807, %12
  %14 = icmp sgt i64 %11, %13
  br i1 %14, label %19, label %15

; <label>:15                                      ; preds = %10, %0
  %16 = load i64* @x0, align 8
  %17 = load i64* %x8, align 8
  %18 = icmp slt i64 %16, %17
  br label %19

; <label>:19                                      ; preds = %15, %10
  %20 = phi i1 [ true, %10 ], [ %18, %15 ]
  %21 = zext i1 %20 to i32
  store i32 %21, i32* @x3, align 4
  %22 = load i32* @x3, align 4
  %23 = load i32** @x4, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32* @x2, align 4
  %25 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %24)
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %x7 = alloca i32, align 4
  %x8 = alloca i64, align 8
  store i32 0, i32* %1
  %2 = call i32 @x6()
  store i32 %2, i32* %x7, align 4
  %3 = load i32* %x7, align 4
  %4 = sdiv i32 227, %3
  %5 = trunc i32 %4 to i8
  store i8 %5, i8* @x5, align 1
  %6 = load i8* @x5, align 1
  %7 = sext i8 %6 to i64
  store i64 %7, i64* %x8, align 8
  %8 = load i64* @x0, align 8
  %9 = icmp ne i64 %8, 0
  br i1 %9, label %10, label %15

; <label>:10                                      ; preds = %0
  %11 = load i64* @x0, align 8
  %12 = load i64* %x8, align 8
  %13 = sub nsw i64 9223372036854775807, %12
  %14 = icmp sgt i64 %11, %13
  br i1 %14, label %19, label %15

; <label>:15                                      ; preds = %10, %0
  %16 = load i64* @x0, align 8
  %17 = load i64* %x8, align 8
  %18 = icmp slt i64 %16, %17
  br label %19

; <label>:19                                      ; preds = %15, %10
  %20 = phi i1 [ true, %10 ], [ %18, %15 ]
  %21 = zext i1 %20 to i32
  store i32 %21, i32* @x3, align 4
  %22 = load i32* @x3, align 4
  %23 = load i32** @x4, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32* @x2, align 4
  %25 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %24)
  ret i32 0
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = load i8* @x5, align 1
  %5 = sext i8 %4 to i64
  %6 = load i64* @x0, align 8
  %7 = icmp ne i64 %6, 0
  br i1 %7, label %8, label %12

; <label>:8                                       ; preds = %0
  %9 = load i64* @x0, align 8
  %10 = sub nsw i64 9223372036854775807, %5
  %11 = icmp sgt i64 %9, %10
  br i1 %11, label %15, label %12

; <label>:12                                      ; preds = %8, %0
  %13 = load i64* @x0, align 8
  %14 = icmp slt i64 %13, %5
  br label %15

; <label>:15                                      ; preds = %12, %8
  %16 = phi i1 [ true, %8 ], [ %14, %12 ]
  %17 = zext i1 %16 to i32
  store i32 %17, i32* @x3, align 4
  %18 = load i32* @x3, align 4
  %19 = load i32** @x4, align 8
  store i32 %18, i32* %19, align 4
  %20 = load i32* @x2, align 4
  %21 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %20)
  ret i32 0
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %0
  %8 = sub nsw i64 9223372036854775807, %4
  %9 = icmp sgt i64 %5, %8
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %7, %0
  %11 = load i64* @x0, align 8
  %12 = icmp slt i64 %11, %4
  br label %13

; <label>:13                                      ; preds = %10, %7
  %14 = phi i1 [ true, %7 ], [ %12, %10 ]
  %15 = zext i1 %14 to i32
  store i32 %15, i32* @x3, align 4
  %16 = load i32** @x4, align 8
  store i32 %15, i32* %16, align 4
  %17 = load i32* @x2, align 4
  %18 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %17)
  ret i32 0
}
*** IR Dump After Lower 'expect' Intrinsics ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %0
  %8 = sub nsw i64 9223372036854775807, %4
  %9 = icmp sgt i64 %5, %8
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %7, %0
  %11 = load i64* @x0, align 8
  %12 = icmp slt i64 %11, %4
  br label %13

; <label>:13                                      ; preds = %10, %7
  %14 = phi i1 [ true, %7 ], [ %12, %10 ]
  %15 = zext i1 %14 to i32
  store i32 %15, i32* @x3, align 4
  %16 = load i32** @x4, align 8
  store i32 %15, i32* %16, align 4
  %17 = load i32* @x2, align 4
  %18 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %17)
  ret i32 0
}
*** IR Dump After Debug Info Verifier ***; ModuleID = '6-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x2 = common global i32 0, align 4
@x4 = global i32* @x2, align 8
@x1 = common global i32 0, align 4
@x5 = common global i8 0, align 1
@x0 = common global i64 0, align 8
@x3 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %0
  %8 = sub nsw i64 9223372036854775807, %4
  %9 = icmp sgt i64 %5, %8
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %7, %0
  %11 = load i64* @x0, align 8
  %12 = icmp slt i64 %11, %4
  br label %13

; <label>:13                                      ; preds = %10, %7
  %14 = phi i1 [ true, %7 ], [ %12, %10 ]
  %15 = zext i1 %14 to i32
  store i32 %15, i32* @x3, align 4
  %16 = load i32** @x4, align 8
  store i32 %15, i32* %16, align 4
  %17 = load i32* @x2, align 4
  %18 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %17)
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
*** IR Dump After Interprocedural Sparse Conditional Constant Propagation ***; ModuleID = '6-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x2 = common global i32 0, align 4
@x4 = global i32* @x2, align 8
@x1 = common global i32 0, align 4
@x5 = common global i8 0, align 1
@x0 = common global i64 0, align 8
@x3 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %0
  %8 = sub nsw i64 9223372036854775807, %4
  %9 = icmp sgt i64 %5, %8
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %7, %0
  %11 = load i64* @x0, align 8
  %12 = icmp slt i64 %11, %4
  br label %13

; <label>:13                                      ; preds = %10, %7
  %14 = phi i1 [ true, %7 ], [ %12, %10 ]
  %15 = zext i1 %14 to i32
  store i32 %15, i32* @x3, align 4
  %16 = load i32** @x4, align 8
  store i32 %15, i32* %16, align 4
  %17 = load i32* @x2, align 4
  %18 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %17)
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
*** IR Dump After Global Variable Optimizer ***; ModuleID = '6-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x2 = common global i32 0, align 4
@x4 = global i32* @x2, align 8
@x1 = common global i32 0, align 4
@x5 = common global i8 0, align 1
@x0 = common global i64 0, align 8
@x3 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %0
  %8 = sub nsw i64 9223372036854775807, %4
  %9 = icmp sgt i64 %5, %8
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %7, %0
  %11 = load i64* @x0, align 8
  %12 = icmp slt i64 %11, %4
  br label %13

; <label>:13                                      ; preds = %10, %7
  %14 = phi i1 [ true, %7 ], [ %12, %10 ]
  %15 = zext i1 %14 to i32
  store i32 %15, i32* @x3, align 4
  %16 = load i32** @x4, align 8
  store i32 %15, i32* %16, align 4
  %17 = load i32* @x2, align 4
  %18 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %17)
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
*** IR Dump After Dead Argument Elimination ***; ModuleID = '6-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x2 = common global i32 0, align 4
@x4 = global i32* @x2, align 8
@x1 = common global i32 0, align 4
@x5 = common global i8 0, align 1
@x0 = common global i64 0, align 8
@x3 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  br i1 %6, label %7, label %10

; <label>:7                                       ; preds = %0
  %8 = sub nsw i64 9223372036854775807, %4
  %9 = icmp sgt i64 %5, %8
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %7, %0
  %11 = load i64* @x0, align 8
  %12 = icmp slt i64 %11, %4
  br label %13

; <label>:13                                      ; preds = %10, %7
  %14 = phi i1 [ true, %7 ], [ %12, %10 ]
  %15 = zext i1 %14 to i32
  store i32 %15, i32* @x3, align 4
  %16 = load i32** @x4, align 8
  store i32 %15, i32* %16, align 4
  %17 = load i32* @x2, align 4
  %18 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32 %17)
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %10, label %7

; <label>:7                                       ; preds = %0
  %8 = sub nsw i64 9223372036854775807, %4
  %9 = icmp sgt i64 %5, %8
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %0, %7
  %11 = load i64* @x0, align 8
  %12 = icmp slt i64 %11, %4
  br label %13

; <label>:13                                      ; preds = %10, %7
  %14 = phi i1 [ true, %7 ], [ %12, %10 ]
  %15 = zext i1 %14 to i32
  store i32 %15, i32* @x3, align 4
  %16 = load i32** @x4, align 8
  store i32 %15, i32* %16, align 4
  %17 = load i32* @x2, align 4
  %18 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %17) #2
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  br i1 %or.cond, label %12, label %9

; <label>:9                                       ; preds = %0
  %10 = load i64* @x0, align 8
  %11 = icmp slt i64 %10, %4
  br label %12

; <label>:12                                      ; preds = %0, %9
  %13 = phi i1 [ %11, %9 ], [ true, %0 ]
  %14 = zext i1 %13 to i32
  store i32 %14, i32* @x3, align 4
  %15 = load i32** @x4, align 8
  store i32 %14, i32* %15, align 4
  %16 = load i32* @x2, align 4
  %17 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %16) #2
  ret i32 0
}
*** IR Dump After Remove unused exception handling info ***
; Function Attrs: nounwind uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Deduce function attributes ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After SROA ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Tail Call Elimination ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Reassociate expressions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After MemCpy Optimization ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Sparse Conditional Constant Propagation ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Dead Store Elimination ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Aggressive Dead Code Elimination ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Remove unused exception handling info ***
Printing <null> Function
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After Deduce function attributes ***
Printing <null> Function
*** IR Dump After Remove unused exception handling info ***
declare i32 @printf(i8*, ...) #2
*** IR Dump After Inliner for always_inline functions ***
declare i32 @printf(i8*, ...) #2
*** IR Dump After Deduce function attributes ***
; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #2
*** IR Dump After Remove unused exception handling info ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  br i1 %or.cond, label %12, label %9

; <label>:9                                       ; preds = %0
  %10 = load i64* @x0, align 8
  %11 = icmp slt i64 %10, %4
  br label %12

; <label>:12                                      ; preds = %0, %9
  %13 = phi i1 [ %11, %9 ], [ true, %0 ]
  %14 = zext i1 %13 to i32
  store i32 %14, i32* @x3, align 4
  %15 = load i32** @x4, align 8
  store i32 %14, i32* %15, align 4
  %16 = load i32* @x2, align 4
  %17 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %16) #3
  ret i32 0
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  br i1 %or.cond, label %12, label %9

; <label>:9                                       ; preds = %0
  %10 = load i64* @x0, align 8
  %11 = icmp slt i64 %10, %4
  br label %12

; <label>:12                                      ; preds = %0, %9
  %13 = phi i1 [ %11, %9 ], [ true, %0 ]
  %14 = zext i1 %13 to i32
  store i32 %14, i32* @x3, align 4
  %15 = load i32** @x4, align 8
  store i32 %14, i32* %15, align 4
  %16 = load i32* @x2, align 4
  %17 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %16) #3
  ret i32 0
}
*** IR Dump After Deduce function attributes ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  br i1 %or.cond, label %12, label %9

; <label>:9                                       ; preds = %0
  %10 = load i64* @x0, align 8
  %11 = icmp slt i64 %10, %4
  br label %12

; <label>:12                                      ; preds = %0, %9
  %13 = phi i1 [ %11, %9 ], [ true, %0 ]
  %14 = zext i1 %13 to i32
  store i32 %14, i32* @x3, align 4
  %15 = load i32** @x4, align 8
  store i32 %14, i32* %15, align 4
  %16 = load i32* @x2, align 4
  %17 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %16) #3
  ret i32 0
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  br i1 %or.cond, label %12, label %9

; <label>:9                                       ; preds = %0
  %10 = load i64* @x0, align 8
  %11 = icmp slt i64 %10, %4
  br label %12

; <label>:12                                      ; preds = %0, %9
  %13 = phi i1 [ %11, %9 ], [ true, %0 ]
  %14 = zext i1 %13 to i32
  store i32 %14, i32* @x3, align 4
  %15 = load i32** @x4, align 8
  store i32 %14, i32* %15, align 4
  %16 = load i32* @x2, align 4
  %17 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %16) #3
  ret i32 0
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  br i1 %or.cond, label %11, label %9

; <label>:9                                       ; preds = %0
  %10 = icmp slt i64 %5, %4
  br label %11

; <label>:11                                      ; preds = %0, %9
  %12 = phi i1 [ %10, %9 ], [ true, %0 ]
  %13 = zext i1 %12 to i32
  store i32 %13, i32* @x3, align 4
  %14 = load i32** @x4, align 8
  store i32 %13, i32* %14, align 4
  %15 = load i32* @x2, align 4
  %16 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %15) #3
  ret i32 0
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  br i1 %or.cond, label %11, label %9

; <label>:9                                       ; preds = %0
  %10 = icmp slt i64 %5, %4
  br label %11

; <label>:11                                      ; preds = %0, %9
  %12 = phi i1 [ %10, %9 ], [ true, %0 ]
  %13 = zext i1 %12 to i32
  store i32 %13, i32* @x3, align 4
  %14 = load i32** @x4, align 8
  store i32 %13, i32* %14, align 4
  %15 = load i32* @x2, align 4
  %16 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %15) #3
  ret i32 0
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  br i1 %or.cond, label %11, label %9

; <label>:9                                       ; preds = %0
  %10 = icmp slt i64 %5, %4
  br label %11

; <label>:11                                      ; preds = %0, %9
  %12 = phi i1 [ %10, %9 ], [ true, %0 ]
  %13 = zext i1 %12 to i32
  store i32 %13, i32* @x3, align 4
  %14 = load i32** @x4, align 8
  store i32 %13, i32* %14, align 4
  %15 = load i32* @x2, align 4
  %16 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %15) #3
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = select i1 %or.cond, i1 true, i1 %9
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %or.cond, %9
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Tail Call Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %or.cond, %9
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %or.cond, %9
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Reassociate expressions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After MemCpy Optimization ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Sparse Conditional Constant Propagation ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Dead Store Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Aggressive Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Remove unused exception handling info ***
Printing <null> Function
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After Deduce function attributes ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***; ModuleID = '6-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x2 = common global i32 0, align 4
@x4 = global i32* @x2, align 8
@x1 = common global i32 0, align 4
@x5 = common global i8 0, align 1
@x0 = common global i64 0, align 8
@x3 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #2

attributes #0 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Loop Vectorization ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Alignment from assumptions ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Loop Vectorization ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Alignment from assumptions ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Strip Unused Function Prototypes ***; ModuleID = '6-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x2 = common global i32 0, align 4
@x4 = global i32* @x2, align 8
@x1 = common global i32 0, align 4
@x5 = common global i8 0, align 1
@x0 = common global i64 0, align 8
@x3 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #2

attributes #0 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}
*** IR Dump After Debug Info Verifier ***; ModuleID = '6-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x2 = common global i32 0, align 4
@x4 = global i32* @x2, align 8
@x1 = common global i32 0, align 4
@x5 = common global i8 0, align 1
@x0 = common global i64 0, align 8
@x3 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #2

attributes #0 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
*** IR Dump After Print module to stderr ***; ModuleID = '6-O0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x2 = common global i32 0, align 4
@x4 = global i32* @x2, align 8
@x1 = common global i32 0, align 4
@x5 = common global i8 0, align 1
@x0 = common global i64 0, align 8
@x3 = common global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%x\00", align 1

; Function Attrs: nounwind readonly uwtable
define i32 @x6() #0 {
  %1 = load i32* @x1, align 4
  %2 = icmp eq i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define i32 @main() #1 {
  %1 = tail call i32 @x6()
  %2 = sdiv i32 227, %1
  %3 = trunc i32 %2 to i8
  store i8 %3, i8* @x5, align 1
  %4 = sext i8 %3 to i64
  %5 = load i64* @x0, align 8
  %6 = icmp ne i64 %5, 0
  %7 = sub nsw i64 9223372036854775807, %4
  %8 = icmp sgt i64 %5, %7
  %or.cond = and i1 %6, %8
  %9 = icmp slt i64 %5, %4
  %. = or i1 %9, %or.cond
  %10 = zext i1 %. to i32
  store i32 %10, i32* @x3, align 4
  %11 = load i32** @x4, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32* @x2, align 4
  %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %12) #3
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #2

attributes #0 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (trunk 226968)"}
