#!/usr/bin/perl
# do a simple math operation on an arbitrary sized integer

use Math::BigInt;

scriptname='bigint';

our $arg_left= shift @ARGV;
our $arg_op= shift @ARGV;
our $arg_right= shift @ARGV;

if ( $arg_left eq 'rand' )  { 
   exit generate_random_number( $arg_op, $arg_right );
}

our $big_left= Math::BigInt->new( $arg_left );
our $big_right= Math::BigInt->new( $arg_right );
our $big_result= $big_left->copy();

if ( $arg_op eq "+" )  {
   $big_result->badd( $big_right );
} elsif ( $arg_op eq "-" )  {
   $big_result->bsub( $big_right );
} elsif ( $arg_op eq "*" )  {
   $big_result->bmul( $big_right );
} elsif ( $arg_op eq "/" )  { 
   $big_result->bdiv( $big_right );
} else {
   die $scriptname . ": do not understand operator \"$arg_op\". \n";
}

print "result=\"" . $big_result->bstr() . "\"\n";
print "   =\"" . $big_result->as_hex() . "\"\n";

exit 0

sub generate_random_number
{{
   my( $size, $unit )= @_;

   if ( $size !~ m/^\d+$/ )  {
      die $main::scriptname . 
	    ": given size does not appear to be a number, \n" .
            "\t" . "\"$size\". \n";
   }

   my( $num_bits );
   if ( $unit eq "bit" or $unit eq "bits" )  {
      $num_bits= $size;
   } elsif ( $unit eq "nibble" or $unit eq "nibbles" )  {
      $num_bits= $size * 4;
   } elsif ( $unit eq "byte" or $unit eq "bytes" )  {
      $num_bits= $size * 8;
   } else {
      die $main::scriptname . " do not understand unit \"$unit\", \n" .
            "\t" . "try 'bit', 'nibble', or 'byte'. \n";
   }

   my ( $rand_num )= "";
   my( $remaining_bits )= $num_bits;
   while ( $remaining_bits > 4 )  {
      $rand_num.= sprintf( "%x", rand() * 16 );
      print "rand_num=\"$rand_num\"\n";;
      $remaining_bits-= 4;
   }
   $rand_num= sprintf( "%x", rand() * 2** $remaining_bits ) . $rand_num;
   print $rand_num . "\n";

   # clean up and return
   return 0;
}}

# end of script

